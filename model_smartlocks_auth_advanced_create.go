/*
Nuki API

The Nuki Web Api

API version: 3.10.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the SmartlocksAuthAdvancedCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartlocksAuthAdvancedCreate{}

// SmartlocksAuthAdvancedCreate struct for SmartlocksAuthAdvancedCreate
type SmartlocksAuthAdvancedCreate struct {
	// The name of the authorization (max 32 chars)
	Name string `json:"name"`
	// The allowed from date
	AllowedFromDate *time.Time `json:"allowedFromDate,omitempty"`
	// The allowed until date
	AllowedUntilDate *time.Time `json:"allowedUntilDate,omitempty"`
	// The allowed weekdays bitmask: 64 .. monday, 32 .. tuesday, 16 .. wednesday, 8 .. thursday, 4 .. friday, 2 .. saturday, 1 .. sunday
	AllowedWeekDays *int32 `json:"allowedWeekDays,omitempty"`
	// The allowed from time (in minutes from midnight)
	AllowedFromTime *int32 `json:"allowedFromTime,omitempty"`
	// The allowed until time (in minutes from midnight)
	AllowedUntilTime *int32 `json:"allowedUntilTime,omitempty"`
	// The id of the linked account user
	AccountUserId int32 `json:"accountUserId"`
	// The list of smartlock ids
	SmartlockIds []int64 `json:"smartlockIds"`
	// True if the auth has remote access
	RemoteAllowed bool `json:"remoteAllowed"`
	// The smart actions enabled flag
	SmartActionsEnabled *bool `json:"smartActionsEnabled,omitempty"`
}

type _SmartlocksAuthAdvancedCreate SmartlocksAuthAdvancedCreate

// NewSmartlocksAuthAdvancedCreate instantiates a new SmartlocksAuthAdvancedCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartlocksAuthAdvancedCreate(name string, accountUserId int32, smartlockIds []int64, remoteAllowed bool) *SmartlocksAuthAdvancedCreate {
	this := SmartlocksAuthAdvancedCreate{}
	this.Name = name
	this.AccountUserId = accountUserId
	this.SmartlockIds = smartlockIds
	this.RemoteAllowed = remoteAllowed
	return &this
}

// NewSmartlocksAuthAdvancedCreateWithDefaults instantiates a new SmartlocksAuthAdvancedCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartlocksAuthAdvancedCreateWithDefaults() *SmartlocksAuthAdvancedCreate {
	this := SmartlocksAuthAdvancedCreate{}
	return &this
}

// GetName returns the Name field value
func (o *SmartlocksAuthAdvancedCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SmartlocksAuthAdvancedCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SmartlocksAuthAdvancedCreate) SetName(v string) {
	o.Name = v
}

// GetAllowedFromDate returns the AllowedFromDate field value if set, zero value otherwise.
func (o *SmartlocksAuthAdvancedCreate) GetAllowedFromDate() time.Time {
	if o == nil || IsNil(o.AllowedFromDate) {
		var ret time.Time
		return ret
	}
	return *o.AllowedFromDate
}

// GetAllowedFromDateOk returns a tuple with the AllowedFromDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlocksAuthAdvancedCreate) GetAllowedFromDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AllowedFromDate) {
		return nil, false
	}
	return o.AllowedFromDate, true
}

// HasAllowedFromDate returns a boolean if a field has been set.
func (o *SmartlocksAuthAdvancedCreate) HasAllowedFromDate() bool {
	if o != nil && !IsNil(o.AllowedFromDate) {
		return true
	}

	return false
}

// SetAllowedFromDate gets a reference to the given time.Time and assigns it to the AllowedFromDate field.
func (o *SmartlocksAuthAdvancedCreate) SetAllowedFromDate(v time.Time) {
	o.AllowedFromDate = &v
}

// GetAllowedUntilDate returns the AllowedUntilDate field value if set, zero value otherwise.
func (o *SmartlocksAuthAdvancedCreate) GetAllowedUntilDate() time.Time {
	if o == nil || IsNil(o.AllowedUntilDate) {
		var ret time.Time
		return ret
	}
	return *o.AllowedUntilDate
}

// GetAllowedUntilDateOk returns a tuple with the AllowedUntilDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlocksAuthAdvancedCreate) GetAllowedUntilDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AllowedUntilDate) {
		return nil, false
	}
	return o.AllowedUntilDate, true
}

// HasAllowedUntilDate returns a boolean if a field has been set.
func (o *SmartlocksAuthAdvancedCreate) HasAllowedUntilDate() bool {
	if o != nil && !IsNil(o.AllowedUntilDate) {
		return true
	}

	return false
}

// SetAllowedUntilDate gets a reference to the given time.Time and assigns it to the AllowedUntilDate field.
func (o *SmartlocksAuthAdvancedCreate) SetAllowedUntilDate(v time.Time) {
	o.AllowedUntilDate = &v
}

// GetAllowedWeekDays returns the AllowedWeekDays field value if set, zero value otherwise.
func (o *SmartlocksAuthAdvancedCreate) GetAllowedWeekDays() int32 {
	if o == nil || IsNil(o.AllowedWeekDays) {
		var ret int32
		return ret
	}
	return *o.AllowedWeekDays
}

// GetAllowedWeekDaysOk returns a tuple with the AllowedWeekDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlocksAuthAdvancedCreate) GetAllowedWeekDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.AllowedWeekDays) {
		return nil, false
	}
	return o.AllowedWeekDays, true
}

// HasAllowedWeekDays returns a boolean if a field has been set.
func (o *SmartlocksAuthAdvancedCreate) HasAllowedWeekDays() bool {
	if o != nil && !IsNil(o.AllowedWeekDays) {
		return true
	}

	return false
}

// SetAllowedWeekDays gets a reference to the given int32 and assigns it to the AllowedWeekDays field.
func (o *SmartlocksAuthAdvancedCreate) SetAllowedWeekDays(v int32) {
	o.AllowedWeekDays = &v
}

// GetAllowedFromTime returns the AllowedFromTime field value if set, zero value otherwise.
func (o *SmartlocksAuthAdvancedCreate) GetAllowedFromTime() int32 {
	if o == nil || IsNil(o.AllowedFromTime) {
		var ret int32
		return ret
	}
	return *o.AllowedFromTime
}

// GetAllowedFromTimeOk returns a tuple with the AllowedFromTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlocksAuthAdvancedCreate) GetAllowedFromTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.AllowedFromTime) {
		return nil, false
	}
	return o.AllowedFromTime, true
}

// HasAllowedFromTime returns a boolean if a field has been set.
func (o *SmartlocksAuthAdvancedCreate) HasAllowedFromTime() bool {
	if o != nil && !IsNil(o.AllowedFromTime) {
		return true
	}

	return false
}

// SetAllowedFromTime gets a reference to the given int32 and assigns it to the AllowedFromTime field.
func (o *SmartlocksAuthAdvancedCreate) SetAllowedFromTime(v int32) {
	o.AllowedFromTime = &v
}

// GetAllowedUntilTime returns the AllowedUntilTime field value if set, zero value otherwise.
func (o *SmartlocksAuthAdvancedCreate) GetAllowedUntilTime() int32 {
	if o == nil || IsNil(o.AllowedUntilTime) {
		var ret int32
		return ret
	}
	return *o.AllowedUntilTime
}

// GetAllowedUntilTimeOk returns a tuple with the AllowedUntilTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlocksAuthAdvancedCreate) GetAllowedUntilTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.AllowedUntilTime) {
		return nil, false
	}
	return o.AllowedUntilTime, true
}

// HasAllowedUntilTime returns a boolean if a field has been set.
func (o *SmartlocksAuthAdvancedCreate) HasAllowedUntilTime() bool {
	if o != nil && !IsNil(o.AllowedUntilTime) {
		return true
	}

	return false
}

// SetAllowedUntilTime gets a reference to the given int32 and assigns it to the AllowedUntilTime field.
func (o *SmartlocksAuthAdvancedCreate) SetAllowedUntilTime(v int32) {
	o.AllowedUntilTime = &v
}

// GetAccountUserId returns the AccountUserId field value
func (o *SmartlocksAuthAdvancedCreate) GetAccountUserId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountUserId
}

// GetAccountUserIdOk returns a tuple with the AccountUserId field value
// and a boolean to check if the value has been set.
func (o *SmartlocksAuthAdvancedCreate) GetAccountUserIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountUserId, true
}

// SetAccountUserId sets field value
func (o *SmartlocksAuthAdvancedCreate) SetAccountUserId(v int32) {
	o.AccountUserId = v
}

// GetSmartlockIds returns the SmartlockIds field value
func (o *SmartlocksAuthAdvancedCreate) GetSmartlockIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.SmartlockIds
}

// GetSmartlockIdsOk returns a tuple with the SmartlockIds field value
// and a boolean to check if the value has been set.
func (o *SmartlocksAuthAdvancedCreate) GetSmartlockIdsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SmartlockIds, true
}

// SetSmartlockIds sets field value
func (o *SmartlocksAuthAdvancedCreate) SetSmartlockIds(v []int64) {
	o.SmartlockIds = v
}

// GetRemoteAllowed returns the RemoteAllowed field value
func (o *SmartlocksAuthAdvancedCreate) GetRemoteAllowed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RemoteAllowed
}

// GetRemoteAllowedOk returns a tuple with the RemoteAllowed field value
// and a boolean to check if the value has been set.
func (o *SmartlocksAuthAdvancedCreate) GetRemoteAllowedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteAllowed, true
}

// SetRemoteAllowed sets field value
func (o *SmartlocksAuthAdvancedCreate) SetRemoteAllowed(v bool) {
	o.RemoteAllowed = v
}

// GetSmartActionsEnabled returns the SmartActionsEnabled field value if set, zero value otherwise.
func (o *SmartlocksAuthAdvancedCreate) GetSmartActionsEnabled() bool {
	if o == nil || IsNil(o.SmartActionsEnabled) {
		var ret bool
		return ret
	}
	return *o.SmartActionsEnabled
}

// GetSmartActionsEnabledOk returns a tuple with the SmartActionsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlocksAuthAdvancedCreate) GetSmartActionsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SmartActionsEnabled) {
		return nil, false
	}
	return o.SmartActionsEnabled, true
}

// HasSmartActionsEnabled returns a boolean if a field has been set.
func (o *SmartlocksAuthAdvancedCreate) HasSmartActionsEnabled() bool {
	if o != nil && !IsNil(o.SmartActionsEnabled) {
		return true
	}

	return false
}

// SetSmartActionsEnabled gets a reference to the given bool and assigns it to the SmartActionsEnabled field.
func (o *SmartlocksAuthAdvancedCreate) SetSmartActionsEnabled(v bool) {
	o.SmartActionsEnabled = &v
}

func (o SmartlocksAuthAdvancedCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartlocksAuthAdvancedCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.AllowedFromDate) {
		toSerialize["allowedFromDate"] = o.AllowedFromDate
	}
	if !IsNil(o.AllowedUntilDate) {
		toSerialize["allowedUntilDate"] = o.AllowedUntilDate
	}
	if !IsNil(o.AllowedWeekDays) {
		toSerialize["allowedWeekDays"] = o.AllowedWeekDays
	}
	if !IsNil(o.AllowedFromTime) {
		toSerialize["allowedFromTime"] = o.AllowedFromTime
	}
	if !IsNil(o.AllowedUntilTime) {
		toSerialize["allowedUntilTime"] = o.AllowedUntilTime
	}
	toSerialize["accountUserId"] = o.AccountUserId
	toSerialize["smartlockIds"] = o.SmartlockIds
	toSerialize["remoteAllowed"] = o.RemoteAllowed
	if !IsNil(o.SmartActionsEnabled) {
		toSerialize["smartActionsEnabled"] = o.SmartActionsEnabled
	}
	return toSerialize, nil
}

func (o *SmartlocksAuthAdvancedCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"accountUserId",
		"smartlockIds",
		"remoteAllowed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmartlocksAuthAdvancedCreate := _SmartlocksAuthAdvancedCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSmartlocksAuthAdvancedCreate)

	if err != nil {
		return err
	}

	*o = SmartlocksAuthAdvancedCreate(varSmartlocksAuthAdvancedCreate)

	return err
}

type NullableSmartlocksAuthAdvancedCreate struct {
	value *SmartlocksAuthAdvancedCreate
	isSet bool
}

func (v NullableSmartlocksAuthAdvancedCreate) Get() *SmartlocksAuthAdvancedCreate {
	return v.value
}

func (v *NullableSmartlocksAuthAdvancedCreate) Set(val *SmartlocksAuthAdvancedCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartlocksAuthAdvancedCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartlocksAuthAdvancedCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartlocksAuthAdvancedCreate(val *SmartlocksAuthAdvancedCreate) *NullableSmartlocksAuthAdvancedCreate {
	return &NullableSmartlocksAuthAdvancedCreate{value: val, isSet: true}
}

func (v NullableSmartlocksAuthAdvancedCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartlocksAuthAdvancedCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


