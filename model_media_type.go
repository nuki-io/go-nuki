/*
Nuki API

The Nuki Web Api

API version: 3.10.2
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the MediaType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaType{}

// MediaType struct for MediaType
type MediaType struct {
	Description *string `json:"description,omitempty"`
	Name *string `json:"name,omitempty"`
	Parameters []Parameter `json:"parameters,omitempty"`
	Concrete *bool `json:"concrete,omitempty"`
	MainType *string `json:"mainType,omitempty"`
	SubType *string `json:"subType,omitempty"`
	Parent *MediaType `json:"parent,omitempty"`
}

// NewMediaType instantiates a new MediaType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaType() *MediaType {
	this := MediaType{}
	return &this
}

// NewMediaTypeWithDefaults instantiates a new MediaType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaTypeWithDefaults() *MediaType {
	this := MediaType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MediaType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MediaType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MediaType) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MediaType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MediaType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MediaType) SetName(v string) {
	o.Name = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *MediaType) GetParameters() []Parameter {
	if o == nil || IsNil(o.Parameters) {
		var ret []Parameter
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaType) GetParametersOk() ([]Parameter, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *MediaType) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []Parameter and assigns it to the Parameters field.
func (o *MediaType) SetParameters(v []Parameter) {
	o.Parameters = v
}

// GetConcrete returns the Concrete field value if set, zero value otherwise.
func (o *MediaType) GetConcrete() bool {
	if o == nil || IsNil(o.Concrete) {
		var ret bool
		return ret
	}
	return *o.Concrete
}

// GetConcreteOk returns a tuple with the Concrete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaType) GetConcreteOk() (*bool, bool) {
	if o == nil || IsNil(o.Concrete) {
		return nil, false
	}
	return o.Concrete, true
}

// HasConcrete returns a boolean if a field has been set.
func (o *MediaType) HasConcrete() bool {
	if o != nil && !IsNil(o.Concrete) {
		return true
	}

	return false
}

// SetConcrete gets a reference to the given bool and assigns it to the Concrete field.
func (o *MediaType) SetConcrete(v bool) {
	o.Concrete = &v
}

// GetMainType returns the MainType field value if set, zero value otherwise.
func (o *MediaType) GetMainType() string {
	if o == nil || IsNil(o.MainType) {
		var ret string
		return ret
	}
	return *o.MainType
}

// GetMainTypeOk returns a tuple with the MainType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaType) GetMainTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MainType) {
		return nil, false
	}
	return o.MainType, true
}

// HasMainType returns a boolean if a field has been set.
func (o *MediaType) HasMainType() bool {
	if o != nil && !IsNil(o.MainType) {
		return true
	}

	return false
}

// SetMainType gets a reference to the given string and assigns it to the MainType field.
func (o *MediaType) SetMainType(v string) {
	o.MainType = &v
}

// GetSubType returns the SubType field value if set, zero value otherwise.
func (o *MediaType) GetSubType() string {
	if o == nil || IsNil(o.SubType) {
		var ret string
		return ret
	}
	return *o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaType) GetSubTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SubType) {
		return nil, false
	}
	return o.SubType, true
}

// HasSubType returns a boolean if a field has been set.
func (o *MediaType) HasSubType() bool {
	if o != nil && !IsNil(o.SubType) {
		return true
	}

	return false
}

// SetSubType gets a reference to the given string and assigns it to the SubType field.
func (o *MediaType) SetSubType(v string) {
	o.SubType = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *MediaType) GetParent() MediaType {
	if o == nil || IsNil(o.Parent) {
		var ret MediaType
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaType) GetParentOk() (*MediaType, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *MediaType) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given MediaType and assigns it to the Parent field.
func (o *MediaType) SetParent(v MediaType) {
	o.Parent = &v
}

func (o MediaType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.Concrete) {
		toSerialize["concrete"] = o.Concrete
	}
	if !IsNil(o.MainType) {
		toSerialize["mainType"] = o.MainType
	}
	if !IsNil(o.SubType) {
		toSerialize["subType"] = o.SubType
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	return toSerialize, nil
}

type NullableMediaType struct {
	value *MediaType
	isSet bool
}

func (v NullableMediaType) Get() *MediaType {
	return v.value
}

func (v *NullableMediaType) Set(val *MediaType) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaType) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaType(val *MediaType) *NullableMediaType {
	return &NullableMediaType{value: val, isSet: true}
}

func (v NullableMediaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


