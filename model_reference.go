/*
Nuki API

The Nuki Web Api

API version: 3.9.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Reference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Reference{}

// Reference struct for Reference
type Reference struct {
	BaseRef *Reference `json:"baseRef,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
	SchemeSpecificPart *string `json:"schemeSpecificPart,omitempty"`
	Relative *bool `json:"relative,omitempty"`
	Path *string `json:"path,omitempty"`
	Scheme *string `json:"scheme,omitempty"`
	Fragment *string `json:"fragment,omitempty"`
	UserInfo *string `json:"userInfo,omitempty"`
	Query *string `json:"query,omitempty"`
	Matrix *string `json:"matrix,omitempty"`
	MatrixAsForm []Parameter `json:"matrixAsForm,omitempty"`
	QueryAsForm []Parameter `json:"queryAsForm,omitempty"`
	ExtensionsAsArray []string `json:"extensionsAsArray,omitempty"`
	HierarchicalPart *string `json:"hierarchicalPart,omitempty"`
	HostDomain *string `json:"hostDomain,omitempty"`
	HostIdentifier *string `json:"hostIdentifier,omitempty"`
	HostPort *int32 `json:"hostPort,omitempty"`
	LastSegment *string `json:"lastSegment,omitempty"`
	ParentRef *Reference `json:"parentRef,omitempty"`
	RelativePart *string `json:"relativePart,omitempty"`
	RelativeRef *Reference `json:"relativeRef,omitempty"`
	RemainingPart *string `json:"remainingPart,omitempty"`
	SchemeProtocol *Protocol `json:"schemeProtocol,omitempty"`
	Segments []string `json:"segments,omitempty"`
	TargetRef *Reference `json:"targetRef,omitempty"`
	Hierarchical *bool `json:"hierarchical,omitempty"`
	Authority *string `json:"authority,omitempty"`
	Absolute *bool `json:"absolute,omitempty"`
	Opaque *bool `json:"opaque,omitempty"`
	Extensions *string `json:"extensions,omitempty"`
}

// NewReference instantiates a new Reference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReference() *Reference {
	this := Reference{}
	return &this
}

// NewReferenceWithDefaults instantiates a new Reference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReferenceWithDefaults() *Reference {
	this := Reference{}
	return &this
}

// GetBaseRef returns the BaseRef field value if set, zero value otherwise.
func (o *Reference) GetBaseRef() Reference {
	if o == nil || IsNil(o.BaseRef) {
		var ret Reference
		return ret
	}
	return *o.BaseRef
}

// GetBaseRefOk returns a tuple with the BaseRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetBaseRefOk() (*Reference, bool) {
	if o == nil || IsNil(o.BaseRef) {
		return nil, false
	}
	return o.BaseRef, true
}

// HasBaseRef returns a boolean if a field has been set.
func (o *Reference) HasBaseRef() bool {
	if o != nil && !IsNil(o.BaseRef) {
		return true
	}

	return false
}

// SetBaseRef gets a reference to the given Reference and assigns it to the BaseRef field.
func (o *Reference) SetBaseRef(v Reference) {
	o.BaseRef = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *Reference) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *Reference) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *Reference) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetSchemeSpecificPart returns the SchemeSpecificPart field value if set, zero value otherwise.
func (o *Reference) GetSchemeSpecificPart() string {
	if o == nil || IsNil(o.SchemeSpecificPart) {
		var ret string
		return ret
	}
	return *o.SchemeSpecificPart
}

// GetSchemeSpecificPartOk returns a tuple with the SchemeSpecificPart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetSchemeSpecificPartOk() (*string, bool) {
	if o == nil || IsNil(o.SchemeSpecificPart) {
		return nil, false
	}
	return o.SchemeSpecificPart, true
}

// HasSchemeSpecificPart returns a boolean if a field has been set.
func (o *Reference) HasSchemeSpecificPart() bool {
	if o != nil && !IsNil(o.SchemeSpecificPart) {
		return true
	}

	return false
}

// SetSchemeSpecificPart gets a reference to the given string and assigns it to the SchemeSpecificPart field.
func (o *Reference) SetSchemeSpecificPart(v string) {
	o.SchemeSpecificPart = &v
}

// GetRelative returns the Relative field value if set, zero value otherwise.
func (o *Reference) GetRelative() bool {
	if o == nil || IsNil(o.Relative) {
		var ret bool
		return ret
	}
	return *o.Relative
}

// GetRelativeOk returns a tuple with the Relative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetRelativeOk() (*bool, bool) {
	if o == nil || IsNil(o.Relative) {
		return nil, false
	}
	return o.Relative, true
}

// HasRelative returns a boolean if a field has been set.
func (o *Reference) HasRelative() bool {
	if o != nil && !IsNil(o.Relative) {
		return true
	}

	return false
}

// SetRelative gets a reference to the given bool and assigns it to the Relative field.
func (o *Reference) SetRelative(v bool) {
	o.Relative = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *Reference) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *Reference) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *Reference) SetPath(v string) {
	o.Path = &v
}

// GetScheme returns the Scheme field value if set, zero value otherwise.
func (o *Reference) GetScheme() string {
	if o == nil || IsNil(o.Scheme) {
		var ret string
		return ret
	}
	return *o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.Scheme) {
		return nil, false
	}
	return o.Scheme, true
}

// HasScheme returns a boolean if a field has been set.
func (o *Reference) HasScheme() bool {
	if o != nil && !IsNil(o.Scheme) {
		return true
	}

	return false
}

// SetScheme gets a reference to the given string and assigns it to the Scheme field.
func (o *Reference) SetScheme(v string) {
	o.Scheme = &v
}

// GetFragment returns the Fragment field value if set, zero value otherwise.
func (o *Reference) GetFragment() string {
	if o == nil || IsNil(o.Fragment) {
		var ret string
		return ret
	}
	return *o.Fragment
}

// GetFragmentOk returns a tuple with the Fragment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetFragmentOk() (*string, bool) {
	if o == nil || IsNil(o.Fragment) {
		return nil, false
	}
	return o.Fragment, true
}

// HasFragment returns a boolean if a field has been set.
func (o *Reference) HasFragment() bool {
	if o != nil && !IsNil(o.Fragment) {
		return true
	}

	return false
}

// SetFragment gets a reference to the given string and assigns it to the Fragment field.
func (o *Reference) SetFragment(v string) {
	o.Fragment = &v
}

// GetUserInfo returns the UserInfo field value if set, zero value otherwise.
func (o *Reference) GetUserInfo() string {
	if o == nil || IsNil(o.UserInfo) {
		var ret string
		return ret
	}
	return *o.UserInfo
}

// GetUserInfoOk returns a tuple with the UserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetUserInfoOk() (*string, bool) {
	if o == nil || IsNil(o.UserInfo) {
		return nil, false
	}
	return o.UserInfo, true
}

// HasUserInfo returns a boolean if a field has been set.
func (o *Reference) HasUserInfo() bool {
	if o != nil && !IsNil(o.UserInfo) {
		return true
	}

	return false
}

// SetUserInfo gets a reference to the given string and assigns it to the UserInfo field.
func (o *Reference) SetUserInfo(v string) {
	o.UserInfo = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *Reference) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *Reference) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *Reference) SetQuery(v string) {
	o.Query = &v
}

// GetMatrix returns the Matrix field value if set, zero value otherwise.
func (o *Reference) GetMatrix() string {
	if o == nil || IsNil(o.Matrix) {
		var ret string
		return ret
	}
	return *o.Matrix
}

// GetMatrixOk returns a tuple with the Matrix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetMatrixOk() (*string, bool) {
	if o == nil || IsNil(o.Matrix) {
		return nil, false
	}
	return o.Matrix, true
}

// HasMatrix returns a boolean if a field has been set.
func (o *Reference) HasMatrix() bool {
	if o != nil && !IsNil(o.Matrix) {
		return true
	}

	return false
}

// SetMatrix gets a reference to the given string and assigns it to the Matrix field.
func (o *Reference) SetMatrix(v string) {
	o.Matrix = &v
}

// GetMatrixAsForm returns the MatrixAsForm field value if set, zero value otherwise.
func (o *Reference) GetMatrixAsForm() []Parameter {
	if o == nil || IsNil(o.MatrixAsForm) {
		var ret []Parameter
		return ret
	}
	return o.MatrixAsForm
}

// GetMatrixAsFormOk returns a tuple with the MatrixAsForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetMatrixAsFormOk() ([]Parameter, bool) {
	if o == nil || IsNil(o.MatrixAsForm) {
		return nil, false
	}
	return o.MatrixAsForm, true
}

// HasMatrixAsForm returns a boolean if a field has been set.
func (o *Reference) HasMatrixAsForm() bool {
	if o != nil && !IsNil(o.MatrixAsForm) {
		return true
	}

	return false
}

// SetMatrixAsForm gets a reference to the given []Parameter and assigns it to the MatrixAsForm field.
func (o *Reference) SetMatrixAsForm(v []Parameter) {
	o.MatrixAsForm = v
}

// GetQueryAsForm returns the QueryAsForm field value if set, zero value otherwise.
func (o *Reference) GetQueryAsForm() []Parameter {
	if o == nil || IsNil(o.QueryAsForm) {
		var ret []Parameter
		return ret
	}
	return o.QueryAsForm
}

// GetQueryAsFormOk returns a tuple with the QueryAsForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetQueryAsFormOk() ([]Parameter, bool) {
	if o == nil || IsNil(o.QueryAsForm) {
		return nil, false
	}
	return o.QueryAsForm, true
}

// HasQueryAsForm returns a boolean if a field has been set.
func (o *Reference) HasQueryAsForm() bool {
	if o != nil && !IsNil(o.QueryAsForm) {
		return true
	}

	return false
}

// SetQueryAsForm gets a reference to the given []Parameter and assigns it to the QueryAsForm field.
func (o *Reference) SetQueryAsForm(v []Parameter) {
	o.QueryAsForm = v
}

// GetExtensionsAsArray returns the ExtensionsAsArray field value if set, zero value otherwise.
func (o *Reference) GetExtensionsAsArray() []string {
	if o == nil || IsNil(o.ExtensionsAsArray) {
		var ret []string
		return ret
	}
	return o.ExtensionsAsArray
}

// GetExtensionsAsArrayOk returns a tuple with the ExtensionsAsArray field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetExtensionsAsArrayOk() ([]string, bool) {
	if o == nil || IsNil(o.ExtensionsAsArray) {
		return nil, false
	}
	return o.ExtensionsAsArray, true
}

// HasExtensionsAsArray returns a boolean if a field has been set.
func (o *Reference) HasExtensionsAsArray() bool {
	if o != nil && !IsNil(o.ExtensionsAsArray) {
		return true
	}

	return false
}

// SetExtensionsAsArray gets a reference to the given []string and assigns it to the ExtensionsAsArray field.
func (o *Reference) SetExtensionsAsArray(v []string) {
	o.ExtensionsAsArray = v
}

// GetHierarchicalPart returns the HierarchicalPart field value if set, zero value otherwise.
func (o *Reference) GetHierarchicalPart() string {
	if o == nil || IsNil(o.HierarchicalPart) {
		var ret string
		return ret
	}
	return *o.HierarchicalPart
}

// GetHierarchicalPartOk returns a tuple with the HierarchicalPart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetHierarchicalPartOk() (*string, bool) {
	if o == nil || IsNil(o.HierarchicalPart) {
		return nil, false
	}
	return o.HierarchicalPart, true
}

// HasHierarchicalPart returns a boolean if a field has been set.
func (o *Reference) HasHierarchicalPart() bool {
	if o != nil && !IsNil(o.HierarchicalPart) {
		return true
	}

	return false
}

// SetHierarchicalPart gets a reference to the given string and assigns it to the HierarchicalPart field.
func (o *Reference) SetHierarchicalPart(v string) {
	o.HierarchicalPart = &v
}

// GetHostDomain returns the HostDomain field value if set, zero value otherwise.
func (o *Reference) GetHostDomain() string {
	if o == nil || IsNil(o.HostDomain) {
		var ret string
		return ret
	}
	return *o.HostDomain
}

// GetHostDomainOk returns a tuple with the HostDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetHostDomainOk() (*string, bool) {
	if o == nil || IsNil(o.HostDomain) {
		return nil, false
	}
	return o.HostDomain, true
}

// HasHostDomain returns a boolean if a field has been set.
func (o *Reference) HasHostDomain() bool {
	if o != nil && !IsNil(o.HostDomain) {
		return true
	}

	return false
}

// SetHostDomain gets a reference to the given string and assigns it to the HostDomain field.
func (o *Reference) SetHostDomain(v string) {
	o.HostDomain = &v
}

// GetHostIdentifier returns the HostIdentifier field value if set, zero value otherwise.
func (o *Reference) GetHostIdentifier() string {
	if o == nil || IsNil(o.HostIdentifier) {
		var ret string
		return ret
	}
	return *o.HostIdentifier
}

// GetHostIdentifierOk returns a tuple with the HostIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetHostIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.HostIdentifier) {
		return nil, false
	}
	return o.HostIdentifier, true
}

// HasHostIdentifier returns a boolean if a field has been set.
func (o *Reference) HasHostIdentifier() bool {
	if o != nil && !IsNil(o.HostIdentifier) {
		return true
	}

	return false
}

// SetHostIdentifier gets a reference to the given string and assigns it to the HostIdentifier field.
func (o *Reference) SetHostIdentifier(v string) {
	o.HostIdentifier = &v
}

// GetHostPort returns the HostPort field value if set, zero value otherwise.
func (o *Reference) GetHostPort() int32 {
	if o == nil || IsNil(o.HostPort) {
		var ret int32
		return ret
	}
	return *o.HostPort
}

// GetHostPortOk returns a tuple with the HostPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetHostPortOk() (*int32, bool) {
	if o == nil || IsNil(o.HostPort) {
		return nil, false
	}
	return o.HostPort, true
}

// HasHostPort returns a boolean if a field has been set.
func (o *Reference) HasHostPort() bool {
	if o != nil && !IsNil(o.HostPort) {
		return true
	}

	return false
}

// SetHostPort gets a reference to the given int32 and assigns it to the HostPort field.
func (o *Reference) SetHostPort(v int32) {
	o.HostPort = &v
}

// GetLastSegment returns the LastSegment field value if set, zero value otherwise.
func (o *Reference) GetLastSegment() string {
	if o == nil || IsNil(o.LastSegment) {
		var ret string
		return ret
	}
	return *o.LastSegment
}

// GetLastSegmentOk returns a tuple with the LastSegment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetLastSegmentOk() (*string, bool) {
	if o == nil || IsNil(o.LastSegment) {
		return nil, false
	}
	return o.LastSegment, true
}

// HasLastSegment returns a boolean if a field has been set.
func (o *Reference) HasLastSegment() bool {
	if o != nil && !IsNil(o.LastSegment) {
		return true
	}

	return false
}

// SetLastSegment gets a reference to the given string and assigns it to the LastSegment field.
func (o *Reference) SetLastSegment(v string) {
	o.LastSegment = &v
}

// GetParentRef returns the ParentRef field value if set, zero value otherwise.
func (o *Reference) GetParentRef() Reference {
	if o == nil || IsNil(o.ParentRef) {
		var ret Reference
		return ret
	}
	return *o.ParentRef
}

// GetParentRefOk returns a tuple with the ParentRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetParentRefOk() (*Reference, bool) {
	if o == nil || IsNil(o.ParentRef) {
		return nil, false
	}
	return o.ParentRef, true
}

// HasParentRef returns a boolean if a field has been set.
func (o *Reference) HasParentRef() bool {
	if o != nil && !IsNil(o.ParentRef) {
		return true
	}

	return false
}

// SetParentRef gets a reference to the given Reference and assigns it to the ParentRef field.
func (o *Reference) SetParentRef(v Reference) {
	o.ParentRef = &v
}

// GetRelativePart returns the RelativePart field value if set, zero value otherwise.
func (o *Reference) GetRelativePart() string {
	if o == nil || IsNil(o.RelativePart) {
		var ret string
		return ret
	}
	return *o.RelativePart
}

// GetRelativePartOk returns a tuple with the RelativePart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetRelativePartOk() (*string, bool) {
	if o == nil || IsNil(o.RelativePart) {
		return nil, false
	}
	return o.RelativePart, true
}

// HasRelativePart returns a boolean if a field has been set.
func (o *Reference) HasRelativePart() bool {
	if o != nil && !IsNil(o.RelativePart) {
		return true
	}

	return false
}

// SetRelativePart gets a reference to the given string and assigns it to the RelativePart field.
func (o *Reference) SetRelativePart(v string) {
	o.RelativePart = &v
}

// GetRelativeRef returns the RelativeRef field value if set, zero value otherwise.
func (o *Reference) GetRelativeRef() Reference {
	if o == nil || IsNil(o.RelativeRef) {
		var ret Reference
		return ret
	}
	return *o.RelativeRef
}

// GetRelativeRefOk returns a tuple with the RelativeRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetRelativeRefOk() (*Reference, bool) {
	if o == nil || IsNil(o.RelativeRef) {
		return nil, false
	}
	return o.RelativeRef, true
}

// HasRelativeRef returns a boolean if a field has been set.
func (o *Reference) HasRelativeRef() bool {
	if o != nil && !IsNil(o.RelativeRef) {
		return true
	}

	return false
}

// SetRelativeRef gets a reference to the given Reference and assigns it to the RelativeRef field.
func (o *Reference) SetRelativeRef(v Reference) {
	o.RelativeRef = &v
}

// GetRemainingPart returns the RemainingPart field value if set, zero value otherwise.
func (o *Reference) GetRemainingPart() string {
	if o == nil || IsNil(o.RemainingPart) {
		var ret string
		return ret
	}
	return *o.RemainingPart
}

// GetRemainingPartOk returns a tuple with the RemainingPart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetRemainingPartOk() (*string, bool) {
	if o == nil || IsNil(o.RemainingPart) {
		return nil, false
	}
	return o.RemainingPart, true
}

// HasRemainingPart returns a boolean if a field has been set.
func (o *Reference) HasRemainingPart() bool {
	if o != nil && !IsNil(o.RemainingPart) {
		return true
	}

	return false
}

// SetRemainingPart gets a reference to the given string and assigns it to the RemainingPart field.
func (o *Reference) SetRemainingPart(v string) {
	o.RemainingPart = &v
}

// GetSchemeProtocol returns the SchemeProtocol field value if set, zero value otherwise.
func (o *Reference) GetSchemeProtocol() Protocol {
	if o == nil || IsNil(o.SchemeProtocol) {
		var ret Protocol
		return ret
	}
	return *o.SchemeProtocol
}

// GetSchemeProtocolOk returns a tuple with the SchemeProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetSchemeProtocolOk() (*Protocol, bool) {
	if o == nil || IsNil(o.SchemeProtocol) {
		return nil, false
	}
	return o.SchemeProtocol, true
}

// HasSchemeProtocol returns a boolean if a field has been set.
func (o *Reference) HasSchemeProtocol() bool {
	if o != nil && !IsNil(o.SchemeProtocol) {
		return true
	}

	return false
}

// SetSchemeProtocol gets a reference to the given Protocol and assigns it to the SchemeProtocol field.
func (o *Reference) SetSchemeProtocol(v Protocol) {
	o.SchemeProtocol = &v
}

// GetSegments returns the Segments field value if set, zero value otherwise.
func (o *Reference) GetSegments() []string {
	if o == nil || IsNil(o.Segments) {
		var ret []string
		return ret
	}
	return o.Segments
}

// GetSegmentsOk returns a tuple with the Segments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetSegmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Segments) {
		return nil, false
	}
	return o.Segments, true
}

// HasSegments returns a boolean if a field has been set.
func (o *Reference) HasSegments() bool {
	if o != nil && !IsNil(o.Segments) {
		return true
	}

	return false
}

// SetSegments gets a reference to the given []string and assigns it to the Segments field.
func (o *Reference) SetSegments(v []string) {
	o.Segments = v
}

// GetTargetRef returns the TargetRef field value if set, zero value otherwise.
func (o *Reference) GetTargetRef() Reference {
	if o == nil || IsNil(o.TargetRef) {
		var ret Reference
		return ret
	}
	return *o.TargetRef
}

// GetTargetRefOk returns a tuple with the TargetRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetTargetRefOk() (*Reference, bool) {
	if o == nil || IsNil(o.TargetRef) {
		return nil, false
	}
	return o.TargetRef, true
}

// HasTargetRef returns a boolean if a field has been set.
func (o *Reference) HasTargetRef() bool {
	if o != nil && !IsNil(o.TargetRef) {
		return true
	}

	return false
}

// SetTargetRef gets a reference to the given Reference and assigns it to the TargetRef field.
func (o *Reference) SetTargetRef(v Reference) {
	o.TargetRef = &v
}

// GetHierarchical returns the Hierarchical field value if set, zero value otherwise.
func (o *Reference) GetHierarchical() bool {
	if o == nil || IsNil(o.Hierarchical) {
		var ret bool
		return ret
	}
	return *o.Hierarchical
}

// GetHierarchicalOk returns a tuple with the Hierarchical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetHierarchicalOk() (*bool, bool) {
	if o == nil || IsNil(o.Hierarchical) {
		return nil, false
	}
	return o.Hierarchical, true
}

// HasHierarchical returns a boolean if a field has been set.
func (o *Reference) HasHierarchical() bool {
	if o != nil && !IsNil(o.Hierarchical) {
		return true
	}

	return false
}

// SetHierarchical gets a reference to the given bool and assigns it to the Hierarchical field.
func (o *Reference) SetHierarchical(v bool) {
	o.Hierarchical = &v
}

// GetAuthority returns the Authority field value if set, zero value otherwise.
func (o *Reference) GetAuthority() string {
	if o == nil || IsNil(o.Authority) {
		var ret string
		return ret
	}
	return *o.Authority
}

// GetAuthorityOk returns a tuple with the Authority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetAuthorityOk() (*string, bool) {
	if o == nil || IsNil(o.Authority) {
		return nil, false
	}
	return o.Authority, true
}

// HasAuthority returns a boolean if a field has been set.
func (o *Reference) HasAuthority() bool {
	if o != nil && !IsNil(o.Authority) {
		return true
	}

	return false
}

// SetAuthority gets a reference to the given string and assigns it to the Authority field.
func (o *Reference) SetAuthority(v string) {
	o.Authority = &v
}

// GetAbsolute returns the Absolute field value if set, zero value otherwise.
func (o *Reference) GetAbsolute() bool {
	if o == nil || IsNil(o.Absolute) {
		var ret bool
		return ret
	}
	return *o.Absolute
}

// GetAbsoluteOk returns a tuple with the Absolute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetAbsoluteOk() (*bool, bool) {
	if o == nil || IsNil(o.Absolute) {
		return nil, false
	}
	return o.Absolute, true
}

// HasAbsolute returns a boolean if a field has been set.
func (o *Reference) HasAbsolute() bool {
	if o != nil && !IsNil(o.Absolute) {
		return true
	}

	return false
}

// SetAbsolute gets a reference to the given bool and assigns it to the Absolute field.
func (o *Reference) SetAbsolute(v bool) {
	o.Absolute = &v
}

// GetOpaque returns the Opaque field value if set, zero value otherwise.
func (o *Reference) GetOpaque() bool {
	if o == nil || IsNil(o.Opaque) {
		var ret bool
		return ret
	}
	return *o.Opaque
}

// GetOpaqueOk returns a tuple with the Opaque field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetOpaqueOk() (*bool, bool) {
	if o == nil || IsNil(o.Opaque) {
		return nil, false
	}
	return o.Opaque, true
}

// HasOpaque returns a boolean if a field has been set.
func (o *Reference) HasOpaque() bool {
	if o != nil && !IsNil(o.Opaque) {
		return true
	}

	return false
}

// SetOpaque gets a reference to the given bool and assigns it to the Opaque field.
func (o *Reference) SetOpaque(v bool) {
	o.Opaque = &v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *Reference) GetExtensions() string {
	if o == nil || IsNil(o.Extensions) {
		var ret string
		return ret
	}
	return *o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetExtensionsOk() (*string, bool) {
	if o == nil || IsNil(o.Extensions) {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *Reference) HasExtensions() bool {
	if o != nil && !IsNil(o.Extensions) {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given string and assigns it to the Extensions field.
func (o *Reference) SetExtensions(v string) {
	o.Extensions = &v
}

func (o Reference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Reference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BaseRef) {
		toSerialize["baseRef"] = o.BaseRef
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.SchemeSpecificPart) {
		toSerialize["schemeSpecificPart"] = o.SchemeSpecificPart
	}
	if !IsNil(o.Relative) {
		toSerialize["relative"] = o.Relative
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Scheme) {
		toSerialize["scheme"] = o.Scheme
	}
	if !IsNil(o.Fragment) {
		toSerialize["fragment"] = o.Fragment
	}
	if !IsNil(o.UserInfo) {
		toSerialize["userInfo"] = o.UserInfo
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.Matrix) {
		toSerialize["matrix"] = o.Matrix
	}
	if !IsNil(o.MatrixAsForm) {
		toSerialize["matrixAsForm"] = o.MatrixAsForm
	}
	if !IsNil(o.QueryAsForm) {
		toSerialize["queryAsForm"] = o.QueryAsForm
	}
	if !IsNil(o.ExtensionsAsArray) {
		toSerialize["extensionsAsArray"] = o.ExtensionsAsArray
	}
	if !IsNil(o.HierarchicalPart) {
		toSerialize["hierarchicalPart"] = o.HierarchicalPart
	}
	if !IsNil(o.HostDomain) {
		toSerialize["hostDomain"] = o.HostDomain
	}
	if !IsNil(o.HostIdentifier) {
		toSerialize["hostIdentifier"] = o.HostIdentifier
	}
	if !IsNil(o.HostPort) {
		toSerialize["hostPort"] = o.HostPort
	}
	if !IsNil(o.LastSegment) {
		toSerialize["lastSegment"] = o.LastSegment
	}
	if !IsNil(o.ParentRef) {
		toSerialize["parentRef"] = o.ParentRef
	}
	if !IsNil(o.RelativePart) {
		toSerialize["relativePart"] = o.RelativePart
	}
	if !IsNil(o.RelativeRef) {
		toSerialize["relativeRef"] = o.RelativeRef
	}
	if !IsNil(o.RemainingPart) {
		toSerialize["remainingPart"] = o.RemainingPart
	}
	if !IsNil(o.SchemeProtocol) {
		toSerialize["schemeProtocol"] = o.SchemeProtocol
	}
	if !IsNil(o.Segments) {
		toSerialize["segments"] = o.Segments
	}
	if !IsNil(o.TargetRef) {
		toSerialize["targetRef"] = o.TargetRef
	}
	if !IsNil(o.Hierarchical) {
		toSerialize["hierarchical"] = o.Hierarchical
	}
	if !IsNil(o.Authority) {
		toSerialize["authority"] = o.Authority
	}
	if !IsNil(o.Absolute) {
		toSerialize["absolute"] = o.Absolute
	}
	if !IsNil(o.Opaque) {
		toSerialize["opaque"] = o.Opaque
	}
	if !IsNil(o.Extensions) {
		toSerialize["extensions"] = o.Extensions
	}
	return toSerialize, nil
}

type NullableReference struct {
	value *Reference
	isSet bool
}

func (v NullableReference) Get() *Reference {
	return v.value
}

func (v *NullableReference) Set(val *Reference) {
	v.value = val
	v.isSet = true
}

func (v NullableReference) IsSet() bool {
	return v.isSet
}

func (v *NullableReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReference(val *Reference) *NullableReference {
	return &NullableReference{value: val, isSet: true}
}

func (v NullableReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


