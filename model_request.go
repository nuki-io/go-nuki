/*
Nuki API

The Nuki Web Api

API version: 0.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Request{}

// Request struct for Request
type Request struct {
	Attributes map[string]map[string]interface{} `json:"attributes,omitempty"`
	CacheDirectives []CacheDirective `json:"cacheDirectives,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Entity *Representation `json:"entity,omitempty"`
	OnError map[string]interface{} `json:"onError,omitempty"`
	OnSent map[string]interface{} `json:"onSent,omitempty"`
	RecipientsInfo []RecipientInfo `json:"recipientsInfo,omitempty"`
	Warnings []Warning `json:"warnings,omitempty"`
	AccessControlRequestHeaders []string `json:"accessControlRequestHeaders,omitempty"`
	AccessControlRequestMethod *Method `json:"accessControlRequestMethod,omitempty"`
	ChallengeResponse *ChallengeResponse `json:"challengeResponse,omitempty"`
	ClientInfo *ClientInfo `json:"clientInfo,omitempty"`
	Conditions *Conditions `json:"conditions,omitempty"`
	Cookies []Cookie `json:"cookies,omitempty"`
	HostRef *Reference `json:"hostRef,omitempty"`
	Loggable *bool `json:"loggable,omitempty"`
	MaxForwards *int32 `json:"maxForwards,omitempty"`
	Method *Method `json:"method,omitempty"`
	OnResponse map[string]interface{} `json:"onResponse,omitempty"`
	OriginalRef *Reference `json:"originalRef,omitempty"`
	Protocol *Protocol `json:"protocol,omitempty"`
	ProxyChallengeResponse *ChallengeResponse `json:"proxyChallengeResponse,omitempty"`
	Ranges []Range `json:"ranges,omitempty"`
	ReferrerRef *Reference `json:"referrerRef,omitempty"`
	ResourceRef *Reference `json:"resourceRef,omitempty"`
	RootRef *Reference `json:"rootRef,omitempty"`
	Confidential *bool `json:"confidential,omitempty"`
	Asynchronous *bool `json:"asynchronous,omitempty"`
	EntityAvailable *bool `json:"entityAvailable,omitempty"`
	ExpectingResponse *bool `json:"expectingResponse,omitempty"`
	Synchronous *bool `json:"synchronous,omitempty"`
	Headers []Header `json:"headers,omitempty"`
	EntityAsText *string `json:"entityAsText,omitempty"`
}

// NewRequest instantiates a new Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequest() *Request {
	this := Request{}
	return &this
}

// NewRequestWithDefaults instantiates a new Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestWithDefaults() *Request {
	this := Request{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Request) GetAttributes() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetAttributesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Attributes) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Request) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]map[string]interface{} and assigns it to the Attributes field.
func (o *Request) SetAttributes(v map[string]map[string]interface{}) {
	o.Attributes = v
}

// GetCacheDirectives returns the CacheDirectives field value if set, zero value otherwise.
func (o *Request) GetCacheDirectives() []CacheDirective {
	if o == nil || IsNil(o.CacheDirectives) {
		var ret []CacheDirective
		return ret
	}
	return o.CacheDirectives
}

// GetCacheDirectivesOk returns a tuple with the CacheDirectives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetCacheDirectivesOk() ([]CacheDirective, bool) {
	if o == nil || IsNil(o.CacheDirectives) {
		return nil, false
	}
	return o.CacheDirectives, true
}

// HasCacheDirectives returns a boolean if a field has been set.
func (o *Request) HasCacheDirectives() bool {
	if o != nil && !IsNil(o.CacheDirectives) {
		return true
	}

	return false
}

// SetCacheDirectives gets a reference to the given []CacheDirective and assigns it to the CacheDirectives field.
func (o *Request) SetCacheDirectives(v []CacheDirective) {
	o.CacheDirectives = v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *Request) GetDate() time.Time {
	if o == nil || IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *Request) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *Request) SetDate(v time.Time) {
	o.Date = &v
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *Request) GetEntity() Representation {
	if o == nil || IsNil(o.Entity) {
		var ret Representation
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetEntityOk() (*Representation, bool) {
	if o == nil || IsNil(o.Entity) {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *Request) HasEntity() bool {
	if o != nil && !IsNil(o.Entity) {
		return true
	}

	return false
}

// SetEntity gets a reference to the given Representation and assigns it to the Entity field.
func (o *Request) SetEntity(v Representation) {
	o.Entity = &v
}

// GetOnError returns the OnError field value if set, zero value otherwise.
func (o *Request) GetOnError() map[string]interface{} {
	if o == nil || IsNil(o.OnError) {
		var ret map[string]interface{}
		return ret
	}
	return o.OnError
}

// GetOnErrorOk returns a tuple with the OnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetOnErrorOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.OnError) {
		return map[string]interface{}{}, false
	}
	return o.OnError, true
}

// HasOnError returns a boolean if a field has been set.
func (o *Request) HasOnError() bool {
	if o != nil && !IsNil(o.OnError) {
		return true
	}

	return false
}

// SetOnError gets a reference to the given map[string]interface{} and assigns it to the OnError field.
func (o *Request) SetOnError(v map[string]interface{}) {
	o.OnError = v
}

// GetOnSent returns the OnSent field value if set, zero value otherwise.
func (o *Request) GetOnSent() map[string]interface{} {
	if o == nil || IsNil(o.OnSent) {
		var ret map[string]interface{}
		return ret
	}
	return o.OnSent
}

// GetOnSentOk returns a tuple with the OnSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetOnSentOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.OnSent) {
		return map[string]interface{}{}, false
	}
	return o.OnSent, true
}

// HasOnSent returns a boolean if a field has been set.
func (o *Request) HasOnSent() bool {
	if o != nil && !IsNil(o.OnSent) {
		return true
	}

	return false
}

// SetOnSent gets a reference to the given map[string]interface{} and assigns it to the OnSent field.
func (o *Request) SetOnSent(v map[string]interface{}) {
	o.OnSent = v
}

// GetRecipientsInfo returns the RecipientsInfo field value if set, zero value otherwise.
func (o *Request) GetRecipientsInfo() []RecipientInfo {
	if o == nil || IsNil(o.RecipientsInfo) {
		var ret []RecipientInfo
		return ret
	}
	return o.RecipientsInfo
}

// GetRecipientsInfoOk returns a tuple with the RecipientsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetRecipientsInfoOk() ([]RecipientInfo, bool) {
	if o == nil || IsNil(o.RecipientsInfo) {
		return nil, false
	}
	return o.RecipientsInfo, true
}

// HasRecipientsInfo returns a boolean if a field has been set.
func (o *Request) HasRecipientsInfo() bool {
	if o != nil && !IsNil(o.RecipientsInfo) {
		return true
	}

	return false
}

// SetRecipientsInfo gets a reference to the given []RecipientInfo and assigns it to the RecipientsInfo field.
func (o *Request) SetRecipientsInfo(v []RecipientInfo) {
	o.RecipientsInfo = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *Request) GetWarnings() []Warning {
	if o == nil || IsNil(o.Warnings) {
		var ret []Warning
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetWarningsOk() ([]Warning, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *Request) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []Warning and assigns it to the Warnings field.
func (o *Request) SetWarnings(v []Warning) {
	o.Warnings = v
}

// GetAccessControlRequestHeaders returns the AccessControlRequestHeaders field value if set, zero value otherwise.
func (o *Request) GetAccessControlRequestHeaders() []string {
	if o == nil || IsNil(o.AccessControlRequestHeaders) {
		var ret []string
		return ret
	}
	return o.AccessControlRequestHeaders
}

// GetAccessControlRequestHeadersOk returns a tuple with the AccessControlRequestHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetAccessControlRequestHeadersOk() ([]string, bool) {
	if o == nil || IsNil(o.AccessControlRequestHeaders) {
		return nil, false
	}
	return o.AccessControlRequestHeaders, true
}

// HasAccessControlRequestHeaders returns a boolean if a field has been set.
func (o *Request) HasAccessControlRequestHeaders() bool {
	if o != nil && !IsNil(o.AccessControlRequestHeaders) {
		return true
	}

	return false
}

// SetAccessControlRequestHeaders gets a reference to the given []string and assigns it to the AccessControlRequestHeaders field.
func (o *Request) SetAccessControlRequestHeaders(v []string) {
	o.AccessControlRequestHeaders = v
}

// GetAccessControlRequestMethod returns the AccessControlRequestMethod field value if set, zero value otherwise.
func (o *Request) GetAccessControlRequestMethod() Method {
	if o == nil || IsNil(o.AccessControlRequestMethod) {
		var ret Method
		return ret
	}
	return *o.AccessControlRequestMethod
}

// GetAccessControlRequestMethodOk returns a tuple with the AccessControlRequestMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetAccessControlRequestMethodOk() (*Method, bool) {
	if o == nil || IsNil(o.AccessControlRequestMethod) {
		return nil, false
	}
	return o.AccessControlRequestMethod, true
}

// HasAccessControlRequestMethod returns a boolean if a field has been set.
func (o *Request) HasAccessControlRequestMethod() bool {
	if o != nil && !IsNil(o.AccessControlRequestMethod) {
		return true
	}

	return false
}

// SetAccessControlRequestMethod gets a reference to the given Method and assigns it to the AccessControlRequestMethod field.
func (o *Request) SetAccessControlRequestMethod(v Method) {
	o.AccessControlRequestMethod = &v
}

// GetChallengeResponse returns the ChallengeResponse field value if set, zero value otherwise.
func (o *Request) GetChallengeResponse() ChallengeResponse {
	if o == nil || IsNil(o.ChallengeResponse) {
		var ret ChallengeResponse
		return ret
	}
	return *o.ChallengeResponse
}

// GetChallengeResponseOk returns a tuple with the ChallengeResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetChallengeResponseOk() (*ChallengeResponse, bool) {
	if o == nil || IsNil(o.ChallengeResponse) {
		return nil, false
	}
	return o.ChallengeResponse, true
}

// HasChallengeResponse returns a boolean if a field has been set.
func (o *Request) HasChallengeResponse() bool {
	if o != nil && !IsNil(o.ChallengeResponse) {
		return true
	}

	return false
}

// SetChallengeResponse gets a reference to the given ChallengeResponse and assigns it to the ChallengeResponse field.
func (o *Request) SetChallengeResponse(v ChallengeResponse) {
	o.ChallengeResponse = &v
}

// GetClientInfo returns the ClientInfo field value if set, zero value otherwise.
func (o *Request) GetClientInfo() ClientInfo {
	if o == nil || IsNil(o.ClientInfo) {
		var ret ClientInfo
		return ret
	}
	return *o.ClientInfo
}

// GetClientInfoOk returns a tuple with the ClientInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetClientInfoOk() (*ClientInfo, bool) {
	if o == nil || IsNil(o.ClientInfo) {
		return nil, false
	}
	return o.ClientInfo, true
}

// HasClientInfo returns a boolean if a field has been set.
func (o *Request) HasClientInfo() bool {
	if o != nil && !IsNil(o.ClientInfo) {
		return true
	}

	return false
}

// SetClientInfo gets a reference to the given ClientInfo and assigns it to the ClientInfo field.
func (o *Request) SetClientInfo(v ClientInfo) {
	o.ClientInfo = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *Request) GetConditions() Conditions {
	if o == nil || IsNil(o.Conditions) {
		var ret Conditions
		return ret
	}
	return *o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetConditionsOk() (*Conditions, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *Request) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given Conditions and assigns it to the Conditions field.
func (o *Request) SetConditions(v Conditions) {
	o.Conditions = &v
}

// GetCookies returns the Cookies field value if set, zero value otherwise.
func (o *Request) GetCookies() []Cookie {
	if o == nil || IsNil(o.Cookies) {
		var ret []Cookie
		return ret
	}
	return o.Cookies
}

// GetCookiesOk returns a tuple with the Cookies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetCookiesOk() ([]Cookie, bool) {
	if o == nil || IsNil(o.Cookies) {
		return nil, false
	}
	return o.Cookies, true
}

// HasCookies returns a boolean if a field has been set.
func (o *Request) HasCookies() bool {
	if o != nil && !IsNil(o.Cookies) {
		return true
	}

	return false
}

// SetCookies gets a reference to the given []Cookie and assigns it to the Cookies field.
func (o *Request) SetCookies(v []Cookie) {
	o.Cookies = v
}

// GetHostRef returns the HostRef field value if set, zero value otherwise.
func (o *Request) GetHostRef() Reference {
	if o == nil || IsNil(o.HostRef) {
		var ret Reference
		return ret
	}
	return *o.HostRef
}

// GetHostRefOk returns a tuple with the HostRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetHostRefOk() (*Reference, bool) {
	if o == nil || IsNil(o.HostRef) {
		return nil, false
	}
	return o.HostRef, true
}

// HasHostRef returns a boolean if a field has been set.
func (o *Request) HasHostRef() bool {
	if o != nil && !IsNil(o.HostRef) {
		return true
	}

	return false
}

// SetHostRef gets a reference to the given Reference and assigns it to the HostRef field.
func (o *Request) SetHostRef(v Reference) {
	o.HostRef = &v
}

// GetLoggable returns the Loggable field value if set, zero value otherwise.
func (o *Request) GetLoggable() bool {
	if o == nil || IsNil(o.Loggable) {
		var ret bool
		return ret
	}
	return *o.Loggable
}

// GetLoggableOk returns a tuple with the Loggable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetLoggableOk() (*bool, bool) {
	if o == nil || IsNil(o.Loggable) {
		return nil, false
	}
	return o.Loggable, true
}

// HasLoggable returns a boolean if a field has been set.
func (o *Request) HasLoggable() bool {
	if o != nil && !IsNil(o.Loggable) {
		return true
	}

	return false
}

// SetLoggable gets a reference to the given bool and assigns it to the Loggable field.
func (o *Request) SetLoggable(v bool) {
	o.Loggable = &v
}

// GetMaxForwards returns the MaxForwards field value if set, zero value otherwise.
func (o *Request) GetMaxForwards() int32 {
	if o == nil || IsNil(o.MaxForwards) {
		var ret int32
		return ret
	}
	return *o.MaxForwards
}

// GetMaxForwardsOk returns a tuple with the MaxForwards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetMaxForwardsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxForwards) {
		return nil, false
	}
	return o.MaxForwards, true
}

// HasMaxForwards returns a boolean if a field has been set.
func (o *Request) HasMaxForwards() bool {
	if o != nil && !IsNil(o.MaxForwards) {
		return true
	}

	return false
}

// SetMaxForwards gets a reference to the given int32 and assigns it to the MaxForwards field.
func (o *Request) SetMaxForwards(v int32) {
	o.MaxForwards = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *Request) GetMethod() Method {
	if o == nil || IsNil(o.Method) {
		var ret Method
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetMethodOk() (*Method, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *Request) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given Method and assigns it to the Method field.
func (o *Request) SetMethod(v Method) {
	o.Method = &v
}

// GetOnResponse returns the OnResponse field value if set, zero value otherwise.
func (o *Request) GetOnResponse() map[string]interface{} {
	if o == nil || IsNil(o.OnResponse) {
		var ret map[string]interface{}
		return ret
	}
	return o.OnResponse
}

// GetOnResponseOk returns a tuple with the OnResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetOnResponseOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.OnResponse) {
		return map[string]interface{}{}, false
	}
	return o.OnResponse, true
}

// HasOnResponse returns a boolean if a field has been set.
func (o *Request) HasOnResponse() bool {
	if o != nil && !IsNil(o.OnResponse) {
		return true
	}

	return false
}

// SetOnResponse gets a reference to the given map[string]interface{} and assigns it to the OnResponse field.
func (o *Request) SetOnResponse(v map[string]interface{}) {
	o.OnResponse = v
}

// GetOriginalRef returns the OriginalRef field value if set, zero value otherwise.
func (o *Request) GetOriginalRef() Reference {
	if o == nil || IsNil(o.OriginalRef) {
		var ret Reference
		return ret
	}
	return *o.OriginalRef
}

// GetOriginalRefOk returns a tuple with the OriginalRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetOriginalRefOk() (*Reference, bool) {
	if o == nil || IsNil(o.OriginalRef) {
		return nil, false
	}
	return o.OriginalRef, true
}

// HasOriginalRef returns a boolean if a field has been set.
func (o *Request) HasOriginalRef() bool {
	if o != nil && !IsNil(o.OriginalRef) {
		return true
	}

	return false
}

// SetOriginalRef gets a reference to the given Reference and assigns it to the OriginalRef field.
func (o *Request) SetOriginalRef(v Reference) {
	o.OriginalRef = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *Request) GetProtocol() Protocol {
	if o == nil || IsNil(o.Protocol) {
		var ret Protocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetProtocolOk() (*Protocol, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *Request) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given Protocol and assigns it to the Protocol field.
func (o *Request) SetProtocol(v Protocol) {
	o.Protocol = &v
}

// GetProxyChallengeResponse returns the ProxyChallengeResponse field value if set, zero value otherwise.
func (o *Request) GetProxyChallengeResponse() ChallengeResponse {
	if o == nil || IsNil(o.ProxyChallengeResponse) {
		var ret ChallengeResponse
		return ret
	}
	return *o.ProxyChallengeResponse
}

// GetProxyChallengeResponseOk returns a tuple with the ProxyChallengeResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetProxyChallengeResponseOk() (*ChallengeResponse, bool) {
	if o == nil || IsNil(o.ProxyChallengeResponse) {
		return nil, false
	}
	return o.ProxyChallengeResponse, true
}

// HasProxyChallengeResponse returns a boolean if a field has been set.
func (o *Request) HasProxyChallengeResponse() bool {
	if o != nil && !IsNil(o.ProxyChallengeResponse) {
		return true
	}

	return false
}

// SetProxyChallengeResponse gets a reference to the given ChallengeResponse and assigns it to the ProxyChallengeResponse field.
func (o *Request) SetProxyChallengeResponse(v ChallengeResponse) {
	o.ProxyChallengeResponse = &v
}

// GetRanges returns the Ranges field value if set, zero value otherwise.
func (o *Request) GetRanges() []Range {
	if o == nil || IsNil(o.Ranges) {
		var ret []Range
		return ret
	}
	return o.Ranges
}

// GetRangesOk returns a tuple with the Ranges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetRangesOk() ([]Range, bool) {
	if o == nil || IsNil(o.Ranges) {
		return nil, false
	}
	return o.Ranges, true
}

// HasRanges returns a boolean if a field has been set.
func (o *Request) HasRanges() bool {
	if o != nil && !IsNil(o.Ranges) {
		return true
	}

	return false
}

// SetRanges gets a reference to the given []Range and assigns it to the Ranges field.
func (o *Request) SetRanges(v []Range) {
	o.Ranges = v
}

// GetReferrerRef returns the ReferrerRef field value if set, zero value otherwise.
func (o *Request) GetReferrerRef() Reference {
	if o == nil || IsNil(o.ReferrerRef) {
		var ret Reference
		return ret
	}
	return *o.ReferrerRef
}

// GetReferrerRefOk returns a tuple with the ReferrerRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetReferrerRefOk() (*Reference, bool) {
	if o == nil || IsNil(o.ReferrerRef) {
		return nil, false
	}
	return o.ReferrerRef, true
}

// HasReferrerRef returns a boolean if a field has been set.
func (o *Request) HasReferrerRef() bool {
	if o != nil && !IsNil(o.ReferrerRef) {
		return true
	}

	return false
}

// SetReferrerRef gets a reference to the given Reference and assigns it to the ReferrerRef field.
func (o *Request) SetReferrerRef(v Reference) {
	o.ReferrerRef = &v
}

// GetResourceRef returns the ResourceRef field value if set, zero value otherwise.
func (o *Request) GetResourceRef() Reference {
	if o == nil || IsNil(o.ResourceRef) {
		var ret Reference
		return ret
	}
	return *o.ResourceRef
}

// GetResourceRefOk returns a tuple with the ResourceRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetResourceRefOk() (*Reference, bool) {
	if o == nil || IsNil(o.ResourceRef) {
		return nil, false
	}
	return o.ResourceRef, true
}

// HasResourceRef returns a boolean if a field has been set.
func (o *Request) HasResourceRef() bool {
	if o != nil && !IsNil(o.ResourceRef) {
		return true
	}

	return false
}

// SetResourceRef gets a reference to the given Reference and assigns it to the ResourceRef field.
func (o *Request) SetResourceRef(v Reference) {
	o.ResourceRef = &v
}

// GetRootRef returns the RootRef field value if set, zero value otherwise.
func (o *Request) GetRootRef() Reference {
	if o == nil || IsNil(o.RootRef) {
		var ret Reference
		return ret
	}
	return *o.RootRef
}

// GetRootRefOk returns a tuple with the RootRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetRootRefOk() (*Reference, bool) {
	if o == nil || IsNil(o.RootRef) {
		return nil, false
	}
	return o.RootRef, true
}

// HasRootRef returns a boolean if a field has been set.
func (o *Request) HasRootRef() bool {
	if o != nil && !IsNil(o.RootRef) {
		return true
	}

	return false
}

// SetRootRef gets a reference to the given Reference and assigns it to the RootRef field.
func (o *Request) SetRootRef(v Reference) {
	o.RootRef = &v
}

// GetConfidential returns the Confidential field value if set, zero value otherwise.
func (o *Request) GetConfidential() bool {
	if o == nil || IsNil(o.Confidential) {
		var ret bool
		return ret
	}
	return *o.Confidential
}

// GetConfidentialOk returns a tuple with the Confidential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetConfidentialOk() (*bool, bool) {
	if o == nil || IsNil(o.Confidential) {
		return nil, false
	}
	return o.Confidential, true
}

// HasConfidential returns a boolean if a field has been set.
func (o *Request) HasConfidential() bool {
	if o != nil && !IsNil(o.Confidential) {
		return true
	}

	return false
}

// SetConfidential gets a reference to the given bool and assigns it to the Confidential field.
func (o *Request) SetConfidential(v bool) {
	o.Confidential = &v
}

// GetAsynchronous returns the Asynchronous field value if set, zero value otherwise.
func (o *Request) GetAsynchronous() bool {
	if o == nil || IsNil(o.Asynchronous) {
		var ret bool
		return ret
	}
	return *o.Asynchronous
}

// GetAsynchronousOk returns a tuple with the Asynchronous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetAsynchronousOk() (*bool, bool) {
	if o == nil || IsNil(o.Asynchronous) {
		return nil, false
	}
	return o.Asynchronous, true
}

// HasAsynchronous returns a boolean if a field has been set.
func (o *Request) HasAsynchronous() bool {
	if o != nil && !IsNil(o.Asynchronous) {
		return true
	}

	return false
}

// SetAsynchronous gets a reference to the given bool and assigns it to the Asynchronous field.
func (o *Request) SetAsynchronous(v bool) {
	o.Asynchronous = &v
}

// GetEntityAvailable returns the EntityAvailable field value if set, zero value otherwise.
func (o *Request) GetEntityAvailable() bool {
	if o == nil || IsNil(o.EntityAvailable) {
		var ret bool
		return ret
	}
	return *o.EntityAvailable
}

// GetEntityAvailableOk returns a tuple with the EntityAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetEntityAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.EntityAvailable) {
		return nil, false
	}
	return o.EntityAvailable, true
}

// HasEntityAvailable returns a boolean if a field has been set.
func (o *Request) HasEntityAvailable() bool {
	if o != nil && !IsNil(o.EntityAvailable) {
		return true
	}

	return false
}

// SetEntityAvailable gets a reference to the given bool and assigns it to the EntityAvailable field.
func (o *Request) SetEntityAvailable(v bool) {
	o.EntityAvailable = &v
}

// GetExpectingResponse returns the ExpectingResponse field value if set, zero value otherwise.
func (o *Request) GetExpectingResponse() bool {
	if o == nil || IsNil(o.ExpectingResponse) {
		var ret bool
		return ret
	}
	return *o.ExpectingResponse
}

// GetExpectingResponseOk returns a tuple with the ExpectingResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetExpectingResponseOk() (*bool, bool) {
	if o == nil || IsNil(o.ExpectingResponse) {
		return nil, false
	}
	return o.ExpectingResponse, true
}

// HasExpectingResponse returns a boolean if a field has been set.
func (o *Request) HasExpectingResponse() bool {
	if o != nil && !IsNil(o.ExpectingResponse) {
		return true
	}

	return false
}

// SetExpectingResponse gets a reference to the given bool and assigns it to the ExpectingResponse field.
func (o *Request) SetExpectingResponse(v bool) {
	o.ExpectingResponse = &v
}

// GetSynchronous returns the Synchronous field value if set, zero value otherwise.
func (o *Request) GetSynchronous() bool {
	if o == nil || IsNil(o.Synchronous) {
		var ret bool
		return ret
	}
	return *o.Synchronous
}

// GetSynchronousOk returns a tuple with the Synchronous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetSynchronousOk() (*bool, bool) {
	if o == nil || IsNil(o.Synchronous) {
		return nil, false
	}
	return o.Synchronous, true
}

// HasSynchronous returns a boolean if a field has been set.
func (o *Request) HasSynchronous() bool {
	if o != nil && !IsNil(o.Synchronous) {
		return true
	}

	return false
}

// SetSynchronous gets a reference to the given bool and assigns it to the Synchronous field.
func (o *Request) SetSynchronous(v bool) {
	o.Synchronous = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *Request) GetHeaders() []Header {
	if o == nil || IsNil(o.Headers) {
		var ret []Header
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetHeadersOk() ([]Header, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *Request) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given []Header and assigns it to the Headers field.
func (o *Request) SetHeaders(v []Header) {
	o.Headers = v
}

// GetEntityAsText returns the EntityAsText field value if set, zero value otherwise.
func (o *Request) GetEntityAsText() string {
	if o == nil || IsNil(o.EntityAsText) {
		var ret string
		return ret
	}
	return *o.EntityAsText
}

// GetEntityAsTextOk returns a tuple with the EntityAsText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetEntityAsTextOk() (*string, bool) {
	if o == nil || IsNil(o.EntityAsText) {
		return nil, false
	}
	return o.EntityAsText, true
}

// HasEntityAsText returns a boolean if a field has been set.
func (o *Request) HasEntityAsText() bool {
	if o != nil && !IsNil(o.EntityAsText) {
		return true
	}

	return false
}

// SetEntityAsText gets a reference to the given string and assigns it to the EntityAsText field.
func (o *Request) SetEntityAsText(v string) {
	o.EntityAsText = &v
}

func (o Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.CacheDirectives) {
		toSerialize["cacheDirectives"] = o.CacheDirectives
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	if !IsNil(o.OnError) {
		toSerialize["onError"] = o.OnError
	}
	if !IsNil(o.OnSent) {
		toSerialize["onSent"] = o.OnSent
	}
	if !IsNil(o.RecipientsInfo) {
		toSerialize["recipientsInfo"] = o.RecipientsInfo
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	if !IsNil(o.AccessControlRequestHeaders) {
		toSerialize["accessControlRequestHeaders"] = o.AccessControlRequestHeaders
	}
	if !IsNil(o.AccessControlRequestMethod) {
		toSerialize["accessControlRequestMethod"] = o.AccessControlRequestMethod
	}
	if !IsNil(o.ChallengeResponse) {
		toSerialize["challengeResponse"] = o.ChallengeResponse
	}
	if !IsNil(o.ClientInfo) {
		toSerialize["clientInfo"] = o.ClientInfo
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.Cookies) {
		toSerialize["cookies"] = o.Cookies
	}
	if !IsNil(o.HostRef) {
		toSerialize["hostRef"] = o.HostRef
	}
	if !IsNil(o.Loggable) {
		toSerialize["loggable"] = o.Loggable
	}
	if !IsNil(o.MaxForwards) {
		toSerialize["maxForwards"] = o.MaxForwards
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.OnResponse) {
		toSerialize["onResponse"] = o.OnResponse
	}
	if !IsNil(o.OriginalRef) {
		toSerialize["originalRef"] = o.OriginalRef
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.ProxyChallengeResponse) {
		toSerialize["proxyChallengeResponse"] = o.ProxyChallengeResponse
	}
	if !IsNil(o.Ranges) {
		toSerialize["ranges"] = o.Ranges
	}
	if !IsNil(o.ReferrerRef) {
		toSerialize["referrerRef"] = o.ReferrerRef
	}
	if !IsNil(o.ResourceRef) {
		toSerialize["resourceRef"] = o.ResourceRef
	}
	if !IsNil(o.RootRef) {
		toSerialize["rootRef"] = o.RootRef
	}
	if !IsNil(o.Confidential) {
		toSerialize["confidential"] = o.Confidential
	}
	if !IsNil(o.Asynchronous) {
		toSerialize["asynchronous"] = o.Asynchronous
	}
	if !IsNil(o.EntityAvailable) {
		toSerialize["entityAvailable"] = o.EntityAvailable
	}
	if !IsNil(o.ExpectingResponse) {
		toSerialize["expectingResponse"] = o.ExpectingResponse
	}
	if !IsNil(o.Synchronous) {
		toSerialize["synchronous"] = o.Synchronous
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.EntityAsText) {
		toSerialize["entityAsText"] = o.EntityAsText
	}
	return toSerialize, nil
}

type NullableRequest struct {
	value *Request
	isSet bool
}

func (v NullableRequest) Get() *Request {
	return v.value
}

func (v *NullableRequest) Set(val *Request) {
	v.value = val
	v.isSet = true
}

func (v NullableRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequest(val *Request) *NullableRequest {
	return &NullableRequest{value: val, isSet: true}
}

func (v NullableRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


