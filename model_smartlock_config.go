/*
Nuki API

The Nuki Web Api

API version: 3.9.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SmartlockConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartlockConfig{}

// SmartlockConfig struct for SmartlockConfig
type SmartlockConfig struct {
	// The name of the smartlock for new users
	Name string `json:"name"`
	// The latitude of the smartlock position
	Latitude float32 `json:"latitude"`
	// The longitude of the smartlock position
	Longitude float32 `json:"longitude"`
	// The capabilities indicate whether door opening via app is possible, RTO is possible or both: 0 .. only door opening possible, 1 .. both possible, 2 .. only RTO possible (only for type=2)
	Capabilities *int32 `json:"capabilities,omitempty"`
	// True if the door should be unlatched on unlocking (knob) (only for type=1 and type=3)
	AutoUnlatch *bool `json:"autoUnlatch,omitempty"`
	// True if the door has a lift up handle, which is required to be lifted up to lock the door
	LiftUpHandle *bool `json:"liftUpHandle,omitempty"`
	// True if the pairing is allowed via the smartlock button
	PairingEnabled *bool `json:"pairingEnabled,omitempty"`
	// True if the button on the smartlock is enabled
	ButtonEnabled *bool `json:"buttonEnabled,omitempty"`
	// True if the LED on the smartlock is enabled
	LedEnabled *bool `json:"ledEnabled,omitempty"`
	// The brightness of the LED: 0 .. off, 5 .. max (only for type=1 and type=3)
	LedBrightness *int32 `json:"ledBrightness,omitempty"`
	// [deprecated] The timezone offset (in minutes)
	TimezoneOffset int32 `json:"timezoneOffset"`
	// [deprecated] The daylight saving mode: 0 .. off, 1 .. european
	DaylightSavingMode *int32 `json:"daylightSavingMode,omitempty"`
	// True if a fob is paired with the smartlock
	FobPaired *bool `json:"fobPaired,omitempty"`
	// The fob action if button is pressed once: type=0/3/4: 0 .. none, 1 .. unlock, 2 .. lock, 3 .. lock 'n' go, 4 .. intelligent (lock/unlocked based on the current state); type=2: 0 .. none, 1 .. toggle ring to open, 2 .. activate ring to open, 3 .. deactivate ring to open, 7 .. open (electric strike actuation), 8 .. ring
	FobAction1 *int32 `json:"fobAction1,omitempty"`
	// The fob action if button is pressed twice: type=0/3/4: 0 .. none, 1 .. unlock, 2 .. lock, 3 .. lock 'n' go, 4 .. intelligent (lock/unlocked based on the current state); type=2: 0 .. none, 1 .. toggle ring to open, 2 .. activate ring to open, 3 .. deactivate ring to open, 7 .. open (electric strike actuation), 8 .. ring
	FobAction2 *int32 `json:"fobAction2,omitempty"`
	// The fob action if button is pressed 3 times: type=0/3/4: 0 .. none, 1 .. unlock, 2 .. lock, 3 .. lock 'n' go, 4 .. intelligent (lock/unlocked based on the current state); type=2: 0 .. none, 1 .. toggle ring to open, 2 .. activate ring to open, 3 .. deactivate ring to open, 7 .. open (electric strike actuation), 8 .. ring
	FobAction3 *int32 `json:"fobAction3,omitempty"`
	// True if the smartlock should only lock once (instead of twice) (only for type=1)
	SingleLock bool `json:"singleLock"`
	// The operating mode of the opener (only for type=2): 0x00 .. generic door opener, 0x01 .. analogue intercom, 0x02 .. digital intercom, 0x03 .. digital intercom Siedle, 0x04 .. digital intercom TCS, 0x05 .. digital intercom Bticino, 0x06 .. analog intercom Siedle HTS, 0x07 .. digital intercom STR, 0x08 .. digital intercom Ritto, 0x09 .. digital intercom Fermax, 0x0A .. digital intercom Comelit, 0x0B .. digital intercom Urmet BiBus, 0x0C .. digital intercom Urmet 2Voice, 0x0D .. digital intercom Golmar, 0x0E .. digital intercom SKS, 0x0F .. digital intercom Spare
	OperatingMode *int32 `json:"operatingMode,omitempty"`
	// The advertising mode (battery saving): 0 .. automatic, 1 .. normal, 2 .. slow, 3 .. slowest
	AdvertisingMode int32 `json:"advertisingMode"`
	// True if a keypad is paired with the smartlock
	KeypadPaired *bool `json:"keypadPaired,omitempty"`
	// True if a keypad 2 is paired with the smartlock
	Keypad2Paired *bool `json:"keypad2Paired,omitempty"`
	// The homekit state: 0 .. unavailable, 1 .. disabled, 2 .. enabled, 3 .. enabled & paired
	HomekitState *int32 `json:"homekitState,omitempty"`
	// The matter state: 0 .. not available, 1 .. disabled and no certificate available, 2 .. disabled, 3 .. enabled, 4 .. enabled & paired
	MatterState *int32 `json:"matterState,omitempty"`
	// The timezone id (check https://developer.nuki.io for ids)
	TimezoneId int32 `json:"timezoneId"`
	// The device type of a Nuki device
	DeviceType *int32 `json:"deviceType,omitempty"`
	// Flag that indicates if the devices internal WIFI module can be used
	WifiEnabled *bool `json:"wifiEnabled,omitempty"`
	// The operation id - if set it's locked for another operation
	OperationId *string `json:"operationId,omitempty"`
	// The product variant for Smartlock 5: 1 .. Go, 2 .. Pro, 3 .. Ultra
	ProductVariant *int32 `json:"productVariant,omitempty"`
}

type _SmartlockConfig SmartlockConfig

// NewSmartlockConfig instantiates a new SmartlockConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartlockConfig(name string, latitude float32, longitude float32, timezoneOffset int32, singleLock bool, advertisingMode int32, timezoneId int32) *SmartlockConfig {
	this := SmartlockConfig{}
	this.Name = name
	this.Latitude = latitude
	this.Longitude = longitude
	this.TimezoneOffset = timezoneOffset
	this.SingleLock = singleLock
	this.AdvertisingMode = advertisingMode
	this.TimezoneId = timezoneId
	return &this
}

// NewSmartlockConfigWithDefaults instantiates a new SmartlockConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartlockConfigWithDefaults() *SmartlockConfig {
	this := SmartlockConfig{}
	return &this
}

// GetName returns the Name field value
func (o *SmartlockConfig) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SmartlockConfig) SetName(v string) {
	o.Name = v
}

// GetLatitude returns the Latitude field value
func (o *SmartlockConfig) GetLatitude() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetLatitudeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latitude, true
}

// SetLatitude sets field value
func (o *SmartlockConfig) SetLatitude(v float32) {
	o.Latitude = v
}

// GetLongitude returns the Longitude field value
func (o *SmartlockConfig) GetLongitude() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetLongitudeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Longitude, true
}

// SetLongitude sets field value
func (o *SmartlockConfig) SetLongitude(v float32) {
	o.Longitude = v
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise.
func (o *SmartlockConfig) GetCapabilities() int32 {
	if o == nil || IsNil(o.Capabilities) {
		var ret int32
		return ret
	}
	return *o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetCapabilitiesOk() (*int32, bool) {
	if o == nil || IsNil(o.Capabilities) {
		return nil, false
	}
	return o.Capabilities, true
}

// HasCapabilities returns a boolean if a field has been set.
func (o *SmartlockConfig) HasCapabilities() bool {
	if o != nil && !IsNil(o.Capabilities) {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given int32 and assigns it to the Capabilities field.
func (o *SmartlockConfig) SetCapabilities(v int32) {
	o.Capabilities = &v
}

// GetAutoUnlatch returns the AutoUnlatch field value if set, zero value otherwise.
func (o *SmartlockConfig) GetAutoUnlatch() bool {
	if o == nil || IsNil(o.AutoUnlatch) {
		var ret bool
		return ret
	}
	return *o.AutoUnlatch
}

// GetAutoUnlatchOk returns a tuple with the AutoUnlatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetAutoUnlatchOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoUnlatch) {
		return nil, false
	}
	return o.AutoUnlatch, true
}

// HasAutoUnlatch returns a boolean if a field has been set.
func (o *SmartlockConfig) HasAutoUnlatch() bool {
	if o != nil && !IsNil(o.AutoUnlatch) {
		return true
	}

	return false
}

// SetAutoUnlatch gets a reference to the given bool and assigns it to the AutoUnlatch field.
func (o *SmartlockConfig) SetAutoUnlatch(v bool) {
	o.AutoUnlatch = &v
}

// GetLiftUpHandle returns the LiftUpHandle field value if set, zero value otherwise.
func (o *SmartlockConfig) GetLiftUpHandle() bool {
	if o == nil || IsNil(o.LiftUpHandle) {
		var ret bool
		return ret
	}
	return *o.LiftUpHandle
}

// GetLiftUpHandleOk returns a tuple with the LiftUpHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetLiftUpHandleOk() (*bool, bool) {
	if o == nil || IsNil(o.LiftUpHandle) {
		return nil, false
	}
	return o.LiftUpHandle, true
}

// HasLiftUpHandle returns a boolean if a field has been set.
func (o *SmartlockConfig) HasLiftUpHandle() bool {
	if o != nil && !IsNil(o.LiftUpHandle) {
		return true
	}

	return false
}

// SetLiftUpHandle gets a reference to the given bool and assigns it to the LiftUpHandle field.
func (o *SmartlockConfig) SetLiftUpHandle(v bool) {
	o.LiftUpHandle = &v
}

// GetPairingEnabled returns the PairingEnabled field value if set, zero value otherwise.
func (o *SmartlockConfig) GetPairingEnabled() bool {
	if o == nil || IsNil(o.PairingEnabled) {
		var ret bool
		return ret
	}
	return *o.PairingEnabled
}

// GetPairingEnabledOk returns a tuple with the PairingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetPairingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PairingEnabled) {
		return nil, false
	}
	return o.PairingEnabled, true
}

// HasPairingEnabled returns a boolean if a field has been set.
func (o *SmartlockConfig) HasPairingEnabled() bool {
	if o != nil && !IsNil(o.PairingEnabled) {
		return true
	}

	return false
}

// SetPairingEnabled gets a reference to the given bool and assigns it to the PairingEnabled field.
func (o *SmartlockConfig) SetPairingEnabled(v bool) {
	o.PairingEnabled = &v
}

// GetButtonEnabled returns the ButtonEnabled field value if set, zero value otherwise.
func (o *SmartlockConfig) GetButtonEnabled() bool {
	if o == nil || IsNil(o.ButtonEnabled) {
		var ret bool
		return ret
	}
	return *o.ButtonEnabled
}

// GetButtonEnabledOk returns a tuple with the ButtonEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetButtonEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ButtonEnabled) {
		return nil, false
	}
	return o.ButtonEnabled, true
}

// HasButtonEnabled returns a boolean if a field has been set.
func (o *SmartlockConfig) HasButtonEnabled() bool {
	if o != nil && !IsNil(o.ButtonEnabled) {
		return true
	}

	return false
}

// SetButtonEnabled gets a reference to the given bool and assigns it to the ButtonEnabled field.
func (o *SmartlockConfig) SetButtonEnabled(v bool) {
	o.ButtonEnabled = &v
}

// GetLedEnabled returns the LedEnabled field value if set, zero value otherwise.
func (o *SmartlockConfig) GetLedEnabled() bool {
	if o == nil || IsNil(o.LedEnabled) {
		var ret bool
		return ret
	}
	return *o.LedEnabled
}

// GetLedEnabledOk returns a tuple with the LedEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetLedEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.LedEnabled) {
		return nil, false
	}
	return o.LedEnabled, true
}

// HasLedEnabled returns a boolean if a field has been set.
func (o *SmartlockConfig) HasLedEnabled() bool {
	if o != nil && !IsNil(o.LedEnabled) {
		return true
	}

	return false
}

// SetLedEnabled gets a reference to the given bool and assigns it to the LedEnabled field.
func (o *SmartlockConfig) SetLedEnabled(v bool) {
	o.LedEnabled = &v
}

// GetLedBrightness returns the LedBrightness field value if set, zero value otherwise.
func (o *SmartlockConfig) GetLedBrightness() int32 {
	if o == nil || IsNil(o.LedBrightness) {
		var ret int32
		return ret
	}
	return *o.LedBrightness
}

// GetLedBrightnessOk returns a tuple with the LedBrightness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetLedBrightnessOk() (*int32, bool) {
	if o == nil || IsNil(o.LedBrightness) {
		return nil, false
	}
	return o.LedBrightness, true
}

// HasLedBrightness returns a boolean if a field has been set.
func (o *SmartlockConfig) HasLedBrightness() bool {
	if o != nil && !IsNil(o.LedBrightness) {
		return true
	}

	return false
}

// SetLedBrightness gets a reference to the given int32 and assigns it to the LedBrightness field.
func (o *SmartlockConfig) SetLedBrightness(v int32) {
	o.LedBrightness = &v
}

// GetTimezoneOffset returns the TimezoneOffset field value
func (o *SmartlockConfig) GetTimezoneOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TimezoneOffset
}

// GetTimezoneOffsetOk returns a tuple with the TimezoneOffset field value
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetTimezoneOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimezoneOffset, true
}

// SetTimezoneOffset sets field value
func (o *SmartlockConfig) SetTimezoneOffset(v int32) {
	o.TimezoneOffset = v
}

// GetDaylightSavingMode returns the DaylightSavingMode field value if set, zero value otherwise.
func (o *SmartlockConfig) GetDaylightSavingMode() int32 {
	if o == nil || IsNil(o.DaylightSavingMode) {
		var ret int32
		return ret
	}
	return *o.DaylightSavingMode
}

// GetDaylightSavingModeOk returns a tuple with the DaylightSavingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetDaylightSavingModeOk() (*int32, bool) {
	if o == nil || IsNil(o.DaylightSavingMode) {
		return nil, false
	}
	return o.DaylightSavingMode, true
}

// HasDaylightSavingMode returns a boolean if a field has been set.
func (o *SmartlockConfig) HasDaylightSavingMode() bool {
	if o != nil && !IsNil(o.DaylightSavingMode) {
		return true
	}

	return false
}

// SetDaylightSavingMode gets a reference to the given int32 and assigns it to the DaylightSavingMode field.
func (o *SmartlockConfig) SetDaylightSavingMode(v int32) {
	o.DaylightSavingMode = &v
}

// GetFobPaired returns the FobPaired field value if set, zero value otherwise.
func (o *SmartlockConfig) GetFobPaired() bool {
	if o == nil || IsNil(o.FobPaired) {
		var ret bool
		return ret
	}
	return *o.FobPaired
}

// GetFobPairedOk returns a tuple with the FobPaired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetFobPairedOk() (*bool, bool) {
	if o == nil || IsNil(o.FobPaired) {
		return nil, false
	}
	return o.FobPaired, true
}

// HasFobPaired returns a boolean if a field has been set.
func (o *SmartlockConfig) HasFobPaired() bool {
	if o != nil && !IsNil(o.FobPaired) {
		return true
	}

	return false
}

// SetFobPaired gets a reference to the given bool and assigns it to the FobPaired field.
func (o *SmartlockConfig) SetFobPaired(v bool) {
	o.FobPaired = &v
}

// GetFobAction1 returns the FobAction1 field value if set, zero value otherwise.
func (o *SmartlockConfig) GetFobAction1() int32 {
	if o == nil || IsNil(o.FobAction1) {
		var ret int32
		return ret
	}
	return *o.FobAction1
}

// GetFobAction1Ok returns a tuple with the FobAction1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetFobAction1Ok() (*int32, bool) {
	if o == nil || IsNil(o.FobAction1) {
		return nil, false
	}
	return o.FobAction1, true
}

// HasFobAction1 returns a boolean if a field has been set.
func (o *SmartlockConfig) HasFobAction1() bool {
	if o != nil && !IsNil(o.FobAction1) {
		return true
	}

	return false
}

// SetFobAction1 gets a reference to the given int32 and assigns it to the FobAction1 field.
func (o *SmartlockConfig) SetFobAction1(v int32) {
	o.FobAction1 = &v
}

// GetFobAction2 returns the FobAction2 field value if set, zero value otherwise.
func (o *SmartlockConfig) GetFobAction2() int32 {
	if o == nil || IsNil(o.FobAction2) {
		var ret int32
		return ret
	}
	return *o.FobAction2
}

// GetFobAction2Ok returns a tuple with the FobAction2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetFobAction2Ok() (*int32, bool) {
	if o == nil || IsNil(o.FobAction2) {
		return nil, false
	}
	return o.FobAction2, true
}

// HasFobAction2 returns a boolean if a field has been set.
func (o *SmartlockConfig) HasFobAction2() bool {
	if o != nil && !IsNil(o.FobAction2) {
		return true
	}

	return false
}

// SetFobAction2 gets a reference to the given int32 and assigns it to the FobAction2 field.
func (o *SmartlockConfig) SetFobAction2(v int32) {
	o.FobAction2 = &v
}

// GetFobAction3 returns the FobAction3 field value if set, zero value otherwise.
func (o *SmartlockConfig) GetFobAction3() int32 {
	if o == nil || IsNil(o.FobAction3) {
		var ret int32
		return ret
	}
	return *o.FobAction3
}

// GetFobAction3Ok returns a tuple with the FobAction3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetFobAction3Ok() (*int32, bool) {
	if o == nil || IsNil(o.FobAction3) {
		return nil, false
	}
	return o.FobAction3, true
}

// HasFobAction3 returns a boolean if a field has been set.
func (o *SmartlockConfig) HasFobAction3() bool {
	if o != nil && !IsNil(o.FobAction3) {
		return true
	}

	return false
}

// SetFobAction3 gets a reference to the given int32 and assigns it to the FobAction3 field.
func (o *SmartlockConfig) SetFobAction3(v int32) {
	o.FobAction3 = &v
}

// GetSingleLock returns the SingleLock field value
func (o *SmartlockConfig) GetSingleLock() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SingleLock
}

// GetSingleLockOk returns a tuple with the SingleLock field value
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetSingleLockOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SingleLock, true
}

// SetSingleLock sets field value
func (o *SmartlockConfig) SetSingleLock(v bool) {
	o.SingleLock = v
}

// GetOperatingMode returns the OperatingMode field value if set, zero value otherwise.
func (o *SmartlockConfig) GetOperatingMode() int32 {
	if o == nil || IsNil(o.OperatingMode) {
		var ret int32
		return ret
	}
	return *o.OperatingMode
}

// GetOperatingModeOk returns a tuple with the OperatingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetOperatingModeOk() (*int32, bool) {
	if o == nil || IsNil(o.OperatingMode) {
		return nil, false
	}
	return o.OperatingMode, true
}

// HasOperatingMode returns a boolean if a field has been set.
func (o *SmartlockConfig) HasOperatingMode() bool {
	if o != nil && !IsNil(o.OperatingMode) {
		return true
	}

	return false
}

// SetOperatingMode gets a reference to the given int32 and assigns it to the OperatingMode field.
func (o *SmartlockConfig) SetOperatingMode(v int32) {
	o.OperatingMode = &v
}

// GetAdvertisingMode returns the AdvertisingMode field value
func (o *SmartlockConfig) GetAdvertisingMode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AdvertisingMode
}

// GetAdvertisingModeOk returns a tuple with the AdvertisingMode field value
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetAdvertisingModeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdvertisingMode, true
}

// SetAdvertisingMode sets field value
func (o *SmartlockConfig) SetAdvertisingMode(v int32) {
	o.AdvertisingMode = v
}

// GetKeypadPaired returns the KeypadPaired field value if set, zero value otherwise.
func (o *SmartlockConfig) GetKeypadPaired() bool {
	if o == nil || IsNil(o.KeypadPaired) {
		var ret bool
		return ret
	}
	return *o.KeypadPaired
}

// GetKeypadPairedOk returns a tuple with the KeypadPaired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetKeypadPairedOk() (*bool, bool) {
	if o == nil || IsNil(o.KeypadPaired) {
		return nil, false
	}
	return o.KeypadPaired, true
}

// HasKeypadPaired returns a boolean if a field has been set.
func (o *SmartlockConfig) HasKeypadPaired() bool {
	if o != nil && !IsNil(o.KeypadPaired) {
		return true
	}

	return false
}

// SetKeypadPaired gets a reference to the given bool and assigns it to the KeypadPaired field.
func (o *SmartlockConfig) SetKeypadPaired(v bool) {
	o.KeypadPaired = &v
}

// GetKeypad2Paired returns the Keypad2Paired field value if set, zero value otherwise.
func (o *SmartlockConfig) GetKeypad2Paired() bool {
	if o == nil || IsNil(o.Keypad2Paired) {
		var ret bool
		return ret
	}
	return *o.Keypad2Paired
}

// GetKeypad2PairedOk returns a tuple with the Keypad2Paired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetKeypad2PairedOk() (*bool, bool) {
	if o == nil || IsNil(o.Keypad2Paired) {
		return nil, false
	}
	return o.Keypad2Paired, true
}

// HasKeypad2Paired returns a boolean if a field has been set.
func (o *SmartlockConfig) HasKeypad2Paired() bool {
	if o != nil && !IsNil(o.Keypad2Paired) {
		return true
	}

	return false
}

// SetKeypad2Paired gets a reference to the given bool and assigns it to the Keypad2Paired field.
func (o *SmartlockConfig) SetKeypad2Paired(v bool) {
	o.Keypad2Paired = &v
}

// GetHomekitState returns the HomekitState field value if set, zero value otherwise.
func (o *SmartlockConfig) GetHomekitState() int32 {
	if o == nil || IsNil(o.HomekitState) {
		var ret int32
		return ret
	}
	return *o.HomekitState
}

// GetHomekitStateOk returns a tuple with the HomekitState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetHomekitStateOk() (*int32, bool) {
	if o == nil || IsNil(o.HomekitState) {
		return nil, false
	}
	return o.HomekitState, true
}

// HasHomekitState returns a boolean if a field has been set.
func (o *SmartlockConfig) HasHomekitState() bool {
	if o != nil && !IsNil(o.HomekitState) {
		return true
	}

	return false
}

// SetHomekitState gets a reference to the given int32 and assigns it to the HomekitState field.
func (o *SmartlockConfig) SetHomekitState(v int32) {
	o.HomekitState = &v
}

// GetMatterState returns the MatterState field value if set, zero value otherwise.
func (o *SmartlockConfig) GetMatterState() int32 {
	if o == nil || IsNil(o.MatterState) {
		var ret int32
		return ret
	}
	return *o.MatterState
}

// GetMatterStateOk returns a tuple with the MatterState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetMatterStateOk() (*int32, bool) {
	if o == nil || IsNil(o.MatterState) {
		return nil, false
	}
	return o.MatterState, true
}

// HasMatterState returns a boolean if a field has been set.
func (o *SmartlockConfig) HasMatterState() bool {
	if o != nil && !IsNil(o.MatterState) {
		return true
	}

	return false
}

// SetMatterState gets a reference to the given int32 and assigns it to the MatterState field.
func (o *SmartlockConfig) SetMatterState(v int32) {
	o.MatterState = &v
}

// GetTimezoneId returns the TimezoneId field value
func (o *SmartlockConfig) GetTimezoneId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TimezoneId
}

// GetTimezoneIdOk returns a tuple with the TimezoneId field value
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetTimezoneIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimezoneId, true
}

// SetTimezoneId sets field value
func (o *SmartlockConfig) SetTimezoneId(v int32) {
	o.TimezoneId = v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *SmartlockConfig) GetDeviceType() int32 {
	if o == nil || IsNil(o.DeviceType) {
		var ret int32
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetDeviceTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.DeviceType) {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *SmartlockConfig) HasDeviceType() bool {
	if o != nil && !IsNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given int32 and assigns it to the DeviceType field.
func (o *SmartlockConfig) SetDeviceType(v int32) {
	o.DeviceType = &v
}

// GetWifiEnabled returns the WifiEnabled field value if set, zero value otherwise.
func (o *SmartlockConfig) GetWifiEnabled() bool {
	if o == nil || IsNil(o.WifiEnabled) {
		var ret bool
		return ret
	}
	return *o.WifiEnabled
}

// GetWifiEnabledOk returns a tuple with the WifiEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetWifiEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.WifiEnabled) {
		return nil, false
	}
	return o.WifiEnabled, true
}

// HasWifiEnabled returns a boolean if a field has been set.
func (o *SmartlockConfig) HasWifiEnabled() bool {
	if o != nil && !IsNil(o.WifiEnabled) {
		return true
	}

	return false
}

// SetWifiEnabled gets a reference to the given bool and assigns it to the WifiEnabled field.
func (o *SmartlockConfig) SetWifiEnabled(v bool) {
	o.WifiEnabled = &v
}

// GetOperationId returns the OperationId field value if set, zero value otherwise.
func (o *SmartlockConfig) GetOperationId() string {
	if o == nil || IsNil(o.OperationId) {
		var ret string
		return ret
	}
	return *o.OperationId
}

// GetOperationIdOk returns a tuple with the OperationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetOperationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OperationId) {
		return nil, false
	}
	return o.OperationId, true
}

// HasOperationId returns a boolean if a field has been set.
func (o *SmartlockConfig) HasOperationId() bool {
	if o != nil && !IsNil(o.OperationId) {
		return true
	}

	return false
}

// SetOperationId gets a reference to the given string and assigns it to the OperationId field.
func (o *SmartlockConfig) SetOperationId(v string) {
	o.OperationId = &v
}

// GetProductVariant returns the ProductVariant field value if set, zero value otherwise.
func (o *SmartlockConfig) GetProductVariant() int32 {
	if o == nil || IsNil(o.ProductVariant) {
		var ret int32
		return ret
	}
	return *o.ProductVariant
}

// GetProductVariantOk returns a tuple with the ProductVariant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockConfig) GetProductVariantOk() (*int32, bool) {
	if o == nil || IsNil(o.ProductVariant) {
		return nil, false
	}
	return o.ProductVariant, true
}

// HasProductVariant returns a boolean if a field has been set.
func (o *SmartlockConfig) HasProductVariant() bool {
	if o != nil && !IsNil(o.ProductVariant) {
		return true
	}

	return false
}

// SetProductVariant gets a reference to the given int32 and assigns it to the ProductVariant field.
func (o *SmartlockConfig) SetProductVariant(v int32) {
	o.ProductVariant = &v
}

func (o SmartlockConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartlockConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["latitude"] = o.Latitude
	toSerialize["longitude"] = o.Longitude
	if !IsNil(o.Capabilities) {
		toSerialize["capabilities"] = o.Capabilities
	}
	if !IsNil(o.AutoUnlatch) {
		toSerialize["autoUnlatch"] = o.AutoUnlatch
	}
	if !IsNil(o.LiftUpHandle) {
		toSerialize["liftUpHandle"] = o.LiftUpHandle
	}
	if !IsNil(o.PairingEnabled) {
		toSerialize["pairingEnabled"] = o.PairingEnabled
	}
	if !IsNil(o.ButtonEnabled) {
		toSerialize["buttonEnabled"] = o.ButtonEnabled
	}
	if !IsNil(o.LedEnabled) {
		toSerialize["ledEnabled"] = o.LedEnabled
	}
	if !IsNil(o.LedBrightness) {
		toSerialize["ledBrightness"] = o.LedBrightness
	}
	toSerialize["timezoneOffset"] = o.TimezoneOffset
	if !IsNil(o.DaylightSavingMode) {
		toSerialize["daylightSavingMode"] = o.DaylightSavingMode
	}
	if !IsNil(o.FobPaired) {
		toSerialize["fobPaired"] = o.FobPaired
	}
	if !IsNil(o.FobAction1) {
		toSerialize["fobAction1"] = o.FobAction1
	}
	if !IsNil(o.FobAction2) {
		toSerialize["fobAction2"] = o.FobAction2
	}
	if !IsNil(o.FobAction3) {
		toSerialize["fobAction3"] = o.FobAction3
	}
	toSerialize["singleLock"] = o.SingleLock
	if !IsNil(o.OperatingMode) {
		toSerialize["operatingMode"] = o.OperatingMode
	}
	toSerialize["advertisingMode"] = o.AdvertisingMode
	if !IsNil(o.KeypadPaired) {
		toSerialize["keypadPaired"] = o.KeypadPaired
	}
	if !IsNil(o.Keypad2Paired) {
		toSerialize["keypad2Paired"] = o.Keypad2Paired
	}
	if !IsNil(o.HomekitState) {
		toSerialize["homekitState"] = o.HomekitState
	}
	if !IsNil(o.MatterState) {
		toSerialize["matterState"] = o.MatterState
	}
	toSerialize["timezoneId"] = o.TimezoneId
	if !IsNil(o.DeviceType) {
		toSerialize["deviceType"] = o.DeviceType
	}
	if !IsNil(o.WifiEnabled) {
		toSerialize["wifiEnabled"] = o.WifiEnabled
	}
	if !IsNil(o.OperationId) {
		toSerialize["operationId"] = o.OperationId
	}
	if !IsNil(o.ProductVariant) {
		toSerialize["productVariant"] = o.ProductVariant
	}
	return toSerialize, nil
}

func (o *SmartlockConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"latitude",
		"longitude",
		"timezoneOffset",
		"singleLock",
		"advertisingMode",
		"timezoneId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmartlockConfig := _SmartlockConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSmartlockConfig)

	if err != nil {
		return err
	}

	*o = SmartlockConfig(varSmartlockConfig)

	return err
}

type NullableSmartlockConfig struct {
	value *SmartlockConfig
	isSet bool
}

func (v NullableSmartlockConfig) Get() *SmartlockConfig {
	return v.value
}

func (v *NullableSmartlockConfig) Set(val *SmartlockConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartlockConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartlockConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartlockConfig(val *SmartlockConfig) *NullableSmartlockConfig {
	return &NullableSmartlockConfig{value: val, isSet: true}
}

func (v NullableSmartlockConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartlockConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


