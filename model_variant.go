/*
Nuki API

The Nuki Web Api

API version: 3.10.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Variant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Variant{}

// Variant struct for Variant
type Variant struct {
	CharacterSet *CharacterSet `json:"characterSet,omitempty"`
	Encodings []Encoding `json:"encodings,omitempty"`
	LocationRef *Reference `json:"locationRef,omitempty"`
	Languages []Language `json:"languages,omitempty"`
	MediaType *MediaType `json:"mediaType,omitempty"`
}

// NewVariant instantiates a new Variant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariant() *Variant {
	this := Variant{}
	return &this
}

// NewVariantWithDefaults instantiates a new Variant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariantWithDefaults() *Variant {
	this := Variant{}
	return &this
}

// GetCharacterSet returns the CharacterSet field value if set, zero value otherwise.
func (o *Variant) GetCharacterSet() CharacterSet {
	if o == nil || IsNil(o.CharacterSet) {
		var ret CharacterSet
		return ret
	}
	return *o.CharacterSet
}

// GetCharacterSetOk returns a tuple with the CharacterSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variant) GetCharacterSetOk() (*CharacterSet, bool) {
	if o == nil || IsNil(o.CharacterSet) {
		return nil, false
	}
	return o.CharacterSet, true
}

// HasCharacterSet returns a boolean if a field has been set.
func (o *Variant) HasCharacterSet() bool {
	if o != nil && !IsNil(o.CharacterSet) {
		return true
	}

	return false
}

// SetCharacterSet gets a reference to the given CharacterSet and assigns it to the CharacterSet field.
func (o *Variant) SetCharacterSet(v CharacterSet) {
	o.CharacterSet = &v
}

// GetEncodings returns the Encodings field value if set, zero value otherwise.
func (o *Variant) GetEncodings() []Encoding {
	if o == nil || IsNil(o.Encodings) {
		var ret []Encoding
		return ret
	}
	return o.Encodings
}

// GetEncodingsOk returns a tuple with the Encodings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variant) GetEncodingsOk() ([]Encoding, bool) {
	if o == nil || IsNil(o.Encodings) {
		return nil, false
	}
	return o.Encodings, true
}

// HasEncodings returns a boolean if a field has been set.
func (o *Variant) HasEncodings() bool {
	if o != nil && !IsNil(o.Encodings) {
		return true
	}

	return false
}

// SetEncodings gets a reference to the given []Encoding and assigns it to the Encodings field.
func (o *Variant) SetEncodings(v []Encoding) {
	o.Encodings = v
}

// GetLocationRef returns the LocationRef field value if set, zero value otherwise.
func (o *Variant) GetLocationRef() Reference {
	if o == nil || IsNil(o.LocationRef) {
		var ret Reference
		return ret
	}
	return *o.LocationRef
}

// GetLocationRefOk returns a tuple with the LocationRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variant) GetLocationRefOk() (*Reference, bool) {
	if o == nil || IsNil(o.LocationRef) {
		return nil, false
	}
	return o.LocationRef, true
}

// HasLocationRef returns a boolean if a field has been set.
func (o *Variant) HasLocationRef() bool {
	if o != nil && !IsNil(o.LocationRef) {
		return true
	}

	return false
}

// SetLocationRef gets a reference to the given Reference and assigns it to the LocationRef field.
func (o *Variant) SetLocationRef(v Reference) {
	o.LocationRef = &v
}

// GetLanguages returns the Languages field value if set, zero value otherwise.
func (o *Variant) GetLanguages() []Language {
	if o == nil || IsNil(o.Languages) {
		var ret []Language
		return ret
	}
	return o.Languages
}

// GetLanguagesOk returns a tuple with the Languages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variant) GetLanguagesOk() ([]Language, bool) {
	if o == nil || IsNil(o.Languages) {
		return nil, false
	}
	return o.Languages, true
}

// HasLanguages returns a boolean if a field has been set.
func (o *Variant) HasLanguages() bool {
	if o != nil && !IsNil(o.Languages) {
		return true
	}

	return false
}

// SetLanguages gets a reference to the given []Language and assigns it to the Languages field.
func (o *Variant) SetLanguages(v []Language) {
	o.Languages = v
}

// GetMediaType returns the MediaType field value if set, zero value otherwise.
func (o *Variant) GetMediaType() MediaType {
	if o == nil || IsNil(o.MediaType) {
		var ret MediaType
		return ret
	}
	return *o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variant) GetMediaTypeOk() (*MediaType, bool) {
	if o == nil || IsNil(o.MediaType) {
		return nil, false
	}
	return o.MediaType, true
}

// HasMediaType returns a boolean if a field has been set.
func (o *Variant) HasMediaType() bool {
	if o != nil && !IsNil(o.MediaType) {
		return true
	}

	return false
}

// SetMediaType gets a reference to the given MediaType and assigns it to the MediaType field.
func (o *Variant) SetMediaType(v MediaType) {
	o.MediaType = &v
}

func (o Variant) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Variant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CharacterSet) {
		toSerialize["characterSet"] = o.CharacterSet
	}
	if !IsNil(o.Encodings) {
		toSerialize["encodings"] = o.Encodings
	}
	if !IsNil(o.LocationRef) {
		toSerialize["locationRef"] = o.LocationRef
	}
	if !IsNil(o.Languages) {
		toSerialize["languages"] = o.Languages
	}
	if !IsNil(o.MediaType) {
		toSerialize["mediaType"] = o.MediaType
	}
	return toSerialize, nil
}

type NullableVariant struct {
	value *Variant
	isSet bool
}

func (v NullableVariant) Get() *Variant {
	return v.value
}

func (v *NullableVariant) Set(val *Variant) {
	v.value = val
	v.isSet = true
}

func (v NullableVariant) IsSet() bool {
	return v.isSet
}

func (v *NullableVariant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariant(val *Variant) *NullableVariant {
	return &NullableVariant{value: val, isSet: true}
}

func (v NullableVariant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


