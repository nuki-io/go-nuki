/*
Nuki API

The Nuki Web Api

API version: 3.8.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OpenerAPIService OpenerAPI service
type OpenerAPIService service

type ApiGetOpenerBrandRequest struct {
	ctx context.Context
	ApiService *OpenerAPIService
	brandId int32
}

func (r ApiGetOpenerBrandRequest) Execute() (*OpenerIntercomBrand, *http.Response, error) {
	return r.ApiService.GetOpenerBrandExecute(r)
}

/*
GetOpenerBrand Get an intercom brand

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param brandId The brand ID
 @return ApiGetOpenerBrandRequest
*/
func (a *OpenerAPIService) GetOpenerBrand(ctx context.Context, brandId int32) ApiGetOpenerBrandRequest {
	return ApiGetOpenerBrandRequest{
		ApiService: a,
		ctx: ctx,
		brandId: brandId,
	}
}

// Execute executes the request
//  @return OpenerIntercomBrand
func (a *OpenerAPIService) GetOpenerBrandExecute(r ApiGetOpenerBrandRequest) (*OpenerIntercomBrand, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpenerIntercomBrand
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpenerAPIService.GetOpenerBrand")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/opener/brand/{brandId}"
	localVarPath = strings.Replace(localVarPath, "{"+"brandId"+"}", url.PathEscape(parameterValueToString(r.brandId, "brandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOpenerBrandsRequest struct {
	ctx context.Context
	ApiService *OpenerAPIService
}

func (r ApiGetOpenerBrandsRequest) Execute() ([]OpenerIntercomBrand, *http.Response, error) {
	return r.ApiService.GetOpenerBrandsExecute(r)
}

/*
GetOpenerBrands Get all intercom brands

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetOpenerBrandsRequest
*/
func (a *OpenerAPIService) GetOpenerBrands(ctx context.Context) ApiGetOpenerBrandsRequest {
	return ApiGetOpenerBrandsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []OpenerIntercomBrand
func (a *OpenerAPIService) GetOpenerBrandsExecute(r ApiGetOpenerBrandsRequest) ([]OpenerIntercomBrand, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OpenerIntercomBrand
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpenerAPIService.GetOpenerBrands")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/opener/brand"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOpenerIntercomRequest struct {
	ctx context.Context
	ApiService *OpenerAPIService
	intercomId int32
}

func (r ApiGetOpenerIntercomRequest) Execute() (*OpenerIntercomModel, *http.Response, error) {
	return r.ApiService.GetOpenerIntercomExecute(r)
}

/*
GetOpenerIntercom Get an intercom model

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param intercomId The intercom ID
 @return ApiGetOpenerIntercomRequest
*/
func (a *OpenerAPIService) GetOpenerIntercom(ctx context.Context, intercomId int32) ApiGetOpenerIntercomRequest {
	return ApiGetOpenerIntercomRequest{
		ApiService: a,
		ctx: ctx,
		intercomId: intercomId,
	}
}

// Execute executes the request
//  @return OpenerIntercomModel
func (a *OpenerAPIService) GetOpenerIntercomExecute(r ApiGetOpenerIntercomRequest) (*OpenerIntercomModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpenerIntercomModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpenerAPIService.GetOpenerIntercom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/opener/intercom/{intercomId}"
	localVarPath = strings.Replace(localVarPath, "{"+"intercomId"+"}", url.PathEscape(parameterValueToString(r.intercomId, "intercomId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOpenerIntercomsRequest struct {
	ctx context.Context
	ApiService *OpenerAPIService
	brandId *int32
	ignoreVerified *bool
	recentlyChanged *bool
}

// Filter for brandId. Required if &#39;recentlyChanged&#39; is not set
func (r ApiGetOpenerIntercomsRequest) BrandId(brandId int32) ApiGetOpenerIntercomsRequest {
	r.brandId = &brandId
	return r
}

// If true, return intercoms ignoring their verified value
func (r ApiGetOpenerIntercomsRequest) IgnoreVerified(ignoreVerified bool) ApiGetOpenerIntercomsRequest {
	r.ignoreVerified = &ignoreVerified
	return r
}

// If true, return all intercoms which recently were updated
func (r ApiGetOpenerIntercomsRequest) RecentlyChanged(recentlyChanged bool) ApiGetOpenerIntercomsRequest {
	r.recentlyChanged = &recentlyChanged
	return r
}

func (r ApiGetOpenerIntercomsRequest) Execute() ([]OpenerIntercomModel, *http.Response, error) {
	return r.ApiService.GetOpenerIntercomsExecute(r)
}

/*
GetOpenerIntercoms Get a list of intercom models

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetOpenerIntercomsRequest
*/
func (a *OpenerAPIService) GetOpenerIntercoms(ctx context.Context) ApiGetOpenerIntercomsRequest {
	return ApiGetOpenerIntercomsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []OpenerIntercomModel
func (a *OpenerAPIService) GetOpenerIntercomsExecute(r ApiGetOpenerIntercomsRequest) ([]OpenerIntercomModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OpenerIntercomModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpenerAPIService.GetOpenerIntercoms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/opener/intercom"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.brandId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "brandId", r.brandId, "", "")
	}
	if r.ignoreVerified != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ignoreVerified", r.ignoreVerified, "", "")
	}
	if r.recentlyChanged != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recentlyChanged", r.recentlyChanged, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
