/*
Nuki API

The Nuki Web Api

API version: 0.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OpenerAPIService OpenerAPI service
type OpenerAPIService service

type ApiOpenerBrandResourceGetGetRequest struct {
	ctx context.Context
	ApiService *OpenerAPIService
	brandId int32
}

func (r ApiOpenerBrandResourceGetGetRequest) Execute() (*OpenerIntercomBrand, *http.Response, error) {
	return r.ApiService.OpenerBrandResourceGetGetExecute(r)
}

/*
OpenerBrandResourceGetGet Get an intercom brand

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param brandId The brand ID
 @return ApiOpenerBrandResourceGetGetRequest
*/
func (a *OpenerAPIService) OpenerBrandResourceGetGet(ctx context.Context, brandId int32) ApiOpenerBrandResourceGetGetRequest {
	return ApiOpenerBrandResourceGetGetRequest{
		ApiService: a,
		ctx: ctx,
		brandId: brandId,
	}
}

// Execute executes the request
//  @return OpenerIntercomBrand
func (a *OpenerAPIService) OpenerBrandResourceGetGetExecute(r ApiOpenerBrandResourceGetGetRequest) (*OpenerIntercomBrand, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpenerIntercomBrand
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpenerAPIService.OpenerBrandResourceGetGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/opener/brand/{brandId}"
	localVarPath = strings.Replace(localVarPath, "{"+"brandId"+"}", url.PathEscape(parameterValueToString(r.brandId, "brandId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpenerBrandsResourceGetGetRequest struct {
	ctx context.Context
	ApiService *OpenerAPIService
}

func (r ApiOpenerBrandsResourceGetGetRequest) Execute() ([]OpenerIntercomBrand, *http.Response, error) {
	return r.ApiService.OpenerBrandsResourceGetGetExecute(r)
}

/*
OpenerBrandsResourceGetGet Get all intercom brands

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOpenerBrandsResourceGetGetRequest
*/
func (a *OpenerAPIService) OpenerBrandsResourceGetGet(ctx context.Context) ApiOpenerBrandsResourceGetGetRequest {
	return ApiOpenerBrandsResourceGetGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []OpenerIntercomBrand
func (a *OpenerAPIService) OpenerBrandsResourceGetGetExecute(r ApiOpenerBrandsResourceGetGetRequest) ([]OpenerIntercomBrand, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OpenerIntercomBrand
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpenerAPIService.OpenerBrandsResourceGetGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/opener/brand"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpenerIntercomResourceGetGetRequest struct {
	ctx context.Context
	ApiService *OpenerAPIService
	intercomId int32
}

func (r ApiOpenerIntercomResourceGetGetRequest) Execute() (*OpenerIntercomModel, *http.Response, error) {
	return r.ApiService.OpenerIntercomResourceGetGetExecute(r)
}

/*
OpenerIntercomResourceGetGet Get an intercom model

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param intercomId The intercom ID
 @return ApiOpenerIntercomResourceGetGetRequest
*/
func (a *OpenerAPIService) OpenerIntercomResourceGetGet(ctx context.Context, intercomId int32) ApiOpenerIntercomResourceGetGetRequest {
	return ApiOpenerIntercomResourceGetGetRequest{
		ApiService: a,
		ctx: ctx,
		intercomId: intercomId,
	}
}

// Execute executes the request
//  @return OpenerIntercomModel
func (a *OpenerAPIService) OpenerIntercomResourceGetGetExecute(r ApiOpenerIntercomResourceGetGetRequest) (*OpenerIntercomModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpenerIntercomModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpenerAPIService.OpenerIntercomResourceGetGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/opener/intercom/{intercomId}"
	localVarPath = strings.Replace(localVarPath, "{"+"intercomId"+"}", url.PathEscape(parameterValueToString(r.intercomId, "intercomId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpenerIntercomsResourceGetGetRequest struct {
	ctx context.Context
	ApiService *OpenerAPIService
	brandId *int32
	ignoreVerified *bool
	recentlyChanged *bool
}

// Filter for brandId. Required if &#39;recentlyChanged&#39; is not set
func (r ApiOpenerIntercomsResourceGetGetRequest) BrandId(brandId int32) ApiOpenerIntercomsResourceGetGetRequest {
	r.brandId = &brandId
	return r
}

// If true, return intercoms ignoring their verified value
func (r ApiOpenerIntercomsResourceGetGetRequest) IgnoreVerified(ignoreVerified bool) ApiOpenerIntercomsResourceGetGetRequest {
	r.ignoreVerified = &ignoreVerified
	return r
}

// If true, return all intercoms which recently were updated
func (r ApiOpenerIntercomsResourceGetGetRequest) RecentlyChanged(recentlyChanged bool) ApiOpenerIntercomsResourceGetGetRequest {
	r.recentlyChanged = &recentlyChanged
	return r
}

func (r ApiOpenerIntercomsResourceGetGetRequest) Execute() ([]OpenerIntercomModel, *http.Response, error) {
	return r.ApiService.OpenerIntercomsResourceGetGetExecute(r)
}

/*
OpenerIntercomsResourceGetGet Get a list of intercom models

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOpenerIntercomsResourceGetGetRequest
*/
func (a *OpenerAPIService) OpenerIntercomsResourceGetGet(ctx context.Context) ApiOpenerIntercomsResourceGetGetRequest {
	return ApiOpenerIntercomsResourceGetGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []OpenerIntercomModel
func (a *OpenerAPIService) OpenerIntercomsResourceGetGetExecute(r ApiOpenerIntercomsResourceGetGetRequest) ([]OpenerIntercomModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OpenerIntercomModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpenerAPIService.OpenerIntercomsResourceGetGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/opener/intercom"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.brandId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "brandId", r.brandId, "", "")
	}
	if r.ignoreVerified != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ignoreVerified", r.ignoreVerified, "", "")
	}
	if r.recentlyChanged != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recentlyChanged", r.recentlyChanged, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
