/*
Nuki API

The Nuki Web Api

API version: 3.9.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ScheduledExecutorService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduledExecutorService{}

// ScheduledExecutorService struct for ScheduledExecutorService
type ScheduledExecutorService struct {
	Shutdown *bool `json:"shutdown,omitempty"`
	Terminated *bool `json:"terminated,omitempty"`
}

// NewScheduledExecutorService instantiates a new ScheduledExecutorService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduledExecutorService() *ScheduledExecutorService {
	this := ScheduledExecutorService{}
	return &this
}

// NewScheduledExecutorServiceWithDefaults instantiates a new ScheduledExecutorService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduledExecutorServiceWithDefaults() *ScheduledExecutorService {
	this := ScheduledExecutorService{}
	return &this
}

// GetShutdown returns the Shutdown field value if set, zero value otherwise.
func (o *ScheduledExecutorService) GetShutdown() bool {
	if o == nil || IsNil(o.Shutdown) {
		var ret bool
		return ret
	}
	return *o.Shutdown
}

// GetShutdownOk returns a tuple with the Shutdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledExecutorService) GetShutdownOk() (*bool, bool) {
	if o == nil || IsNil(o.Shutdown) {
		return nil, false
	}
	return o.Shutdown, true
}

// HasShutdown returns a boolean if a field has been set.
func (o *ScheduledExecutorService) HasShutdown() bool {
	if o != nil && !IsNil(o.Shutdown) {
		return true
	}

	return false
}

// SetShutdown gets a reference to the given bool and assigns it to the Shutdown field.
func (o *ScheduledExecutorService) SetShutdown(v bool) {
	o.Shutdown = &v
}

// GetTerminated returns the Terminated field value if set, zero value otherwise.
func (o *ScheduledExecutorService) GetTerminated() bool {
	if o == nil || IsNil(o.Terminated) {
		var ret bool
		return ret
	}
	return *o.Terminated
}

// GetTerminatedOk returns a tuple with the Terminated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledExecutorService) GetTerminatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Terminated) {
		return nil, false
	}
	return o.Terminated, true
}

// HasTerminated returns a boolean if a field has been set.
func (o *ScheduledExecutorService) HasTerminated() bool {
	if o != nil && !IsNil(o.Terminated) {
		return true
	}

	return false
}

// SetTerminated gets a reference to the given bool and assigns it to the Terminated field.
func (o *ScheduledExecutorService) SetTerminated(v bool) {
	o.Terminated = &v
}

func (o ScheduledExecutorService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduledExecutorService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Shutdown) {
		toSerialize["shutdown"] = o.Shutdown
	}
	if !IsNil(o.Terminated) {
		toSerialize["terminated"] = o.Terminated
	}
	return toSerialize, nil
}

type NullableScheduledExecutorService struct {
	value *ScheduledExecutorService
	isSet bool
}

func (v NullableScheduledExecutorService) Get() *ScheduledExecutorService {
	return v.value
}

func (v *NullableScheduledExecutorService) Set(val *ScheduledExecutorService) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduledExecutorService) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduledExecutorService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduledExecutorService(val *ScheduledExecutorService) *NullableScheduledExecutorService {
	return &NullableScheduledExecutorService{value: val, isSet: true}
}

func (v NullableScheduledExecutorService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduledExecutorService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


