/*
Nuki API

The Nuki Web Api

API version: 4.0.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ConnectorService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorService{}

// ConnectorService struct for ConnectorService
type ConnectorService struct {
	Context *Context `json:"context,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Started *bool `json:"started,omitempty"`
	ClientProtocols []Protocol `json:"clientProtocols,omitempty"`
	ServerProtocols []Protocol `json:"serverProtocols,omitempty"`
	Stopped *bool `json:"stopped,omitempty"`
}

// NewConnectorService instantiates a new ConnectorService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorService() *ConnectorService {
	this := ConnectorService{}
	return &this
}

// NewConnectorServiceWithDefaults instantiates a new ConnectorService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorServiceWithDefaults() *ConnectorService {
	this := ConnectorService{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *ConnectorService) GetContext() Context {
	if o == nil || IsNil(o.Context) {
		var ret Context
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorService) GetContextOk() (*Context, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *ConnectorService) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given Context and assigns it to the Context field.
func (o *ConnectorService) SetContext(v Context) {
	o.Context = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ConnectorService) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorService) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ConnectorService) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ConnectorService) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetStarted returns the Started field value if set, zero value otherwise.
func (o *ConnectorService) GetStarted() bool {
	if o == nil || IsNil(o.Started) {
		var ret bool
		return ret
	}
	return *o.Started
}

// GetStartedOk returns a tuple with the Started field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorService) GetStartedOk() (*bool, bool) {
	if o == nil || IsNil(o.Started) {
		return nil, false
	}
	return o.Started, true
}

// HasStarted returns a boolean if a field has been set.
func (o *ConnectorService) HasStarted() bool {
	if o != nil && !IsNil(o.Started) {
		return true
	}

	return false
}

// SetStarted gets a reference to the given bool and assigns it to the Started field.
func (o *ConnectorService) SetStarted(v bool) {
	o.Started = &v
}

// GetClientProtocols returns the ClientProtocols field value if set, zero value otherwise.
func (o *ConnectorService) GetClientProtocols() []Protocol {
	if o == nil || IsNil(o.ClientProtocols) {
		var ret []Protocol
		return ret
	}
	return o.ClientProtocols
}

// GetClientProtocolsOk returns a tuple with the ClientProtocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorService) GetClientProtocolsOk() ([]Protocol, bool) {
	if o == nil || IsNil(o.ClientProtocols) {
		return nil, false
	}
	return o.ClientProtocols, true
}

// HasClientProtocols returns a boolean if a field has been set.
func (o *ConnectorService) HasClientProtocols() bool {
	if o != nil && !IsNil(o.ClientProtocols) {
		return true
	}

	return false
}

// SetClientProtocols gets a reference to the given []Protocol and assigns it to the ClientProtocols field.
func (o *ConnectorService) SetClientProtocols(v []Protocol) {
	o.ClientProtocols = v
}

// GetServerProtocols returns the ServerProtocols field value if set, zero value otherwise.
func (o *ConnectorService) GetServerProtocols() []Protocol {
	if o == nil || IsNil(o.ServerProtocols) {
		var ret []Protocol
		return ret
	}
	return o.ServerProtocols
}

// GetServerProtocolsOk returns a tuple with the ServerProtocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorService) GetServerProtocolsOk() ([]Protocol, bool) {
	if o == nil || IsNil(o.ServerProtocols) {
		return nil, false
	}
	return o.ServerProtocols, true
}

// HasServerProtocols returns a boolean if a field has been set.
func (o *ConnectorService) HasServerProtocols() bool {
	if o != nil && !IsNil(o.ServerProtocols) {
		return true
	}

	return false
}

// SetServerProtocols gets a reference to the given []Protocol and assigns it to the ServerProtocols field.
func (o *ConnectorService) SetServerProtocols(v []Protocol) {
	o.ServerProtocols = v
}

// GetStopped returns the Stopped field value if set, zero value otherwise.
func (o *ConnectorService) GetStopped() bool {
	if o == nil || IsNil(o.Stopped) {
		var ret bool
		return ret
	}
	return *o.Stopped
}

// GetStoppedOk returns a tuple with the Stopped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorService) GetStoppedOk() (*bool, bool) {
	if o == nil || IsNil(o.Stopped) {
		return nil, false
	}
	return o.Stopped, true
}

// HasStopped returns a boolean if a field has been set.
func (o *ConnectorService) HasStopped() bool {
	if o != nil && !IsNil(o.Stopped) {
		return true
	}

	return false
}

// SetStopped gets a reference to the given bool and assigns it to the Stopped field.
func (o *ConnectorService) SetStopped(v bool) {
	o.Stopped = &v
}

func (o ConnectorService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Started) {
		toSerialize["started"] = o.Started
	}
	if !IsNil(o.ClientProtocols) {
		toSerialize["clientProtocols"] = o.ClientProtocols
	}
	if !IsNil(o.ServerProtocols) {
		toSerialize["serverProtocols"] = o.ServerProtocols
	}
	if !IsNil(o.Stopped) {
		toSerialize["stopped"] = o.Stopped
	}
	return toSerialize, nil
}

type NullableConnectorService struct {
	value *ConnectorService
	isSet bool
}

func (v NullableConnectorService) Get() *ConnectorService {
	return v.value
}

func (v *NullableConnectorService) Set(val *ConnectorService) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorService) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorService(val *ConnectorService) *NullableConnectorService {
	return &NullableConnectorService{value: val, isSet: true}
}

func (v NullableConnectorService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


