/*
Nuki API

The Nuki Web Api

API version: 0.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Certificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Certificate{}

// Certificate struct for Certificate
type Certificate struct {
	Type *string `json:"type,omitempty"`
	Encoded []string `json:"encoded,omitempty"`
	PublicKey *PublicKey `json:"publicKey,omitempty"`
}

// NewCertificate instantiates a new Certificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificate() *Certificate {
	this := Certificate{}
	return &this
}

// NewCertificateWithDefaults instantiates a new Certificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateWithDefaults() *Certificate {
	this := Certificate{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Certificate) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Certificate) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Certificate) SetType(v string) {
	o.Type = &v
}

// GetEncoded returns the Encoded field value if set, zero value otherwise.
func (o *Certificate) GetEncoded() []string {
	if o == nil || IsNil(o.Encoded) {
		var ret []string
		return ret
	}
	return o.Encoded
}

// GetEncodedOk returns a tuple with the Encoded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetEncodedOk() ([]string, bool) {
	if o == nil || IsNil(o.Encoded) {
		return nil, false
	}
	return o.Encoded, true
}

// HasEncoded returns a boolean if a field has been set.
func (o *Certificate) HasEncoded() bool {
	if o != nil && !IsNil(o.Encoded) {
		return true
	}

	return false
}

// SetEncoded gets a reference to the given []string and assigns it to the Encoded field.
func (o *Certificate) SetEncoded(v []string) {
	o.Encoded = v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *Certificate) GetPublicKey() PublicKey {
	if o == nil || IsNil(o.PublicKey) {
		var ret PublicKey
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetPublicKeyOk() (*PublicKey, bool) {
	if o == nil || IsNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *Certificate) HasPublicKey() bool {
	if o != nil && !IsNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given PublicKey and assigns it to the PublicKey field.
func (o *Certificate) SetPublicKey(v PublicKey) {
	o.PublicKey = &v
}

func (o Certificate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Certificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Encoded) {
		toSerialize["encoded"] = o.Encoded
	}
	if !IsNil(o.PublicKey) {
		toSerialize["publicKey"] = o.PublicKey
	}
	return toSerialize, nil
}

type NullableCertificate struct {
	value *Certificate
	isSet bool
}

func (v NullableCertificate) Get() *Certificate {
	return v.value
}

func (v *NullableCertificate) Set(val *Certificate) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificate(val *Certificate) *NullableCertificate {
	return &NullableCertificate{value: val, isSet: true}
}

func (v NullableCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


