/*
Nuki API

The Nuki Web Api

API version: 0.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Logger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Logger{}

// Logger struct for Logger
type Logger struct {
	Name *string `json:"name,omitempty"`
	Handlers []Handler `json:"handlers,omitempty"`
	UseParentHandlers *bool `json:"useParentHandlers,omitempty"`
	Filter map[string]interface{} `json:"filter,omitempty"`
	Parent *Logger `json:"parent,omitempty"`
	ResourceBundle *ResourceBundle `json:"resourceBundle,omitempty"`
	ResourceBundleName *string `json:"resourceBundleName,omitempty"`
	Level *Level `json:"level,omitempty"`
}

// NewLogger instantiates a new Logger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogger() *Logger {
	this := Logger{}
	return &this
}

// NewLoggerWithDefaults instantiates a new Logger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoggerWithDefaults() *Logger {
	this := Logger{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Logger) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Logger) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Logger) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Logger) SetName(v string) {
	o.Name = &v
}

// GetHandlers returns the Handlers field value if set, zero value otherwise.
func (o *Logger) GetHandlers() []Handler {
	if o == nil || IsNil(o.Handlers) {
		var ret []Handler
		return ret
	}
	return o.Handlers
}

// GetHandlersOk returns a tuple with the Handlers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Logger) GetHandlersOk() ([]Handler, bool) {
	if o == nil || IsNil(o.Handlers) {
		return nil, false
	}
	return o.Handlers, true
}

// HasHandlers returns a boolean if a field has been set.
func (o *Logger) HasHandlers() bool {
	if o != nil && !IsNil(o.Handlers) {
		return true
	}

	return false
}

// SetHandlers gets a reference to the given []Handler and assigns it to the Handlers field.
func (o *Logger) SetHandlers(v []Handler) {
	o.Handlers = v
}

// GetUseParentHandlers returns the UseParentHandlers field value if set, zero value otherwise.
func (o *Logger) GetUseParentHandlers() bool {
	if o == nil || IsNil(o.UseParentHandlers) {
		var ret bool
		return ret
	}
	return *o.UseParentHandlers
}

// GetUseParentHandlersOk returns a tuple with the UseParentHandlers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Logger) GetUseParentHandlersOk() (*bool, bool) {
	if o == nil || IsNil(o.UseParentHandlers) {
		return nil, false
	}
	return o.UseParentHandlers, true
}

// HasUseParentHandlers returns a boolean if a field has been set.
func (o *Logger) HasUseParentHandlers() bool {
	if o != nil && !IsNil(o.UseParentHandlers) {
		return true
	}

	return false
}

// SetUseParentHandlers gets a reference to the given bool and assigns it to the UseParentHandlers field.
func (o *Logger) SetUseParentHandlers(v bool) {
	o.UseParentHandlers = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *Logger) GetFilter() map[string]interface{} {
	if o == nil || IsNil(o.Filter) {
		var ret map[string]interface{}
		return ret
	}
	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Logger) GetFilterOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Filter) {
		return map[string]interface{}{}, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *Logger) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given map[string]interface{} and assigns it to the Filter field.
func (o *Logger) SetFilter(v map[string]interface{}) {
	o.Filter = v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *Logger) GetParent() Logger {
	if o == nil || IsNil(o.Parent) {
		var ret Logger
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Logger) GetParentOk() (*Logger, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *Logger) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given Logger and assigns it to the Parent field.
func (o *Logger) SetParent(v Logger) {
	o.Parent = &v
}

// GetResourceBundle returns the ResourceBundle field value if set, zero value otherwise.
func (o *Logger) GetResourceBundle() ResourceBundle {
	if o == nil || IsNil(o.ResourceBundle) {
		var ret ResourceBundle
		return ret
	}
	return *o.ResourceBundle
}

// GetResourceBundleOk returns a tuple with the ResourceBundle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Logger) GetResourceBundleOk() (*ResourceBundle, bool) {
	if o == nil || IsNil(o.ResourceBundle) {
		return nil, false
	}
	return o.ResourceBundle, true
}

// HasResourceBundle returns a boolean if a field has been set.
func (o *Logger) HasResourceBundle() bool {
	if o != nil && !IsNil(o.ResourceBundle) {
		return true
	}

	return false
}

// SetResourceBundle gets a reference to the given ResourceBundle and assigns it to the ResourceBundle field.
func (o *Logger) SetResourceBundle(v ResourceBundle) {
	o.ResourceBundle = &v
}

// GetResourceBundleName returns the ResourceBundleName field value if set, zero value otherwise.
func (o *Logger) GetResourceBundleName() string {
	if o == nil || IsNil(o.ResourceBundleName) {
		var ret string
		return ret
	}
	return *o.ResourceBundleName
}

// GetResourceBundleNameOk returns a tuple with the ResourceBundleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Logger) GetResourceBundleNameOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceBundleName) {
		return nil, false
	}
	return o.ResourceBundleName, true
}

// HasResourceBundleName returns a boolean if a field has been set.
func (o *Logger) HasResourceBundleName() bool {
	if o != nil && !IsNil(o.ResourceBundleName) {
		return true
	}

	return false
}

// SetResourceBundleName gets a reference to the given string and assigns it to the ResourceBundleName field.
func (o *Logger) SetResourceBundleName(v string) {
	o.ResourceBundleName = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *Logger) GetLevel() Level {
	if o == nil || IsNil(o.Level) {
		var ret Level
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Logger) GetLevelOk() (*Level, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *Logger) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given Level and assigns it to the Level field.
func (o *Logger) SetLevel(v Level) {
	o.Level = &v
}

func (o Logger) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Logger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Handlers) {
		toSerialize["handlers"] = o.Handlers
	}
	if !IsNil(o.UseParentHandlers) {
		toSerialize["useParentHandlers"] = o.UseParentHandlers
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.ResourceBundle) {
		toSerialize["resourceBundle"] = o.ResourceBundle
	}
	if !IsNil(o.ResourceBundleName) {
		toSerialize["resourceBundleName"] = o.ResourceBundleName
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	return toSerialize, nil
}

type NullableLogger struct {
	value *Logger
	isSet bool
}

func (v NullableLogger) Get() *Logger {
	return v.value
}

func (v *NullableLogger) Set(val *Logger) {
	v.value = val
	v.isSet = true
}

func (v NullableLogger) IsSet() bool {
	return v.isSet
}

func (v *NullableLogger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogger(val *Logger) *NullableLogger {
	return &NullableLogger{value: val, isSet: true}
}

func (v NullableLogger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


