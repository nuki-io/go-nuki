/*
Nuki API

The Nuki Web Api

API version: 3.13.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SmartlockAdminPinUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartlockAdminPinUpdate{}

// SmartlockAdminPinUpdate struct for SmartlockAdminPinUpdate
type SmartlockAdminPinUpdate struct {
	// The admin pin
	AdminPin int32 `json:"adminPin"`
}

type _SmartlockAdminPinUpdate SmartlockAdminPinUpdate

// NewSmartlockAdminPinUpdate instantiates a new SmartlockAdminPinUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartlockAdminPinUpdate(adminPin int32) *SmartlockAdminPinUpdate {
	this := SmartlockAdminPinUpdate{}
	this.AdminPin = adminPin
	return &this
}

// NewSmartlockAdminPinUpdateWithDefaults instantiates a new SmartlockAdminPinUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartlockAdminPinUpdateWithDefaults() *SmartlockAdminPinUpdate {
	this := SmartlockAdminPinUpdate{}
	return &this
}

// GetAdminPin returns the AdminPin field value
func (o *SmartlockAdminPinUpdate) GetAdminPin() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AdminPin
}

// GetAdminPinOk returns a tuple with the AdminPin field value
// and a boolean to check if the value has been set.
func (o *SmartlockAdminPinUpdate) GetAdminPinOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdminPin, true
}

// SetAdminPin sets field value
func (o *SmartlockAdminPinUpdate) SetAdminPin(v int32) {
	o.AdminPin = v
}

func (o SmartlockAdminPinUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartlockAdminPinUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["adminPin"] = o.AdminPin
	return toSerialize, nil
}

func (o *SmartlockAdminPinUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"adminPin",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmartlockAdminPinUpdate := _SmartlockAdminPinUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSmartlockAdminPinUpdate)

	if err != nil {
		return err
	}

	*o = SmartlockAdminPinUpdate(varSmartlockAdminPinUpdate)

	return err
}

type NullableSmartlockAdminPinUpdate struct {
	value *SmartlockAdminPinUpdate
	isSet bool
}

func (v NullableSmartlockAdminPinUpdate) Get() *SmartlockAdminPinUpdate {
	return v.value
}

func (v *NullableSmartlockAdminPinUpdate) Set(val *SmartlockAdminPinUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartlockAdminPinUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartlockAdminPinUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartlockAdminPinUpdate(val *SmartlockAdminPinUpdate) *NullableSmartlockAdminPinUpdate {
	return &NullableSmartlockAdminPinUpdate{value: val, isSet: true}
}

func (v NullableSmartlockAdminPinUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartlockAdminPinUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


