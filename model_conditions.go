/*
Nuki API

The Nuki Web Api

API version: 3.8.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the Conditions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Conditions{}

// Conditions struct for Conditions
type Conditions struct {
	Match []Tag `json:"match,omitempty"`
	ModifiedSince *time.Time `json:"modifiedSince,omitempty"`
	NoneMatch []Tag `json:"noneMatch,omitempty"`
	RangeDate *time.Time `json:"rangeDate,omitempty"`
	RangeTag *Tag `json:"rangeTag,omitempty"`
	UnmodifiedSince *time.Time `json:"unmodifiedSince,omitempty"`
}

// NewConditions instantiates a new Conditions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditions() *Conditions {
	this := Conditions{}
	return &this
}

// NewConditionsWithDefaults instantiates a new Conditions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionsWithDefaults() *Conditions {
	this := Conditions{}
	return &this
}

// GetMatch returns the Match field value if set, zero value otherwise.
func (o *Conditions) GetMatch() []Tag {
	if o == nil || IsNil(o.Match) {
		var ret []Tag
		return ret
	}
	return o.Match
}

// GetMatchOk returns a tuple with the Match field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conditions) GetMatchOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Match) {
		return nil, false
	}
	return o.Match, true
}

// HasMatch returns a boolean if a field has been set.
func (o *Conditions) HasMatch() bool {
	if o != nil && !IsNil(o.Match) {
		return true
	}

	return false
}

// SetMatch gets a reference to the given []Tag and assigns it to the Match field.
func (o *Conditions) SetMatch(v []Tag) {
	o.Match = v
}

// GetModifiedSince returns the ModifiedSince field value if set, zero value otherwise.
func (o *Conditions) GetModifiedSince() time.Time {
	if o == nil || IsNil(o.ModifiedSince) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedSince
}

// GetModifiedSinceOk returns a tuple with the ModifiedSince field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conditions) GetModifiedSinceOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ModifiedSince) {
		return nil, false
	}
	return o.ModifiedSince, true
}

// HasModifiedSince returns a boolean if a field has been set.
func (o *Conditions) HasModifiedSince() bool {
	if o != nil && !IsNil(o.ModifiedSince) {
		return true
	}

	return false
}

// SetModifiedSince gets a reference to the given time.Time and assigns it to the ModifiedSince field.
func (o *Conditions) SetModifiedSince(v time.Time) {
	o.ModifiedSince = &v
}

// GetNoneMatch returns the NoneMatch field value if set, zero value otherwise.
func (o *Conditions) GetNoneMatch() []Tag {
	if o == nil || IsNil(o.NoneMatch) {
		var ret []Tag
		return ret
	}
	return o.NoneMatch
}

// GetNoneMatchOk returns a tuple with the NoneMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conditions) GetNoneMatchOk() ([]Tag, bool) {
	if o == nil || IsNil(o.NoneMatch) {
		return nil, false
	}
	return o.NoneMatch, true
}

// HasNoneMatch returns a boolean if a field has been set.
func (o *Conditions) HasNoneMatch() bool {
	if o != nil && !IsNil(o.NoneMatch) {
		return true
	}

	return false
}

// SetNoneMatch gets a reference to the given []Tag and assigns it to the NoneMatch field.
func (o *Conditions) SetNoneMatch(v []Tag) {
	o.NoneMatch = v
}

// GetRangeDate returns the RangeDate field value if set, zero value otherwise.
func (o *Conditions) GetRangeDate() time.Time {
	if o == nil || IsNil(o.RangeDate) {
		var ret time.Time
		return ret
	}
	return *o.RangeDate
}

// GetRangeDateOk returns a tuple with the RangeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conditions) GetRangeDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RangeDate) {
		return nil, false
	}
	return o.RangeDate, true
}

// HasRangeDate returns a boolean if a field has been set.
func (o *Conditions) HasRangeDate() bool {
	if o != nil && !IsNil(o.RangeDate) {
		return true
	}

	return false
}

// SetRangeDate gets a reference to the given time.Time and assigns it to the RangeDate field.
func (o *Conditions) SetRangeDate(v time.Time) {
	o.RangeDate = &v
}

// GetRangeTag returns the RangeTag field value if set, zero value otherwise.
func (o *Conditions) GetRangeTag() Tag {
	if o == nil || IsNil(o.RangeTag) {
		var ret Tag
		return ret
	}
	return *o.RangeTag
}

// GetRangeTagOk returns a tuple with the RangeTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conditions) GetRangeTagOk() (*Tag, bool) {
	if o == nil || IsNil(o.RangeTag) {
		return nil, false
	}
	return o.RangeTag, true
}

// HasRangeTag returns a boolean if a field has been set.
func (o *Conditions) HasRangeTag() bool {
	if o != nil && !IsNil(o.RangeTag) {
		return true
	}

	return false
}

// SetRangeTag gets a reference to the given Tag and assigns it to the RangeTag field.
func (o *Conditions) SetRangeTag(v Tag) {
	o.RangeTag = &v
}

// GetUnmodifiedSince returns the UnmodifiedSince field value if set, zero value otherwise.
func (o *Conditions) GetUnmodifiedSince() time.Time {
	if o == nil || IsNil(o.UnmodifiedSince) {
		var ret time.Time
		return ret
	}
	return *o.UnmodifiedSince
}

// GetUnmodifiedSinceOk returns a tuple with the UnmodifiedSince field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conditions) GetUnmodifiedSinceOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UnmodifiedSince) {
		return nil, false
	}
	return o.UnmodifiedSince, true
}

// HasUnmodifiedSince returns a boolean if a field has been set.
func (o *Conditions) HasUnmodifiedSince() bool {
	if o != nil && !IsNil(o.UnmodifiedSince) {
		return true
	}

	return false
}

// SetUnmodifiedSince gets a reference to the given time.Time and assigns it to the UnmodifiedSince field.
func (o *Conditions) SetUnmodifiedSince(v time.Time) {
	o.UnmodifiedSince = &v
}

func (o Conditions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Conditions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Match) {
		toSerialize["match"] = o.Match
	}
	if !IsNil(o.ModifiedSince) {
		toSerialize["modifiedSince"] = o.ModifiedSince
	}
	if !IsNil(o.NoneMatch) {
		toSerialize["noneMatch"] = o.NoneMatch
	}
	if !IsNil(o.RangeDate) {
		toSerialize["rangeDate"] = o.RangeDate
	}
	if !IsNil(o.RangeTag) {
		toSerialize["rangeTag"] = o.RangeTag
	}
	if !IsNil(o.UnmodifiedSince) {
		toSerialize["unmodifiedSince"] = o.UnmodifiedSince
	}
	return toSerialize, nil
}

type NullableConditions struct {
	value *Conditions
	isSet bool
}

func (v NullableConditions) Get() *Conditions {
	return v.value
}

func (v *NullableConditions) Set(val *Conditions) {
	v.value = val
	v.isSet = true
}

func (v NullableConditions) IsSet() bool {
	return v.isSet
}

func (v *NullableConditions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditions(val *Conditions) *NullableConditions {
	return &NullableConditions{value: val, isSet: true}
}

func (v NullableConditions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


