/*
Nuki API

The Nuki Web Api

API version: 3.10.2
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the RecipientInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecipientInfo{}

// RecipientInfo struct for RecipientInfo
type RecipientInfo struct {
	Protocol *Protocol `json:"protocol,omitempty"`
	Comment *string `json:"comment,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewRecipientInfo instantiates a new RecipientInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecipientInfo() *RecipientInfo {
	this := RecipientInfo{}
	return &this
}

// NewRecipientInfoWithDefaults instantiates a new RecipientInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecipientInfoWithDefaults() *RecipientInfo {
	this := RecipientInfo{}
	return &this
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *RecipientInfo) GetProtocol() Protocol {
	if o == nil || IsNil(o.Protocol) {
		var ret Protocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientInfo) GetProtocolOk() (*Protocol, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *RecipientInfo) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given Protocol and assigns it to the Protocol field.
func (o *RecipientInfo) SetProtocol(v Protocol) {
	o.Protocol = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *RecipientInfo) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientInfo) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *RecipientInfo) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *RecipientInfo) SetComment(v string) {
	o.Comment = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RecipientInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RecipientInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RecipientInfo) SetName(v string) {
	o.Name = &v
}

func (o RecipientInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecipientInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableRecipientInfo struct {
	value *RecipientInfo
	isSet bool
}

func (v NullableRecipientInfo) Get() *RecipientInfo {
	return v.value
}

func (v *NullableRecipientInfo) Set(val *RecipientInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipientInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipientInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipientInfo(val *RecipientInfo) *NullableRecipientInfo {
	return &NullableRecipientInfo{value: val, isSet: true}
}

func (v NullableRecipientInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipientInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


