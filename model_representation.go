/*
Nuki API

The Nuki Web Api

API version: 3.13.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the Representation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Representation{}

// Representation struct for Representation
type Representation struct {
	CharacterSet *CharacterSet `json:"characterSet,omitempty"`
	Encodings []Encoding `json:"encodings,omitempty"`
	LocationRef *Reference `json:"locationRef,omitempty"`
	Languages []Language `json:"languages,omitempty"`
	MediaType *MediaType `json:"mediaType,omitempty"`
	ModificationDate *time.Time `json:"modificationDate,omitempty"`
	Tag *Tag `json:"tag,omitempty"`
	Available *bool `json:"available,omitempty"`
	Digest *Digest `json:"digest,omitempty"`
	Disposition *Disposition `json:"disposition,omitempty"`
	ExpirationDate *time.Time `json:"expirationDate,omitempty"`
	Range *Range `json:"range,omitempty"`
	Size *int64 `json:"size,omitempty"`
	Stream map[string]interface{} `json:"stream,omitempty"`
	Empty *bool `json:"empty,omitempty"`
	Transient *bool `json:"transient,omitempty"`
	Channel *ReadableByteChannel `json:"channel,omitempty"`
	Reader map[string]interface{} `json:"reader,omitempty"`
	Text *string `json:"text,omitempty"`
	Registration *SelectionRegistration `json:"registration,omitempty"`
	Selectable *bool `json:"selectable,omitempty"`
	AvailableSize *int64 `json:"availableSize,omitempty"`
}

// NewRepresentation instantiates a new Representation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepresentation() *Representation {
	this := Representation{}
	return &this
}

// NewRepresentationWithDefaults instantiates a new Representation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepresentationWithDefaults() *Representation {
	this := Representation{}
	return &this
}

// GetCharacterSet returns the CharacterSet field value if set, zero value otherwise.
func (o *Representation) GetCharacterSet() CharacterSet {
	if o == nil || IsNil(o.CharacterSet) {
		var ret CharacterSet
		return ret
	}
	return *o.CharacterSet
}

// GetCharacterSetOk returns a tuple with the CharacterSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetCharacterSetOk() (*CharacterSet, bool) {
	if o == nil || IsNil(o.CharacterSet) {
		return nil, false
	}
	return o.CharacterSet, true
}

// HasCharacterSet returns a boolean if a field has been set.
func (o *Representation) HasCharacterSet() bool {
	if o != nil && !IsNil(o.CharacterSet) {
		return true
	}

	return false
}

// SetCharacterSet gets a reference to the given CharacterSet and assigns it to the CharacterSet field.
func (o *Representation) SetCharacterSet(v CharacterSet) {
	o.CharacterSet = &v
}

// GetEncodings returns the Encodings field value if set, zero value otherwise.
func (o *Representation) GetEncodings() []Encoding {
	if o == nil || IsNil(o.Encodings) {
		var ret []Encoding
		return ret
	}
	return o.Encodings
}

// GetEncodingsOk returns a tuple with the Encodings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetEncodingsOk() ([]Encoding, bool) {
	if o == nil || IsNil(o.Encodings) {
		return nil, false
	}
	return o.Encodings, true
}

// HasEncodings returns a boolean if a field has been set.
func (o *Representation) HasEncodings() bool {
	if o != nil && !IsNil(o.Encodings) {
		return true
	}

	return false
}

// SetEncodings gets a reference to the given []Encoding and assigns it to the Encodings field.
func (o *Representation) SetEncodings(v []Encoding) {
	o.Encodings = v
}

// GetLocationRef returns the LocationRef field value if set, zero value otherwise.
func (o *Representation) GetLocationRef() Reference {
	if o == nil || IsNil(o.LocationRef) {
		var ret Reference
		return ret
	}
	return *o.LocationRef
}

// GetLocationRefOk returns a tuple with the LocationRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetLocationRefOk() (*Reference, bool) {
	if o == nil || IsNil(o.LocationRef) {
		return nil, false
	}
	return o.LocationRef, true
}

// HasLocationRef returns a boolean if a field has been set.
func (o *Representation) HasLocationRef() bool {
	if o != nil && !IsNil(o.LocationRef) {
		return true
	}

	return false
}

// SetLocationRef gets a reference to the given Reference and assigns it to the LocationRef field.
func (o *Representation) SetLocationRef(v Reference) {
	o.LocationRef = &v
}

// GetLanguages returns the Languages field value if set, zero value otherwise.
func (o *Representation) GetLanguages() []Language {
	if o == nil || IsNil(o.Languages) {
		var ret []Language
		return ret
	}
	return o.Languages
}

// GetLanguagesOk returns a tuple with the Languages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetLanguagesOk() ([]Language, bool) {
	if o == nil || IsNil(o.Languages) {
		return nil, false
	}
	return o.Languages, true
}

// HasLanguages returns a boolean if a field has been set.
func (o *Representation) HasLanguages() bool {
	if o != nil && !IsNil(o.Languages) {
		return true
	}

	return false
}

// SetLanguages gets a reference to the given []Language and assigns it to the Languages field.
func (o *Representation) SetLanguages(v []Language) {
	o.Languages = v
}

// GetMediaType returns the MediaType field value if set, zero value otherwise.
func (o *Representation) GetMediaType() MediaType {
	if o == nil || IsNil(o.MediaType) {
		var ret MediaType
		return ret
	}
	return *o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetMediaTypeOk() (*MediaType, bool) {
	if o == nil || IsNil(o.MediaType) {
		return nil, false
	}
	return o.MediaType, true
}

// HasMediaType returns a boolean if a field has been set.
func (o *Representation) HasMediaType() bool {
	if o != nil && !IsNil(o.MediaType) {
		return true
	}

	return false
}

// SetMediaType gets a reference to the given MediaType and assigns it to the MediaType field.
func (o *Representation) SetMediaType(v MediaType) {
	o.MediaType = &v
}

// GetModificationDate returns the ModificationDate field value if set, zero value otherwise.
func (o *Representation) GetModificationDate() time.Time {
	if o == nil || IsNil(o.ModificationDate) {
		var ret time.Time
		return ret
	}
	return *o.ModificationDate
}

// GetModificationDateOk returns a tuple with the ModificationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetModificationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ModificationDate) {
		return nil, false
	}
	return o.ModificationDate, true
}

// HasModificationDate returns a boolean if a field has been set.
func (o *Representation) HasModificationDate() bool {
	if o != nil && !IsNil(o.ModificationDate) {
		return true
	}

	return false
}

// SetModificationDate gets a reference to the given time.Time and assigns it to the ModificationDate field.
func (o *Representation) SetModificationDate(v time.Time) {
	o.ModificationDate = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *Representation) GetTag() Tag {
	if o == nil || IsNil(o.Tag) {
		var ret Tag
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetTagOk() (*Tag, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *Representation) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given Tag and assigns it to the Tag field.
func (o *Representation) SetTag(v Tag) {
	o.Tag = &v
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *Representation) GetAvailable() bool {
	if o == nil || IsNil(o.Available) {
		var ret bool
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *Representation) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given bool and assigns it to the Available field.
func (o *Representation) SetAvailable(v bool) {
	o.Available = &v
}

// GetDigest returns the Digest field value if set, zero value otherwise.
func (o *Representation) GetDigest() Digest {
	if o == nil || IsNil(o.Digest) {
		var ret Digest
		return ret
	}
	return *o.Digest
}

// GetDigestOk returns a tuple with the Digest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetDigestOk() (*Digest, bool) {
	if o == nil || IsNil(o.Digest) {
		return nil, false
	}
	return o.Digest, true
}

// HasDigest returns a boolean if a field has been set.
func (o *Representation) HasDigest() bool {
	if o != nil && !IsNil(o.Digest) {
		return true
	}

	return false
}

// SetDigest gets a reference to the given Digest and assigns it to the Digest field.
func (o *Representation) SetDigest(v Digest) {
	o.Digest = &v
}

// GetDisposition returns the Disposition field value if set, zero value otherwise.
func (o *Representation) GetDisposition() Disposition {
	if o == nil || IsNil(o.Disposition) {
		var ret Disposition
		return ret
	}
	return *o.Disposition
}

// GetDispositionOk returns a tuple with the Disposition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetDispositionOk() (*Disposition, bool) {
	if o == nil || IsNil(o.Disposition) {
		return nil, false
	}
	return o.Disposition, true
}

// HasDisposition returns a boolean if a field has been set.
func (o *Representation) HasDisposition() bool {
	if o != nil && !IsNil(o.Disposition) {
		return true
	}

	return false
}

// SetDisposition gets a reference to the given Disposition and assigns it to the Disposition field.
func (o *Representation) SetDisposition(v Disposition) {
	o.Disposition = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *Representation) GetExpirationDate() time.Time {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *Representation) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *Representation) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *Representation) GetRange() Range {
	if o == nil || IsNil(o.Range) {
		var ret Range
		return ret
	}
	return *o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.Range) {
		return nil, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *Representation) HasRange() bool {
	if o != nil && !IsNil(o.Range) {
		return true
	}

	return false
}

// SetRange gets a reference to the given Range and assigns it to the Range field.
func (o *Representation) SetRange(v Range) {
	o.Range = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Representation) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Representation) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *Representation) SetSize(v int64) {
	o.Size = &v
}

// GetStream returns the Stream field value if set, zero value otherwise.
func (o *Representation) GetStream() map[string]interface{} {
	if o == nil || IsNil(o.Stream) {
		var ret map[string]interface{}
		return ret
	}
	return o.Stream
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetStreamOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Stream) {
		return map[string]interface{}{}, false
	}
	return o.Stream, true
}

// HasStream returns a boolean if a field has been set.
func (o *Representation) HasStream() bool {
	if o != nil && !IsNil(o.Stream) {
		return true
	}

	return false
}

// SetStream gets a reference to the given map[string]interface{} and assigns it to the Stream field.
func (o *Representation) SetStream(v map[string]interface{}) {
	o.Stream = v
}

// GetEmpty returns the Empty field value if set, zero value otherwise.
func (o *Representation) GetEmpty() bool {
	if o == nil || IsNil(o.Empty) {
		var ret bool
		return ret
	}
	return *o.Empty
}

// GetEmptyOk returns a tuple with the Empty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetEmptyOk() (*bool, bool) {
	if o == nil || IsNil(o.Empty) {
		return nil, false
	}
	return o.Empty, true
}

// HasEmpty returns a boolean if a field has been set.
func (o *Representation) HasEmpty() bool {
	if o != nil && !IsNil(o.Empty) {
		return true
	}

	return false
}

// SetEmpty gets a reference to the given bool and assigns it to the Empty field.
func (o *Representation) SetEmpty(v bool) {
	o.Empty = &v
}

// GetTransient returns the Transient field value if set, zero value otherwise.
func (o *Representation) GetTransient() bool {
	if o == nil || IsNil(o.Transient) {
		var ret bool
		return ret
	}
	return *o.Transient
}

// GetTransientOk returns a tuple with the Transient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetTransientOk() (*bool, bool) {
	if o == nil || IsNil(o.Transient) {
		return nil, false
	}
	return o.Transient, true
}

// HasTransient returns a boolean if a field has been set.
func (o *Representation) HasTransient() bool {
	if o != nil && !IsNil(o.Transient) {
		return true
	}

	return false
}

// SetTransient gets a reference to the given bool and assigns it to the Transient field.
func (o *Representation) SetTransient(v bool) {
	o.Transient = &v
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *Representation) GetChannel() ReadableByteChannel {
	if o == nil || IsNil(o.Channel) {
		var ret ReadableByteChannel
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetChannelOk() (*ReadableByteChannel, bool) {
	if o == nil || IsNil(o.Channel) {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *Representation) HasChannel() bool {
	if o != nil && !IsNil(o.Channel) {
		return true
	}

	return false
}

// SetChannel gets a reference to the given ReadableByteChannel and assigns it to the Channel field.
func (o *Representation) SetChannel(v ReadableByteChannel) {
	o.Channel = &v
}

// GetReader returns the Reader field value if set, zero value otherwise.
func (o *Representation) GetReader() map[string]interface{} {
	if o == nil || IsNil(o.Reader) {
		var ret map[string]interface{}
		return ret
	}
	return o.Reader
}

// GetReaderOk returns a tuple with the Reader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetReaderOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Reader) {
		return map[string]interface{}{}, false
	}
	return o.Reader, true
}

// HasReader returns a boolean if a field has been set.
func (o *Representation) HasReader() bool {
	if o != nil && !IsNil(o.Reader) {
		return true
	}

	return false
}

// SetReader gets a reference to the given map[string]interface{} and assigns it to the Reader field.
func (o *Representation) SetReader(v map[string]interface{}) {
	o.Reader = v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Representation) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Representation) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *Representation) SetText(v string) {
	o.Text = &v
}

// GetRegistration returns the Registration field value if set, zero value otherwise.
func (o *Representation) GetRegistration() SelectionRegistration {
	if o == nil || IsNil(o.Registration) {
		var ret SelectionRegistration
		return ret
	}
	return *o.Registration
}

// GetRegistrationOk returns a tuple with the Registration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetRegistrationOk() (*SelectionRegistration, bool) {
	if o == nil || IsNil(o.Registration) {
		return nil, false
	}
	return o.Registration, true
}

// HasRegistration returns a boolean if a field has been set.
func (o *Representation) HasRegistration() bool {
	if o != nil && !IsNil(o.Registration) {
		return true
	}

	return false
}

// SetRegistration gets a reference to the given SelectionRegistration and assigns it to the Registration field.
func (o *Representation) SetRegistration(v SelectionRegistration) {
	o.Registration = &v
}

// GetSelectable returns the Selectable field value if set, zero value otherwise.
func (o *Representation) GetSelectable() bool {
	if o == nil || IsNil(o.Selectable) {
		var ret bool
		return ret
	}
	return *o.Selectable
}

// GetSelectableOk returns a tuple with the Selectable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetSelectableOk() (*bool, bool) {
	if o == nil || IsNil(o.Selectable) {
		return nil, false
	}
	return o.Selectable, true
}

// HasSelectable returns a boolean if a field has been set.
func (o *Representation) HasSelectable() bool {
	if o != nil && !IsNil(o.Selectable) {
		return true
	}

	return false
}

// SetSelectable gets a reference to the given bool and assigns it to the Selectable field.
func (o *Representation) SetSelectable(v bool) {
	o.Selectable = &v
}

// GetAvailableSize returns the AvailableSize field value if set, zero value otherwise.
func (o *Representation) GetAvailableSize() int64 {
	if o == nil || IsNil(o.AvailableSize) {
		var ret int64
		return ret
	}
	return *o.AvailableSize
}

// GetAvailableSizeOk returns a tuple with the AvailableSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Representation) GetAvailableSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.AvailableSize) {
		return nil, false
	}
	return o.AvailableSize, true
}

// HasAvailableSize returns a boolean if a field has been set.
func (o *Representation) HasAvailableSize() bool {
	if o != nil && !IsNil(o.AvailableSize) {
		return true
	}

	return false
}

// SetAvailableSize gets a reference to the given int64 and assigns it to the AvailableSize field.
func (o *Representation) SetAvailableSize(v int64) {
	o.AvailableSize = &v
}

func (o Representation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Representation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CharacterSet) {
		toSerialize["characterSet"] = o.CharacterSet
	}
	if !IsNil(o.Encodings) {
		toSerialize["encodings"] = o.Encodings
	}
	if !IsNil(o.LocationRef) {
		toSerialize["locationRef"] = o.LocationRef
	}
	if !IsNil(o.Languages) {
		toSerialize["languages"] = o.Languages
	}
	if !IsNil(o.MediaType) {
		toSerialize["mediaType"] = o.MediaType
	}
	if !IsNil(o.ModificationDate) {
		toSerialize["modificationDate"] = o.ModificationDate
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	if !IsNil(o.Digest) {
		toSerialize["digest"] = o.Digest
	}
	if !IsNil(o.Disposition) {
		toSerialize["disposition"] = o.Disposition
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.Range) {
		toSerialize["range"] = o.Range
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Stream) {
		toSerialize["stream"] = o.Stream
	}
	if !IsNil(o.Empty) {
		toSerialize["empty"] = o.Empty
	}
	if !IsNil(o.Transient) {
		toSerialize["transient"] = o.Transient
	}
	if !IsNil(o.Channel) {
		toSerialize["channel"] = o.Channel
	}
	if !IsNil(o.Reader) {
		toSerialize["reader"] = o.Reader
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Registration) {
		toSerialize["registration"] = o.Registration
	}
	if !IsNil(o.Selectable) {
		toSerialize["selectable"] = o.Selectable
	}
	if !IsNil(o.AvailableSize) {
		toSerialize["availableSize"] = o.AvailableSize
	}
	return toSerialize, nil
}

type NullableRepresentation struct {
	value *Representation
	isSet bool
}

func (v NullableRepresentation) Get() *Representation {
	return v.value
}

func (v *NullableRepresentation) Set(val *Representation) {
	v.value = val
	v.isSet = true
}

func (v NullableRepresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableRepresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepresentation(val *Representation) *NullableRepresentation {
	return &NullableRepresentation{value: val, isSet: true}
}

func (v NullableRepresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


