/*
Nuki API

The Nuki Web Api

API version: 3.8.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the SmartlockAuthMultiUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartlockAuthMultiUpdate{}

// SmartlockAuthMultiUpdate struct for SmartlockAuthMultiUpdate
type SmartlockAuthMultiUpdate struct {
	// The name of the authorization (max 32 chars)
	Name string `json:"name"`
	// The allowed from date
	AllowedFromDate *time.Time `json:"allowedFromDate,omitempty"`
	// The allowed until date
	AllowedUntilDate *time.Time `json:"allowedUntilDate,omitempty"`
	// The allowed weekdays bitmask: 64 .. monday, 32 .. tuesday, 16 .. wednesday, 8 .. thursday, 4 .. friday, 2 .. saturday, 1 .. sunday
	AllowedWeekDays *int32 `json:"allowedWeekDays,omitempty"`
	// The allowed from time (in minutes from midnight)
	AllowedFromTime *int32 `json:"allowedFromTime,omitempty"`
	// The allowed until time (in minutes from midnight)
	AllowedUntilTime *int32 `json:"allowedUntilTime,omitempty"`
	// The id of the linked account user
	AccountUserId *int32 `json:"accountUserId,omitempty"`
	// True if the auth is enabled
	Enabled *bool `json:"enabled,omitempty"`
	// True if the auth has remote access
	RemoteAllowed *bool `json:"remoteAllowed,omitempty"`
	// The code of the keypad authorization (only for keypad)
	Code *int32 `json:"code,omitempty"`
	// The unique id for the smartlock authorization
	Id string `json:"id"`
}

type _SmartlockAuthMultiUpdate SmartlockAuthMultiUpdate

// NewSmartlockAuthMultiUpdate instantiates a new SmartlockAuthMultiUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartlockAuthMultiUpdate(name string, id string) *SmartlockAuthMultiUpdate {
	this := SmartlockAuthMultiUpdate{}
	this.Name = name
	this.Id = id
	return &this
}

// NewSmartlockAuthMultiUpdateWithDefaults instantiates a new SmartlockAuthMultiUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartlockAuthMultiUpdateWithDefaults() *SmartlockAuthMultiUpdate {
	this := SmartlockAuthMultiUpdate{}
	return &this
}

// GetName returns the Name field value
func (o *SmartlockAuthMultiUpdate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SmartlockAuthMultiUpdate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SmartlockAuthMultiUpdate) SetName(v string) {
	o.Name = v
}

// GetAllowedFromDate returns the AllowedFromDate field value if set, zero value otherwise.
func (o *SmartlockAuthMultiUpdate) GetAllowedFromDate() time.Time {
	if o == nil || IsNil(o.AllowedFromDate) {
		var ret time.Time
		return ret
	}
	return *o.AllowedFromDate
}

// GetAllowedFromDateOk returns a tuple with the AllowedFromDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuthMultiUpdate) GetAllowedFromDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AllowedFromDate) {
		return nil, false
	}
	return o.AllowedFromDate, true
}

// HasAllowedFromDate returns a boolean if a field has been set.
func (o *SmartlockAuthMultiUpdate) HasAllowedFromDate() bool {
	if o != nil && !IsNil(o.AllowedFromDate) {
		return true
	}

	return false
}

// SetAllowedFromDate gets a reference to the given time.Time and assigns it to the AllowedFromDate field.
func (o *SmartlockAuthMultiUpdate) SetAllowedFromDate(v time.Time) {
	o.AllowedFromDate = &v
}

// GetAllowedUntilDate returns the AllowedUntilDate field value if set, zero value otherwise.
func (o *SmartlockAuthMultiUpdate) GetAllowedUntilDate() time.Time {
	if o == nil || IsNil(o.AllowedUntilDate) {
		var ret time.Time
		return ret
	}
	return *o.AllowedUntilDate
}

// GetAllowedUntilDateOk returns a tuple with the AllowedUntilDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuthMultiUpdate) GetAllowedUntilDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AllowedUntilDate) {
		return nil, false
	}
	return o.AllowedUntilDate, true
}

// HasAllowedUntilDate returns a boolean if a field has been set.
func (o *SmartlockAuthMultiUpdate) HasAllowedUntilDate() bool {
	if o != nil && !IsNil(o.AllowedUntilDate) {
		return true
	}

	return false
}

// SetAllowedUntilDate gets a reference to the given time.Time and assigns it to the AllowedUntilDate field.
func (o *SmartlockAuthMultiUpdate) SetAllowedUntilDate(v time.Time) {
	o.AllowedUntilDate = &v
}

// GetAllowedWeekDays returns the AllowedWeekDays field value if set, zero value otherwise.
func (o *SmartlockAuthMultiUpdate) GetAllowedWeekDays() int32 {
	if o == nil || IsNil(o.AllowedWeekDays) {
		var ret int32
		return ret
	}
	return *o.AllowedWeekDays
}

// GetAllowedWeekDaysOk returns a tuple with the AllowedWeekDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuthMultiUpdate) GetAllowedWeekDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.AllowedWeekDays) {
		return nil, false
	}
	return o.AllowedWeekDays, true
}

// HasAllowedWeekDays returns a boolean if a field has been set.
func (o *SmartlockAuthMultiUpdate) HasAllowedWeekDays() bool {
	if o != nil && !IsNil(o.AllowedWeekDays) {
		return true
	}

	return false
}

// SetAllowedWeekDays gets a reference to the given int32 and assigns it to the AllowedWeekDays field.
func (o *SmartlockAuthMultiUpdate) SetAllowedWeekDays(v int32) {
	o.AllowedWeekDays = &v
}

// GetAllowedFromTime returns the AllowedFromTime field value if set, zero value otherwise.
func (o *SmartlockAuthMultiUpdate) GetAllowedFromTime() int32 {
	if o == nil || IsNil(o.AllowedFromTime) {
		var ret int32
		return ret
	}
	return *o.AllowedFromTime
}

// GetAllowedFromTimeOk returns a tuple with the AllowedFromTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuthMultiUpdate) GetAllowedFromTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.AllowedFromTime) {
		return nil, false
	}
	return o.AllowedFromTime, true
}

// HasAllowedFromTime returns a boolean if a field has been set.
func (o *SmartlockAuthMultiUpdate) HasAllowedFromTime() bool {
	if o != nil && !IsNil(o.AllowedFromTime) {
		return true
	}

	return false
}

// SetAllowedFromTime gets a reference to the given int32 and assigns it to the AllowedFromTime field.
func (o *SmartlockAuthMultiUpdate) SetAllowedFromTime(v int32) {
	o.AllowedFromTime = &v
}

// GetAllowedUntilTime returns the AllowedUntilTime field value if set, zero value otherwise.
func (o *SmartlockAuthMultiUpdate) GetAllowedUntilTime() int32 {
	if o == nil || IsNil(o.AllowedUntilTime) {
		var ret int32
		return ret
	}
	return *o.AllowedUntilTime
}

// GetAllowedUntilTimeOk returns a tuple with the AllowedUntilTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuthMultiUpdate) GetAllowedUntilTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.AllowedUntilTime) {
		return nil, false
	}
	return o.AllowedUntilTime, true
}

// HasAllowedUntilTime returns a boolean if a field has been set.
func (o *SmartlockAuthMultiUpdate) HasAllowedUntilTime() bool {
	if o != nil && !IsNil(o.AllowedUntilTime) {
		return true
	}

	return false
}

// SetAllowedUntilTime gets a reference to the given int32 and assigns it to the AllowedUntilTime field.
func (o *SmartlockAuthMultiUpdate) SetAllowedUntilTime(v int32) {
	o.AllowedUntilTime = &v
}

// GetAccountUserId returns the AccountUserId field value if set, zero value otherwise.
func (o *SmartlockAuthMultiUpdate) GetAccountUserId() int32 {
	if o == nil || IsNil(o.AccountUserId) {
		var ret int32
		return ret
	}
	return *o.AccountUserId
}

// GetAccountUserIdOk returns a tuple with the AccountUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuthMultiUpdate) GetAccountUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AccountUserId) {
		return nil, false
	}
	return o.AccountUserId, true
}

// HasAccountUserId returns a boolean if a field has been set.
func (o *SmartlockAuthMultiUpdate) HasAccountUserId() bool {
	if o != nil && !IsNil(o.AccountUserId) {
		return true
	}

	return false
}

// SetAccountUserId gets a reference to the given int32 and assigns it to the AccountUserId field.
func (o *SmartlockAuthMultiUpdate) SetAccountUserId(v int32) {
	o.AccountUserId = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SmartlockAuthMultiUpdate) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuthMultiUpdate) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SmartlockAuthMultiUpdate) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SmartlockAuthMultiUpdate) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRemoteAllowed returns the RemoteAllowed field value if set, zero value otherwise.
func (o *SmartlockAuthMultiUpdate) GetRemoteAllowed() bool {
	if o == nil || IsNil(o.RemoteAllowed) {
		var ret bool
		return ret
	}
	return *o.RemoteAllowed
}

// GetRemoteAllowedOk returns a tuple with the RemoteAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuthMultiUpdate) GetRemoteAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.RemoteAllowed) {
		return nil, false
	}
	return o.RemoteAllowed, true
}

// HasRemoteAllowed returns a boolean if a field has been set.
func (o *SmartlockAuthMultiUpdate) HasRemoteAllowed() bool {
	if o != nil && !IsNil(o.RemoteAllowed) {
		return true
	}

	return false
}

// SetRemoteAllowed gets a reference to the given bool and assigns it to the RemoteAllowed field.
func (o *SmartlockAuthMultiUpdate) SetRemoteAllowed(v bool) {
	o.RemoteAllowed = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *SmartlockAuthMultiUpdate) GetCode() int32 {
	if o == nil || IsNil(o.Code) {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuthMultiUpdate) GetCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *SmartlockAuthMultiUpdate) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *SmartlockAuthMultiUpdate) SetCode(v int32) {
	o.Code = &v
}

// GetId returns the Id field value
func (o *SmartlockAuthMultiUpdate) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SmartlockAuthMultiUpdate) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SmartlockAuthMultiUpdate) SetId(v string) {
	o.Id = v
}

func (o SmartlockAuthMultiUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartlockAuthMultiUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.AllowedFromDate) {
		toSerialize["allowedFromDate"] = o.AllowedFromDate
	}
	if !IsNil(o.AllowedUntilDate) {
		toSerialize["allowedUntilDate"] = o.AllowedUntilDate
	}
	if !IsNil(o.AllowedWeekDays) {
		toSerialize["allowedWeekDays"] = o.AllowedWeekDays
	}
	if !IsNil(o.AllowedFromTime) {
		toSerialize["allowedFromTime"] = o.AllowedFromTime
	}
	if !IsNil(o.AllowedUntilTime) {
		toSerialize["allowedUntilTime"] = o.AllowedUntilTime
	}
	if !IsNil(o.AccountUserId) {
		toSerialize["accountUserId"] = o.AccountUserId
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.RemoteAllowed) {
		toSerialize["remoteAllowed"] = o.RemoteAllowed
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *SmartlockAuthMultiUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmartlockAuthMultiUpdate := _SmartlockAuthMultiUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSmartlockAuthMultiUpdate)

	if err != nil {
		return err
	}

	*o = SmartlockAuthMultiUpdate(varSmartlockAuthMultiUpdate)

	return err
}

type NullableSmartlockAuthMultiUpdate struct {
	value *SmartlockAuthMultiUpdate
	isSet bool
}

func (v NullableSmartlockAuthMultiUpdate) Get() *SmartlockAuthMultiUpdate {
	return v.value
}

func (v *NullableSmartlockAuthMultiUpdate) Set(val *SmartlockAuthMultiUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartlockAuthMultiUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartlockAuthMultiUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartlockAuthMultiUpdate(val *SmartlockAuthMultiUpdate) *NullableSmartlockAuthMultiUpdate {
	return &NullableSmartlockAuthMultiUpdate{value: val, isSet: true}
}

func (v NullableSmartlockAuthMultiUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartlockAuthMultiUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


