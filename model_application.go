/*
Nuki API

The Nuki Web Api

API version: 4.0.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Application type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Application{}

// Application struct for Application
type Application struct {
	Author *string `json:"author,omitempty"`
	Context *Context `json:"context,omitempty"`
	Description *string `json:"description,omitempty"`
	Name *string `json:"name,omitempty"`
	Owner *string `json:"owner,omitempty"`
	Started *bool `json:"started,omitempty"`
	Debugging *bool `json:"debugging,omitempty"`
	InboundRoot *Restlet `json:"inboundRoot,omitempty"`
	OutboundRoot *Restlet `json:"outboundRoot,omitempty"`
	Roles []Role `json:"roles,omitempty"`
	Services []Service `json:"services,omitempty"`
	StatusService *StatusService `json:"statusService,omitempty"`
	ConnegService *ConnegService `json:"connegService,omitempty"`
	MetadataService *MetadataService `json:"metadataService,omitempty"`
	ConverterService *ConverterService `json:"converterService,omitempty"`
	RangeService *RangeService `json:"rangeService,omitempty"`
	TaskService *TaskService `json:"taskService,omitempty"`
	TunnelService *TunnelService `json:"tunnelService,omitempty"`
	ConnectorService *ConnectorService `json:"connectorService,omitempty"`
	DecoderService *DecoderService `json:"decoderService,omitempty"`
	EncoderService *EncoderService `json:"encoderService,omitempty"`
	Logger *Logger `json:"logger,omitempty"`
	Stopped *bool `json:"stopped,omitempty"`
	Application *Application `json:"application,omitempty"`
}

// NewApplication instantiates a new Application object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplication() *Application {
	this := Application{}
	return &this
}

// NewApplicationWithDefaults instantiates a new Application object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationWithDefaults() *Application {
	this := Application{}
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *Application) GetAuthor() string {
	if o == nil || IsNil(o.Author) {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *Application) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *Application) SetAuthor(v string) {
	o.Author = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *Application) GetContext() Context {
	if o == nil || IsNil(o.Context) {
		var ret Context
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetContextOk() (*Context, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *Application) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given Context and assigns it to the Context field.
func (o *Application) SetContext(v Context) {
	o.Context = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Application) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Application) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Application) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Application) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Application) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Application) SetName(v string) {
	o.Name = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Application) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Application) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *Application) SetOwner(v string) {
	o.Owner = &v
}

// GetStarted returns the Started field value if set, zero value otherwise.
func (o *Application) GetStarted() bool {
	if o == nil || IsNil(o.Started) {
		var ret bool
		return ret
	}
	return *o.Started
}

// GetStartedOk returns a tuple with the Started field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetStartedOk() (*bool, bool) {
	if o == nil || IsNil(o.Started) {
		return nil, false
	}
	return o.Started, true
}

// HasStarted returns a boolean if a field has been set.
func (o *Application) HasStarted() bool {
	if o != nil && !IsNil(o.Started) {
		return true
	}

	return false
}

// SetStarted gets a reference to the given bool and assigns it to the Started field.
func (o *Application) SetStarted(v bool) {
	o.Started = &v
}

// GetDebugging returns the Debugging field value if set, zero value otherwise.
func (o *Application) GetDebugging() bool {
	if o == nil || IsNil(o.Debugging) {
		var ret bool
		return ret
	}
	return *o.Debugging
}

// GetDebuggingOk returns a tuple with the Debugging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetDebuggingOk() (*bool, bool) {
	if o == nil || IsNil(o.Debugging) {
		return nil, false
	}
	return o.Debugging, true
}

// HasDebugging returns a boolean if a field has been set.
func (o *Application) HasDebugging() bool {
	if o != nil && !IsNil(o.Debugging) {
		return true
	}

	return false
}

// SetDebugging gets a reference to the given bool and assigns it to the Debugging field.
func (o *Application) SetDebugging(v bool) {
	o.Debugging = &v
}

// GetInboundRoot returns the InboundRoot field value if set, zero value otherwise.
func (o *Application) GetInboundRoot() Restlet {
	if o == nil || IsNil(o.InboundRoot) {
		var ret Restlet
		return ret
	}
	return *o.InboundRoot
}

// GetInboundRootOk returns a tuple with the InboundRoot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetInboundRootOk() (*Restlet, bool) {
	if o == nil || IsNil(o.InboundRoot) {
		return nil, false
	}
	return o.InboundRoot, true
}

// HasInboundRoot returns a boolean if a field has been set.
func (o *Application) HasInboundRoot() bool {
	if o != nil && !IsNil(o.InboundRoot) {
		return true
	}

	return false
}

// SetInboundRoot gets a reference to the given Restlet and assigns it to the InboundRoot field.
func (o *Application) SetInboundRoot(v Restlet) {
	o.InboundRoot = &v
}

// GetOutboundRoot returns the OutboundRoot field value if set, zero value otherwise.
func (o *Application) GetOutboundRoot() Restlet {
	if o == nil || IsNil(o.OutboundRoot) {
		var ret Restlet
		return ret
	}
	return *o.OutboundRoot
}

// GetOutboundRootOk returns a tuple with the OutboundRoot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetOutboundRootOk() (*Restlet, bool) {
	if o == nil || IsNil(o.OutboundRoot) {
		return nil, false
	}
	return o.OutboundRoot, true
}

// HasOutboundRoot returns a boolean if a field has been set.
func (o *Application) HasOutboundRoot() bool {
	if o != nil && !IsNil(o.OutboundRoot) {
		return true
	}

	return false
}

// SetOutboundRoot gets a reference to the given Restlet and assigns it to the OutboundRoot field.
func (o *Application) SetOutboundRoot(v Restlet) {
	o.OutboundRoot = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *Application) GetRoles() []Role {
	if o == nil || IsNil(o.Roles) {
		var ret []Role
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetRolesOk() ([]Role, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *Application) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []Role and assigns it to the Roles field.
func (o *Application) SetRoles(v []Role) {
	o.Roles = v
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *Application) GetServices() []Service {
	if o == nil || IsNil(o.Services) {
		var ret []Service
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetServicesOk() ([]Service, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *Application) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []Service and assigns it to the Services field.
func (o *Application) SetServices(v []Service) {
	o.Services = v
}

// GetStatusService returns the StatusService field value if set, zero value otherwise.
func (o *Application) GetStatusService() StatusService {
	if o == nil || IsNil(o.StatusService) {
		var ret StatusService
		return ret
	}
	return *o.StatusService
}

// GetStatusServiceOk returns a tuple with the StatusService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetStatusServiceOk() (*StatusService, bool) {
	if o == nil || IsNil(o.StatusService) {
		return nil, false
	}
	return o.StatusService, true
}

// HasStatusService returns a boolean if a field has been set.
func (o *Application) HasStatusService() bool {
	if o != nil && !IsNil(o.StatusService) {
		return true
	}

	return false
}

// SetStatusService gets a reference to the given StatusService and assigns it to the StatusService field.
func (o *Application) SetStatusService(v StatusService) {
	o.StatusService = &v
}

// GetConnegService returns the ConnegService field value if set, zero value otherwise.
func (o *Application) GetConnegService() ConnegService {
	if o == nil || IsNil(o.ConnegService) {
		var ret ConnegService
		return ret
	}
	return *o.ConnegService
}

// GetConnegServiceOk returns a tuple with the ConnegService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetConnegServiceOk() (*ConnegService, bool) {
	if o == nil || IsNil(o.ConnegService) {
		return nil, false
	}
	return o.ConnegService, true
}

// HasConnegService returns a boolean if a field has been set.
func (o *Application) HasConnegService() bool {
	if o != nil && !IsNil(o.ConnegService) {
		return true
	}

	return false
}

// SetConnegService gets a reference to the given ConnegService and assigns it to the ConnegService field.
func (o *Application) SetConnegService(v ConnegService) {
	o.ConnegService = &v
}

// GetMetadataService returns the MetadataService field value if set, zero value otherwise.
func (o *Application) GetMetadataService() MetadataService {
	if o == nil || IsNil(o.MetadataService) {
		var ret MetadataService
		return ret
	}
	return *o.MetadataService
}

// GetMetadataServiceOk returns a tuple with the MetadataService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetMetadataServiceOk() (*MetadataService, bool) {
	if o == nil || IsNil(o.MetadataService) {
		return nil, false
	}
	return o.MetadataService, true
}

// HasMetadataService returns a boolean if a field has been set.
func (o *Application) HasMetadataService() bool {
	if o != nil && !IsNil(o.MetadataService) {
		return true
	}

	return false
}

// SetMetadataService gets a reference to the given MetadataService and assigns it to the MetadataService field.
func (o *Application) SetMetadataService(v MetadataService) {
	o.MetadataService = &v
}

// GetConverterService returns the ConverterService field value if set, zero value otherwise.
func (o *Application) GetConverterService() ConverterService {
	if o == nil || IsNil(o.ConverterService) {
		var ret ConverterService
		return ret
	}
	return *o.ConverterService
}

// GetConverterServiceOk returns a tuple with the ConverterService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetConverterServiceOk() (*ConverterService, bool) {
	if o == nil || IsNil(o.ConverterService) {
		return nil, false
	}
	return o.ConverterService, true
}

// HasConverterService returns a boolean if a field has been set.
func (o *Application) HasConverterService() bool {
	if o != nil && !IsNil(o.ConverterService) {
		return true
	}

	return false
}

// SetConverterService gets a reference to the given ConverterService and assigns it to the ConverterService field.
func (o *Application) SetConverterService(v ConverterService) {
	o.ConverterService = &v
}

// GetRangeService returns the RangeService field value if set, zero value otherwise.
func (o *Application) GetRangeService() RangeService {
	if o == nil || IsNil(o.RangeService) {
		var ret RangeService
		return ret
	}
	return *o.RangeService
}

// GetRangeServiceOk returns a tuple with the RangeService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetRangeServiceOk() (*RangeService, bool) {
	if o == nil || IsNil(o.RangeService) {
		return nil, false
	}
	return o.RangeService, true
}

// HasRangeService returns a boolean if a field has been set.
func (o *Application) HasRangeService() bool {
	if o != nil && !IsNil(o.RangeService) {
		return true
	}

	return false
}

// SetRangeService gets a reference to the given RangeService and assigns it to the RangeService field.
func (o *Application) SetRangeService(v RangeService) {
	o.RangeService = &v
}

// GetTaskService returns the TaskService field value if set, zero value otherwise.
func (o *Application) GetTaskService() TaskService {
	if o == nil || IsNil(o.TaskService) {
		var ret TaskService
		return ret
	}
	return *o.TaskService
}

// GetTaskServiceOk returns a tuple with the TaskService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetTaskServiceOk() (*TaskService, bool) {
	if o == nil || IsNil(o.TaskService) {
		return nil, false
	}
	return o.TaskService, true
}

// HasTaskService returns a boolean if a field has been set.
func (o *Application) HasTaskService() bool {
	if o != nil && !IsNil(o.TaskService) {
		return true
	}

	return false
}

// SetTaskService gets a reference to the given TaskService and assigns it to the TaskService field.
func (o *Application) SetTaskService(v TaskService) {
	o.TaskService = &v
}

// GetTunnelService returns the TunnelService field value if set, zero value otherwise.
func (o *Application) GetTunnelService() TunnelService {
	if o == nil || IsNil(o.TunnelService) {
		var ret TunnelService
		return ret
	}
	return *o.TunnelService
}

// GetTunnelServiceOk returns a tuple with the TunnelService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetTunnelServiceOk() (*TunnelService, bool) {
	if o == nil || IsNil(o.TunnelService) {
		return nil, false
	}
	return o.TunnelService, true
}

// HasTunnelService returns a boolean if a field has been set.
func (o *Application) HasTunnelService() bool {
	if o != nil && !IsNil(o.TunnelService) {
		return true
	}

	return false
}

// SetTunnelService gets a reference to the given TunnelService and assigns it to the TunnelService field.
func (o *Application) SetTunnelService(v TunnelService) {
	o.TunnelService = &v
}

// GetConnectorService returns the ConnectorService field value if set, zero value otherwise.
func (o *Application) GetConnectorService() ConnectorService {
	if o == nil || IsNil(o.ConnectorService) {
		var ret ConnectorService
		return ret
	}
	return *o.ConnectorService
}

// GetConnectorServiceOk returns a tuple with the ConnectorService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetConnectorServiceOk() (*ConnectorService, bool) {
	if o == nil || IsNil(o.ConnectorService) {
		return nil, false
	}
	return o.ConnectorService, true
}

// HasConnectorService returns a boolean if a field has been set.
func (o *Application) HasConnectorService() bool {
	if o != nil && !IsNil(o.ConnectorService) {
		return true
	}

	return false
}

// SetConnectorService gets a reference to the given ConnectorService and assigns it to the ConnectorService field.
func (o *Application) SetConnectorService(v ConnectorService) {
	o.ConnectorService = &v
}

// GetDecoderService returns the DecoderService field value if set, zero value otherwise.
func (o *Application) GetDecoderService() DecoderService {
	if o == nil || IsNil(o.DecoderService) {
		var ret DecoderService
		return ret
	}
	return *o.DecoderService
}

// GetDecoderServiceOk returns a tuple with the DecoderService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetDecoderServiceOk() (*DecoderService, bool) {
	if o == nil || IsNil(o.DecoderService) {
		return nil, false
	}
	return o.DecoderService, true
}

// HasDecoderService returns a boolean if a field has been set.
func (o *Application) HasDecoderService() bool {
	if o != nil && !IsNil(o.DecoderService) {
		return true
	}

	return false
}

// SetDecoderService gets a reference to the given DecoderService and assigns it to the DecoderService field.
func (o *Application) SetDecoderService(v DecoderService) {
	o.DecoderService = &v
}

// GetEncoderService returns the EncoderService field value if set, zero value otherwise.
func (o *Application) GetEncoderService() EncoderService {
	if o == nil || IsNil(o.EncoderService) {
		var ret EncoderService
		return ret
	}
	return *o.EncoderService
}

// GetEncoderServiceOk returns a tuple with the EncoderService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetEncoderServiceOk() (*EncoderService, bool) {
	if o == nil || IsNil(o.EncoderService) {
		return nil, false
	}
	return o.EncoderService, true
}

// HasEncoderService returns a boolean if a field has been set.
func (o *Application) HasEncoderService() bool {
	if o != nil && !IsNil(o.EncoderService) {
		return true
	}

	return false
}

// SetEncoderService gets a reference to the given EncoderService and assigns it to the EncoderService field.
func (o *Application) SetEncoderService(v EncoderService) {
	o.EncoderService = &v
}

// GetLogger returns the Logger field value if set, zero value otherwise.
func (o *Application) GetLogger() Logger {
	if o == nil || IsNil(o.Logger) {
		var ret Logger
		return ret
	}
	return *o.Logger
}

// GetLoggerOk returns a tuple with the Logger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetLoggerOk() (*Logger, bool) {
	if o == nil || IsNil(o.Logger) {
		return nil, false
	}
	return o.Logger, true
}

// HasLogger returns a boolean if a field has been set.
func (o *Application) HasLogger() bool {
	if o != nil && !IsNil(o.Logger) {
		return true
	}

	return false
}

// SetLogger gets a reference to the given Logger and assigns it to the Logger field.
func (o *Application) SetLogger(v Logger) {
	o.Logger = &v
}

// GetStopped returns the Stopped field value if set, zero value otherwise.
func (o *Application) GetStopped() bool {
	if o == nil || IsNil(o.Stopped) {
		var ret bool
		return ret
	}
	return *o.Stopped
}

// GetStoppedOk returns a tuple with the Stopped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetStoppedOk() (*bool, bool) {
	if o == nil || IsNil(o.Stopped) {
		return nil, false
	}
	return o.Stopped, true
}

// HasStopped returns a boolean if a field has been set.
func (o *Application) HasStopped() bool {
	if o != nil && !IsNil(o.Stopped) {
		return true
	}

	return false
}

// SetStopped gets a reference to the given bool and assigns it to the Stopped field.
func (o *Application) SetStopped(v bool) {
	o.Stopped = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *Application) GetApplication() Application {
	if o == nil || IsNil(o.Application) {
		var ret Application
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetApplicationOk() (*Application, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *Application) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given Application and assigns it to the Application field.
func (o *Application) SetApplication(v Application) {
	o.Application = &v
}

func (o Application) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Application) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Started) {
		toSerialize["started"] = o.Started
	}
	if !IsNil(o.Debugging) {
		toSerialize["debugging"] = o.Debugging
	}
	if !IsNil(o.InboundRoot) {
		toSerialize["inboundRoot"] = o.InboundRoot
	}
	if !IsNil(o.OutboundRoot) {
		toSerialize["outboundRoot"] = o.OutboundRoot
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	if !IsNil(o.StatusService) {
		toSerialize["statusService"] = o.StatusService
	}
	if !IsNil(o.ConnegService) {
		toSerialize["connegService"] = o.ConnegService
	}
	if !IsNil(o.MetadataService) {
		toSerialize["metadataService"] = o.MetadataService
	}
	if !IsNil(o.ConverterService) {
		toSerialize["converterService"] = o.ConverterService
	}
	if !IsNil(o.RangeService) {
		toSerialize["rangeService"] = o.RangeService
	}
	if !IsNil(o.TaskService) {
		toSerialize["taskService"] = o.TaskService
	}
	if !IsNil(o.TunnelService) {
		toSerialize["tunnelService"] = o.TunnelService
	}
	if !IsNil(o.ConnectorService) {
		toSerialize["connectorService"] = o.ConnectorService
	}
	if !IsNil(o.DecoderService) {
		toSerialize["decoderService"] = o.DecoderService
	}
	if !IsNil(o.EncoderService) {
		toSerialize["encoderService"] = o.EncoderService
	}
	if !IsNil(o.Logger) {
		toSerialize["logger"] = o.Logger
	}
	if !IsNil(o.Stopped) {
		toSerialize["stopped"] = o.Stopped
	}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	return toSerialize, nil
}

type NullableApplication struct {
	value *Application
	isSet bool
}

func (v NullableApplication) Get() *Application {
	return v.value
}

func (v *NullableApplication) Set(val *Application) {
	v.value = val
	v.isSet = true
}

func (v NullableApplication) IsSet() bool {
	return v.isSet
}

func (v *NullableApplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplication(val *Application) *NullableApplication {
	return &NullableApplication{value: val, isSet: true}
}

func (v NullableApplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


