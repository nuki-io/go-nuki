/*
Nuki API

The Nuki Web Api

API version: 0.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SmartlockSmartdoorAdvancedConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartlockSmartdoorAdvancedConfig{}

// SmartlockSmartdoorAdvancedConfig struct for SmartlockSmartdoorAdvancedConfig
type SmartlockSmartdoorAdvancedConfig struct {
	// Timeout in seconds for lock ‘n’ go
	LngTimeout *int32 `json:"lngTimeout,omitempty"`
	// The desired action, if the button is pressed once: 0 .. no action, 1 .. intelligent, 2 .. unlock, 3 .. lock, 4 .. unlatch, 5 .. lock 'n' go, 6 .. show status
	SingleButtonPressAction *int32 `json:"singleButtonPressAction,omitempty"`
	// The desired action, if the button is pressed twice: 0 .. no action, 1 .. intelligent, 2 .. unlock, 3 .. lock, 4 .. unlatch, 5 .. lock 'n' go, 6 .. show status
	DoubleButtonPressAction *int32 `json:"doubleButtonPressAction,omitempty"`
	// Flag that indicates if the automatic detection of the battery type is enabled
	AutomaticBatteryTypeDetection *bool `json:"automaticBatteryTypeDetection,omitempty"`
	// Duration in seconds for holding the latch in unlatched position
	UnlatchDuration *int32 `json:"unlatchDuration,omitempty"`
	// The operation id - if set it's locked for another operation
	OperationId *string `json:"operationId,omitempty"`
	// The volume of the buzzer: 0 .. off, 1 .. low, 2 .. normal
	BuzzerVolume *int32 `json:"buzzerVolume,omitempty"`
	// Set of supported battery types: 0 .. alkali, 1 .. accumulator, 2 .. lithium, 3 .. fixed, 254 .. automatic, 255 .. unknown
	SupportedBatteryTypes []int32 `json:"supportedBatteryTypes,omitempty"`
	// The type of the batteries present in the smart lock: 0 .. alkali, 1 .. accumulator, 2 .. lithium, 3 .. fixed, 255 .. unknown
	BatteryType int32 `json:"batteryType"`
	// Seconds until the smart lock relocks itself after it has been unlocked. No auto relock if value is 0
	AutoLockTimeout *int32 `json:"autoLockTimeout,omitempty"`
	// The Auto Lock feature automatically locks your door when it has been unlocked for a certain period of time
	AutoLock bool `json:"autoLock"`
}

type _SmartlockSmartdoorAdvancedConfig SmartlockSmartdoorAdvancedConfig

// NewSmartlockSmartdoorAdvancedConfig instantiates a new SmartlockSmartdoorAdvancedConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartlockSmartdoorAdvancedConfig(batteryType int32, autoLock bool) *SmartlockSmartdoorAdvancedConfig {
	this := SmartlockSmartdoorAdvancedConfig{}
	this.BatteryType = batteryType
	this.AutoLock = autoLock
	return &this
}

// NewSmartlockSmartdoorAdvancedConfigWithDefaults instantiates a new SmartlockSmartdoorAdvancedConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartlockSmartdoorAdvancedConfigWithDefaults() *SmartlockSmartdoorAdvancedConfig {
	this := SmartlockSmartdoorAdvancedConfig{}
	return &this
}

// GetLngTimeout returns the LngTimeout field value if set, zero value otherwise.
func (o *SmartlockSmartdoorAdvancedConfig) GetLngTimeout() int32 {
	if o == nil || IsNil(o.LngTimeout) {
		var ret int32
		return ret
	}
	return *o.LngTimeout
}

// GetLngTimeoutOk returns a tuple with the LngTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockSmartdoorAdvancedConfig) GetLngTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.LngTimeout) {
		return nil, false
	}
	return o.LngTimeout, true
}

// HasLngTimeout returns a boolean if a field has been set.
func (o *SmartlockSmartdoorAdvancedConfig) HasLngTimeout() bool {
	if o != nil && !IsNil(o.LngTimeout) {
		return true
	}

	return false
}

// SetLngTimeout gets a reference to the given int32 and assigns it to the LngTimeout field.
func (o *SmartlockSmartdoorAdvancedConfig) SetLngTimeout(v int32) {
	o.LngTimeout = &v
}

// GetSingleButtonPressAction returns the SingleButtonPressAction field value if set, zero value otherwise.
func (o *SmartlockSmartdoorAdvancedConfig) GetSingleButtonPressAction() int32 {
	if o == nil || IsNil(o.SingleButtonPressAction) {
		var ret int32
		return ret
	}
	return *o.SingleButtonPressAction
}

// GetSingleButtonPressActionOk returns a tuple with the SingleButtonPressAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockSmartdoorAdvancedConfig) GetSingleButtonPressActionOk() (*int32, bool) {
	if o == nil || IsNil(o.SingleButtonPressAction) {
		return nil, false
	}
	return o.SingleButtonPressAction, true
}

// HasSingleButtonPressAction returns a boolean if a field has been set.
func (o *SmartlockSmartdoorAdvancedConfig) HasSingleButtonPressAction() bool {
	if o != nil && !IsNil(o.SingleButtonPressAction) {
		return true
	}

	return false
}

// SetSingleButtonPressAction gets a reference to the given int32 and assigns it to the SingleButtonPressAction field.
func (o *SmartlockSmartdoorAdvancedConfig) SetSingleButtonPressAction(v int32) {
	o.SingleButtonPressAction = &v
}

// GetDoubleButtonPressAction returns the DoubleButtonPressAction field value if set, zero value otherwise.
func (o *SmartlockSmartdoorAdvancedConfig) GetDoubleButtonPressAction() int32 {
	if o == nil || IsNil(o.DoubleButtonPressAction) {
		var ret int32
		return ret
	}
	return *o.DoubleButtonPressAction
}

// GetDoubleButtonPressActionOk returns a tuple with the DoubleButtonPressAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockSmartdoorAdvancedConfig) GetDoubleButtonPressActionOk() (*int32, bool) {
	if o == nil || IsNil(o.DoubleButtonPressAction) {
		return nil, false
	}
	return o.DoubleButtonPressAction, true
}

// HasDoubleButtonPressAction returns a boolean if a field has been set.
func (o *SmartlockSmartdoorAdvancedConfig) HasDoubleButtonPressAction() bool {
	if o != nil && !IsNil(o.DoubleButtonPressAction) {
		return true
	}

	return false
}

// SetDoubleButtonPressAction gets a reference to the given int32 and assigns it to the DoubleButtonPressAction field.
func (o *SmartlockSmartdoorAdvancedConfig) SetDoubleButtonPressAction(v int32) {
	o.DoubleButtonPressAction = &v
}

// GetAutomaticBatteryTypeDetection returns the AutomaticBatteryTypeDetection field value if set, zero value otherwise.
func (o *SmartlockSmartdoorAdvancedConfig) GetAutomaticBatteryTypeDetection() bool {
	if o == nil || IsNil(o.AutomaticBatteryTypeDetection) {
		var ret bool
		return ret
	}
	return *o.AutomaticBatteryTypeDetection
}

// GetAutomaticBatteryTypeDetectionOk returns a tuple with the AutomaticBatteryTypeDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockSmartdoorAdvancedConfig) GetAutomaticBatteryTypeDetectionOk() (*bool, bool) {
	if o == nil || IsNil(o.AutomaticBatteryTypeDetection) {
		return nil, false
	}
	return o.AutomaticBatteryTypeDetection, true
}

// HasAutomaticBatteryTypeDetection returns a boolean if a field has been set.
func (o *SmartlockSmartdoorAdvancedConfig) HasAutomaticBatteryTypeDetection() bool {
	if o != nil && !IsNil(o.AutomaticBatteryTypeDetection) {
		return true
	}

	return false
}

// SetAutomaticBatteryTypeDetection gets a reference to the given bool and assigns it to the AutomaticBatteryTypeDetection field.
func (o *SmartlockSmartdoorAdvancedConfig) SetAutomaticBatteryTypeDetection(v bool) {
	o.AutomaticBatteryTypeDetection = &v
}

// GetUnlatchDuration returns the UnlatchDuration field value if set, zero value otherwise.
func (o *SmartlockSmartdoorAdvancedConfig) GetUnlatchDuration() int32 {
	if o == nil || IsNil(o.UnlatchDuration) {
		var ret int32
		return ret
	}
	return *o.UnlatchDuration
}

// GetUnlatchDurationOk returns a tuple with the UnlatchDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockSmartdoorAdvancedConfig) GetUnlatchDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.UnlatchDuration) {
		return nil, false
	}
	return o.UnlatchDuration, true
}

// HasUnlatchDuration returns a boolean if a field has been set.
func (o *SmartlockSmartdoorAdvancedConfig) HasUnlatchDuration() bool {
	if o != nil && !IsNil(o.UnlatchDuration) {
		return true
	}

	return false
}

// SetUnlatchDuration gets a reference to the given int32 and assigns it to the UnlatchDuration field.
func (o *SmartlockSmartdoorAdvancedConfig) SetUnlatchDuration(v int32) {
	o.UnlatchDuration = &v
}

// GetOperationId returns the OperationId field value if set, zero value otherwise.
func (o *SmartlockSmartdoorAdvancedConfig) GetOperationId() string {
	if o == nil || IsNil(o.OperationId) {
		var ret string
		return ret
	}
	return *o.OperationId
}

// GetOperationIdOk returns a tuple with the OperationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockSmartdoorAdvancedConfig) GetOperationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OperationId) {
		return nil, false
	}
	return o.OperationId, true
}

// HasOperationId returns a boolean if a field has been set.
func (o *SmartlockSmartdoorAdvancedConfig) HasOperationId() bool {
	if o != nil && !IsNil(o.OperationId) {
		return true
	}

	return false
}

// SetOperationId gets a reference to the given string and assigns it to the OperationId field.
func (o *SmartlockSmartdoorAdvancedConfig) SetOperationId(v string) {
	o.OperationId = &v
}

// GetBuzzerVolume returns the BuzzerVolume field value if set, zero value otherwise.
func (o *SmartlockSmartdoorAdvancedConfig) GetBuzzerVolume() int32 {
	if o == nil || IsNil(o.BuzzerVolume) {
		var ret int32
		return ret
	}
	return *o.BuzzerVolume
}

// GetBuzzerVolumeOk returns a tuple with the BuzzerVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockSmartdoorAdvancedConfig) GetBuzzerVolumeOk() (*int32, bool) {
	if o == nil || IsNil(o.BuzzerVolume) {
		return nil, false
	}
	return o.BuzzerVolume, true
}

// HasBuzzerVolume returns a boolean if a field has been set.
func (o *SmartlockSmartdoorAdvancedConfig) HasBuzzerVolume() bool {
	if o != nil && !IsNil(o.BuzzerVolume) {
		return true
	}

	return false
}

// SetBuzzerVolume gets a reference to the given int32 and assigns it to the BuzzerVolume field.
func (o *SmartlockSmartdoorAdvancedConfig) SetBuzzerVolume(v int32) {
	o.BuzzerVolume = &v
}

// GetSupportedBatteryTypes returns the SupportedBatteryTypes field value if set, zero value otherwise.
func (o *SmartlockSmartdoorAdvancedConfig) GetSupportedBatteryTypes() []int32 {
	if o == nil || IsNil(o.SupportedBatteryTypes) {
		var ret []int32
		return ret
	}
	return o.SupportedBatteryTypes
}

// GetSupportedBatteryTypesOk returns a tuple with the SupportedBatteryTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockSmartdoorAdvancedConfig) GetSupportedBatteryTypesOk() ([]int32, bool) {
	if o == nil || IsNil(o.SupportedBatteryTypes) {
		return nil, false
	}
	return o.SupportedBatteryTypes, true
}

// HasSupportedBatteryTypes returns a boolean if a field has been set.
func (o *SmartlockSmartdoorAdvancedConfig) HasSupportedBatteryTypes() bool {
	if o != nil && !IsNil(o.SupportedBatteryTypes) {
		return true
	}

	return false
}

// SetSupportedBatteryTypes gets a reference to the given []int32 and assigns it to the SupportedBatteryTypes field.
func (o *SmartlockSmartdoorAdvancedConfig) SetSupportedBatteryTypes(v []int32) {
	o.SupportedBatteryTypes = v
}

// GetBatteryType returns the BatteryType field value
func (o *SmartlockSmartdoorAdvancedConfig) GetBatteryType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BatteryType
}

// GetBatteryTypeOk returns a tuple with the BatteryType field value
// and a boolean to check if the value has been set.
func (o *SmartlockSmartdoorAdvancedConfig) GetBatteryTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BatteryType, true
}

// SetBatteryType sets field value
func (o *SmartlockSmartdoorAdvancedConfig) SetBatteryType(v int32) {
	o.BatteryType = v
}

// GetAutoLockTimeout returns the AutoLockTimeout field value if set, zero value otherwise.
func (o *SmartlockSmartdoorAdvancedConfig) GetAutoLockTimeout() int32 {
	if o == nil || IsNil(o.AutoLockTimeout) {
		var ret int32
		return ret
	}
	return *o.AutoLockTimeout
}

// GetAutoLockTimeoutOk returns a tuple with the AutoLockTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockSmartdoorAdvancedConfig) GetAutoLockTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.AutoLockTimeout) {
		return nil, false
	}
	return o.AutoLockTimeout, true
}

// HasAutoLockTimeout returns a boolean if a field has been set.
func (o *SmartlockSmartdoorAdvancedConfig) HasAutoLockTimeout() bool {
	if o != nil && !IsNil(o.AutoLockTimeout) {
		return true
	}

	return false
}

// SetAutoLockTimeout gets a reference to the given int32 and assigns it to the AutoLockTimeout field.
func (o *SmartlockSmartdoorAdvancedConfig) SetAutoLockTimeout(v int32) {
	o.AutoLockTimeout = &v
}

// GetAutoLock returns the AutoLock field value
func (o *SmartlockSmartdoorAdvancedConfig) GetAutoLock() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutoLock
}

// GetAutoLockOk returns a tuple with the AutoLock field value
// and a boolean to check if the value has been set.
func (o *SmartlockSmartdoorAdvancedConfig) GetAutoLockOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoLock, true
}

// SetAutoLock sets field value
func (o *SmartlockSmartdoorAdvancedConfig) SetAutoLock(v bool) {
	o.AutoLock = v
}

func (o SmartlockSmartdoorAdvancedConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartlockSmartdoorAdvancedConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LngTimeout) {
		toSerialize["lngTimeout"] = o.LngTimeout
	}
	if !IsNil(o.SingleButtonPressAction) {
		toSerialize["singleButtonPressAction"] = o.SingleButtonPressAction
	}
	if !IsNil(o.DoubleButtonPressAction) {
		toSerialize["doubleButtonPressAction"] = o.DoubleButtonPressAction
	}
	if !IsNil(o.AutomaticBatteryTypeDetection) {
		toSerialize["automaticBatteryTypeDetection"] = o.AutomaticBatteryTypeDetection
	}
	if !IsNil(o.UnlatchDuration) {
		toSerialize["unlatchDuration"] = o.UnlatchDuration
	}
	if !IsNil(o.OperationId) {
		toSerialize["operationId"] = o.OperationId
	}
	if !IsNil(o.BuzzerVolume) {
		toSerialize["buzzerVolume"] = o.BuzzerVolume
	}
	if !IsNil(o.SupportedBatteryTypes) {
		toSerialize["supportedBatteryTypes"] = o.SupportedBatteryTypes
	}
	toSerialize["batteryType"] = o.BatteryType
	if !IsNil(o.AutoLockTimeout) {
		toSerialize["autoLockTimeout"] = o.AutoLockTimeout
	}
	toSerialize["autoLock"] = o.AutoLock
	return toSerialize, nil
}

func (o *SmartlockSmartdoorAdvancedConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"batteryType",
		"autoLock",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmartlockSmartdoorAdvancedConfig := _SmartlockSmartdoorAdvancedConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSmartlockSmartdoorAdvancedConfig)

	if err != nil {
		return err
	}

	*o = SmartlockSmartdoorAdvancedConfig(varSmartlockSmartdoorAdvancedConfig)

	return err
}

type NullableSmartlockSmartdoorAdvancedConfig struct {
	value *SmartlockSmartdoorAdvancedConfig
	isSet bool
}

func (v NullableSmartlockSmartdoorAdvancedConfig) Get() *SmartlockSmartdoorAdvancedConfig {
	return v.value
}

func (v *NullableSmartlockSmartdoorAdvancedConfig) Set(val *SmartlockSmartdoorAdvancedConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartlockSmartdoorAdvancedConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartlockSmartdoorAdvancedConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartlockSmartdoorAdvancedConfig(val *SmartlockSmartdoorAdvancedConfig) *NullableSmartlockSmartdoorAdvancedConfig {
	return &NullableSmartlockSmartdoorAdvancedConfig{value: val, isSet: true}
}

func (v NullableSmartlockSmartdoorAdvancedConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartlockSmartdoorAdvancedConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


