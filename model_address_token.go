/*
Nuki API

The Nuki Web Api

API version: 4.0.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AddressToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressToken{}

// AddressToken struct for AddressToken
type AddressToken struct {
	// The id
	Id string `json:"id"`
	// The address id
	AddressId int32 `json:"addressId"`
	// The creation date
	CreationDate time.Time `json:"creationDate"`
	// The redeem date
	RedeemDate time.Time `json:"redeemDate"`
	// The redeem account id
	RedeemAccountId int32 `json:"redeemAccountId"`
	// The list of invite keys
	InviteKeys []string `json:"inviteKeys,omitempty"`
	// The redeem result
	RedeemResult *string `json:"redeemResult,omitempty"`
}

type _AddressToken AddressToken

// NewAddressToken instantiates a new AddressToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressToken(id string, addressId int32, creationDate time.Time, redeemDate time.Time, redeemAccountId int32) *AddressToken {
	this := AddressToken{}
	this.Id = id
	this.AddressId = addressId
	this.CreationDate = creationDate
	this.RedeemDate = redeemDate
	this.RedeemAccountId = redeemAccountId
	return &this
}

// NewAddressTokenWithDefaults instantiates a new AddressToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressTokenWithDefaults() *AddressToken {
	this := AddressToken{}
	return &this
}

// GetId returns the Id field value
func (o *AddressToken) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AddressToken) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AddressToken) SetId(v string) {
	o.Id = v
}

// GetAddressId returns the AddressId field value
func (o *AddressToken) GetAddressId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AddressId
}

// GetAddressIdOk returns a tuple with the AddressId field value
// and a boolean to check if the value has been set.
func (o *AddressToken) GetAddressIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddressId, true
}

// SetAddressId sets field value
func (o *AddressToken) SetAddressId(v int32) {
	o.AddressId = v
}

// GetCreationDate returns the CreationDate field value
func (o *AddressToken) GetCreationDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value
// and a boolean to check if the value has been set.
func (o *AddressToken) GetCreationDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationDate, true
}

// SetCreationDate sets field value
func (o *AddressToken) SetCreationDate(v time.Time) {
	o.CreationDate = v
}

// GetRedeemDate returns the RedeemDate field value
func (o *AddressToken) GetRedeemDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.RedeemDate
}

// GetRedeemDateOk returns a tuple with the RedeemDate field value
// and a boolean to check if the value has been set.
func (o *AddressToken) GetRedeemDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RedeemDate, true
}

// SetRedeemDate sets field value
func (o *AddressToken) SetRedeemDate(v time.Time) {
	o.RedeemDate = v
}

// GetRedeemAccountId returns the RedeemAccountId field value
func (o *AddressToken) GetRedeemAccountId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RedeemAccountId
}

// GetRedeemAccountIdOk returns a tuple with the RedeemAccountId field value
// and a boolean to check if the value has been set.
func (o *AddressToken) GetRedeemAccountIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RedeemAccountId, true
}

// SetRedeemAccountId sets field value
func (o *AddressToken) SetRedeemAccountId(v int32) {
	o.RedeemAccountId = v
}

// GetInviteKeys returns the InviteKeys field value if set, zero value otherwise.
func (o *AddressToken) GetInviteKeys() []string {
	if o == nil || IsNil(o.InviteKeys) {
		var ret []string
		return ret
	}
	return o.InviteKeys
}

// GetInviteKeysOk returns a tuple with the InviteKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressToken) GetInviteKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.InviteKeys) {
		return nil, false
	}
	return o.InviteKeys, true
}

// HasInviteKeys returns a boolean if a field has been set.
func (o *AddressToken) HasInviteKeys() bool {
	if o != nil && !IsNil(o.InviteKeys) {
		return true
	}

	return false
}

// SetInviteKeys gets a reference to the given []string and assigns it to the InviteKeys field.
func (o *AddressToken) SetInviteKeys(v []string) {
	o.InviteKeys = v
}

// GetRedeemResult returns the RedeemResult field value if set, zero value otherwise.
func (o *AddressToken) GetRedeemResult() string {
	if o == nil || IsNil(o.RedeemResult) {
		var ret string
		return ret
	}
	return *o.RedeemResult
}

// GetRedeemResultOk returns a tuple with the RedeemResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressToken) GetRedeemResultOk() (*string, bool) {
	if o == nil || IsNil(o.RedeemResult) {
		return nil, false
	}
	return o.RedeemResult, true
}

// HasRedeemResult returns a boolean if a field has been set.
func (o *AddressToken) HasRedeemResult() bool {
	if o != nil && !IsNil(o.RedeemResult) {
		return true
	}

	return false
}

// SetRedeemResult gets a reference to the given string and assigns it to the RedeemResult field.
func (o *AddressToken) SetRedeemResult(v string) {
	o.RedeemResult = &v
}

func (o AddressToken) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["addressId"] = o.AddressId
	toSerialize["creationDate"] = o.CreationDate
	toSerialize["redeemDate"] = o.RedeemDate
	toSerialize["redeemAccountId"] = o.RedeemAccountId
	if !IsNil(o.InviteKeys) {
		toSerialize["inviteKeys"] = o.InviteKeys
	}
	if !IsNil(o.RedeemResult) {
		toSerialize["redeemResult"] = o.RedeemResult
	}
	return toSerialize, nil
}

func (o *AddressToken) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"addressId",
		"creationDate",
		"redeemDate",
		"redeemAccountId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddressToken := _AddressToken{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddressToken)

	if err != nil {
		return err
	}

	*o = AddressToken(varAddressToken)

	return err
}

type NullableAddressToken struct {
	value *AddressToken
	isSet bool
}

func (v NullableAddressToken) Get() *AddressToken {
	return v.value
}

func (v *NullableAddressToken) Set(val *AddressToken) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressToken) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressToken(val *AddressToken) *NullableAddressToken {
	return &NullableAddressToken{value: val, isSet: true}
}

func (v NullableAddressToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


