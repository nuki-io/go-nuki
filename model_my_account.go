/*
Nuki API

The Nuki Web Api

API version: 3.10.2
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the MyAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MyAccount{}

// MyAccount struct for MyAccount
type MyAccount struct {
	// The account id
	AccountId int32 `json:"accountId"`
	// The type: 0 .. user, 1 .. company, 2 .. caretaker
	Type int32 `json:"type"`
	// The email address
	Email string `json:"email"`
	// true, if the email is verified
	EmailVerified *bool `json:"emailVerified,omitempty"`
	// The name
	Name string `json:"name"`
	// The master account id if it's a sub account
	MasterAccountId *int32 `json:"masterAccountId,omitempty"`
	// The rights bitmask if it's a sub account: 1 .. manage smartlock, 2 .. operate smartlock, 4 .. manage smartlock config, 8 .. manage smartlock authorizations, 16 .. view smartlock logs, 32 .. manage sub accounts, 64 .. create smartlocks
	Rights *int32 `json:"rights,omitempty"`
	// The language code
	Language *string `json:"language,omitempty"`
	Config *AccountConfig `json:"config,omitempty"`
	Profile *AccountProfile `json:"profile,omitempty"`
	// The secret base64 encoded
	Secret []string `json:"secret,omitempty"`
	// The creation date
	CreationDate time.Time `json:"creationDate"`
	// The update date
	UpdateDate time.Time `json:"updateDate"`
	Descent *AccountDescent `json:"descent,omitempty"`
	// subscription type of the account (b2b)
	ShsSubscriptionType *string `json:"shsSubscriptionType,omitempty"`
	B2bActive *bool `json:"b2bActive,omitempty"`
	ApiTermsOfUse *TermsOfUse `json:"apiTermsOfUse,omitempty"`
}

type _MyAccount MyAccount

// NewMyAccount instantiates a new MyAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMyAccount(accountId int32, type_ int32, email string, name string, creationDate time.Time, updateDate time.Time) *MyAccount {
	this := MyAccount{}
	this.AccountId = accountId
	this.Type = type_
	this.Email = email
	this.Name = name
	this.CreationDate = creationDate
	this.UpdateDate = updateDate
	return &this
}

// NewMyAccountWithDefaults instantiates a new MyAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMyAccountWithDefaults() *MyAccount {
	this := MyAccount{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *MyAccount) GetAccountId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *MyAccount) GetAccountIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *MyAccount) SetAccountId(v int32) {
	o.AccountId = v
}

// GetType returns the Type field value
func (o *MyAccount) GetType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MyAccount) GetTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MyAccount) SetType(v int32) {
	o.Type = v
}

// GetEmail returns the Email field value
func (o *MyAccount) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *MyAccount) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *MyAccount) SetEmail(v string) {
	o.Email = v
}

// GetEmailVerified returns the EmailVerified field value if set, zero value otherwise.
func (o *MyAccount) GetEmailVerified() bool {
	if o == nil || IsNil(o.EmailVerified) {
		var ret bool
		return ret
	}
	return *o.EmailVerified
}

// GetEmailVerifiedOk returns a tuple with the EmailVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyAccount) GetEmailVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailVerified) {
		return nil, false
	}
	return o.EmailVerified, true
}

// HasEmailVerified returns a boolean if a field has been set.
func (o *MyAccount) HasEmailVerified() bool {
	if o != nil && !IsNil(o.EmailVerified) {
		return true
	}

	return false
}

// SetEmailVerified gets a reference to the given bool and assigns it to the EmailVerified field.
func (o *MyAccount) SetEmailVerified(v bool) {
	o.EmailVerified = &v
}

// GetName returns the Name field value
func (o *MyAccount) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MyAccount) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MyAccount) SetName(v string) {
	o.Name = v
}

// GetMasterAccountId returns the MasterAccountId field value if set, zero value otherwise.
func (o *MyAccount) GetMasterAccountId() int32 {
	if o == nil || IsNil(o.MasterAccountId) {
		var ret int32
		return ret
	}
	return *o.MasterAccountId
}

// GetMasterAccountIdOk returns a tuple with the MasterAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyAccount) GetMasterAccountIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MasterAccountId) {
		return nil, false
	}
	return o.MasterAccountId, true
}

// HasMasterAccountId returns a boolean if a field has been set.
func (o *MyAccount) HasMasterAccountId() bool {
	if o != nil && !IsNil(o.MasterAccountId) {
		return true
	}

	return false
}

// SetMasterAccountId gets a reference to the given int32 and assigns it to the MasterAccountId field.
func (o *MyAccount) SetMasterAccountId(v int32) {
	o.MasterAccountId = &v
}

// GetRights returns the Rights field value if set, zero value otherwise.
func (o *MyAccount) GetRights() int32 {
	if o == nil || IsNil(o.Rights) {
		var ret int32
		return ret
	}
	return *o.Rights
}

// GetRightsOk returns a tuple with the Rights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyAccount) GetRightsOk() (*int32, bool) {
	if o == nil || IsNil(o.Rights) {
		return nil, false
	}
	return o.Rights, true
}

// HasRights returns a boolean if a field has been set.
func (o *MyAccount) HasRights() bool {
	if o != nil && !IsNil(o.Rights) {
		return true
	}

	return false
}

// SetRights gets a reference to the given int32 and assigns it to the Rights field.
func (o *MyAccount) SetRights(v int32) {
	o.Rights = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *MyAccount) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyAccount) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *MyAccount) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *MyAccount) SetLanguage(v string) {
	o.Language = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *MyAccount) GetConfig() AccountConfig {
	if o == nil || IsNil(o.Config) {
		var ret AccountConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyAccount) GetConfigOk() (*AccountConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *MyAccount) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given AccountConfig and assigns it to the Config field.
func (o *MyAccount) SetConfig(v AccountConfig) {
	o.Config = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *MyAccount) GetProfile() AccountProfile {
	if o == nil || IsNil(o.Profile) {
		var ret AccountProfile
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyAccount) GetProfileOk() (*AccountProfile, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *MyAccount) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given AccountProfile and assigns it to the Profile field.
func (o *MyAccount) SetProfile(v AccountProfile) {
	o.Profile = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *MyAccount) GetSecret() []string {
	if o == nil || IsNil(o.Secret) {
		var ret []string
		return ret
	}
	return o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyAccount) GetSecretOk() ([]string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *MyAccount) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given []string and assigns it to the Secret field.
func (o *MyAccount) SetSecret(v []string) {
	o.Secret = v
}

// GetCreationDate returns the CreationDate field value
func (o *MyAccount) GetCreationDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value
// and a boolean to check if the value has been set.
func (o *MyAccount) GetCreationDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationDate, true
}

// SetCreationDate sets field value
func (o *MyAccount) SetCreationDate(v time.Time) {
	o.CreationDate = v
}

// GetUpdateDate returns the UpdateDate field value
func (o *MyAccount) GetUpdateDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdateDate
}

// GetUpdateDateOk returns a tuple with the UpdateDate field value
// and a boolean to check if the value has been set.
func (o *MyAccount) GetUpdateDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdateDate, true
}

// SetUpdateDate sets field value
func (o *MyAccount) SetUpdateDate(v time.Time) {
	o.UpdateDate = v
}

// GetDescent returns the Descent field value if set, zero value otherwise.
func (o *MyAccount) GetDescent() AccountDescent {
	if o == nil || IsNil(o.Descent) {
		var ret AccountDescent
		return ret
	}
	return *o.Descent
}

// GetDescentOk returns a tuple with the Descent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyAccount) GetDescentOk() (*AccountDescent, bool) {
	if o == nil || IsNil(o.Descent) {
		return nil, false
	}
	return o.Descent, true
}

// HasDescent returns a boolean if a field has been set.
func (o *MyAccount) HasDescent() bool {
	if o != nil && !IsNil(o.Descent) {
		return true
	}

	return false
}

// SetDescent gets a reference to the given AccountDescent and assigns it to the Descent field.
func (o *MyAccount) SetDescent(v AccountDescent) {
	o.Descent = &v
}

// GetShsSubscriptionType returns the ShsSubscriptionType field value if set, zero value otherwise.
func (o *MyAccount) GetShsSubscriptionType() string {
	if o == nil || IsNil(o.ShsSubscriptionType) {
		var ret string
		return ret
	}
	return *o.ShsSubscriptionType
}

// GetShsSubscriptionTypeOk returns a tuple with the ShsSubscriptionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyAccount) GetShsSubscriptionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ShsSubscriptionType) {
		return nil, false
	}
	return o.ShsSubscriptionType, true
}

// HasShsSubscriptionType returns a boolean if a field has been set.
func (o *MyAccount) HasShsSubscriptionType() bool {
	if o != nil && !IsNil(o.ShsSubscriptionType) {
		return true
	}

	return false
}

// SetShsSubscriptionType gets a reference to the given string and assigns it to the ShsSubscriptionType field.
func (o *MyAccount) SetShsSubscriptionType(v string) {
	o.ShsSubscriptionType = &v
}

// GetB2bActive returns the B2bActive field value if set, zero value otherwise.
func (o *MyAccount) GetB2bActive() bool {
	if o == nil || IsNil(o.B2bActive) {
		var ret bool
		return ret
	}
	return *o.B2bActive
}

// GetB2bActiveOk returns a tuple with the B2bActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyAccount) GetB2bActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.B2bActive) {
		return nil, false
	}
	return o.B2bActive, true
}

// HasB2bActive returns a boolean if a field has been set.
func (o *MyAccount) HasB2bActive() bool {
	if o != nil && !IsNil(o.B2bActive) {
		return true
	}

	return false
}

// SetB2bActive gets a reference to the given bool and assigns it to the B2bActive field.
func (o *MyAccount) SetB2bActive(v bool) {
	o.B2bActive = &v
}

// GetApiTermsOfUse returns the ApiTermsOfUse field value if set, zero value otherwise.
func (o *MyAccount) GetApiTermsOfUse() TermsOfUse {
	if o == nil || IsNil(o.ApiTermsOfUse) {
		var ret TermsOfUse
		return ret
	}
	return *o.ApiTermsOfUse
}

// GetApiTermsOfUseOk returns a tuple with the ApiTermsOfUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyAccount) GetApiTermsOfUseOk() (*TermsOfUse, bool) {
	if o == nil || IsNil(o.ApiTermsOfUse) {
		return nil, false
	}
	return o.ApiTermsOfUse, true
}

// HasApiTermsOfUse returns a boolean if a field has been set.
func (o *MyAccount) HasApiTermsOfUse() bool {
	if o != nil && !IsNil(o.ApiTermsOfUse) {
		return true
	}

	return false
}

// SetApiTermsOfUse gets a reference to the given TermsOfUse and assigns it to the ApiTermsOfUse field.
func (o *MyAccount) SetApiTermsOfUse(v TermsOfUse) {
	o.ApiTermsOfUse = &v
}

func (o MyAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MyAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accountId"] = o.AccountId
	toSerialize["type"] = o.Type
	toSerialize["email"] = o.Email
	if !IsNil(o.EmailVerified) {
		toSerialize["emailVerified"] = o.EmailVerified
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.MasterAccountId) {
		toSerialize["masterAccountId"] = o.MasterAccountId
	}
	if !IsNil(o.Rights) {
		toSerialize["rights"] = o.Rights
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	toSerialize["creationDate"] = o.CreationDate
	toSerialize["updateDate"] = o.UpdateDate
	if !IsNil(o.Descent) {
		toSerialize["descent"] = o.Descent
	}
	if !IsNil(o.ShsSubscriptionType) {
		toSerialize["shsSubscriptionType"] = o.ShsSubscriptionType
	}
	if !IsNil(o.B2bActive) {
		toSerialize["b2bActive"] = o.B2bActive
	}
	if !IsNil(o.ApiTermsOfUse) {
		toSerialize["apiTermsOfUse"] = o.ApiTermsOfUse
	}
	return toSerialize, nil
}

func (o *MyAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accountId",
		"type",
		"email",
		"name",
		"creationDate",
		"updateDate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMyAccount := _MyAccount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMyAccount)

	if err != nil {
		return err
	}

	*o = MyAccount(varMyAccount)

	return err
}

type NullableMyAccount struct {
	value *MyAccount
	isSet bool
}

func (v NullableMyAccount) Get() *MyAccount {
	return v.value
}

func (v *NullableMyAccount) Set(val *MyAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableMyAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableMyAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMyAccount(val *MyAccount) *NullableMyAccount {
	return &NullableMyAccount{value: val, isSet: true}
}

func (v NullableMyAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMyAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


