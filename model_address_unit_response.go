/*
Nuki API

The Nuki Web Api

API version: 3.13.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AddressUnitResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressUnitResponse{}

// AddressUnitResponse struct for AddressUnitResponse
type AddressUnitResponse struct {
	// The id
	Id *string `json:"id,omitempty"`
	// The name of the address unit
	Name string `json:"name"`
	// The address id
	AddressId *int32 `json:"addressId,omitempty"`
	// The address token id
	AddressTokenId *string `json:"addressTokenId,omitempty"`
	// The operation id - if set it's locked for another operation
	OperationId *string `json:"operationId,omitempty"`
	// The creation date
	CreationDate time.Time `json:"creationDate"`
	// The redeem date
	RedeemDate time.Time `json:"redeemDate"`
	// The redeem result
	RedeemResult *string `json:"redeemResult,omitempty"`
}

type _AddressUnitResponse AddressUnitResponse

// NewAddressUnitResponse instantiates a new AddressUnitResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressUnitResponse(name string, creationDate time.Time, redeemDate time.Time) *AddressUnitResponse {
	this := AddressUnitResponse{}
	this.Name = name
	this.CreationDate = creationDate
	this.RedeemDate = redeemDate
	return &this
}

// NewAddressUnitResponseWithDefaults instantiates a new AddressUnitResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressUnitResponseWithDefaults() *AddressUnitResponse {
	this := AddressUnitResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AddressUnitResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressUnitResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AddressUnitResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AddressUnitResponse) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *AddressUnitResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddressUnitResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddressUnitResponse) SetName(v string) {
	o.Name = v
}

// GetAddressId returns the AddressId field value if set, zero value otherwise.
func (o *AddressUnitResponse) GetAddressId() int32 {
	if o == nil || IsNil(o.AddressId) {
		var ret int32
		return ret
	}
	return *o.AddressId
}

// GetAddressIdOk returns a tuple with the AddressId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressUnitResponse) GetAddressIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AddressId) {
		return nil, false
	}
	return o.AddressId, true
}

// HasAddressId returns a boolean if a field has been set.
func (o *AddressUnitResponse) HasAddressId() bool {
	if o != nil && !IsNil(o.AddressId) {
		return true
	}

	return false
}

// SetAddressId gets a reference to the given int32 and assigns it to the AddressId field.
func (o *AddressUnitResponse) SetAddressId(v int32) {
	o.AddressId = &v
}

// GetAddressTokenId returns the AddressTokenId field value if set, zero value otherwise.
func (o *AddressUnitResponse) GetAddressTokenId() string {
	if o == nil || IsNil(o.AddressTokenId) {
		var ret string
		return ret
	}
	return *o.AddressTokenId
}

// GetAddressTokenIdOk returns a tuple with the AddressTokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressUnitResponse) GetAddressTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.AddressTokenId) {
		return nil, false
	}
	return o.AddressTokenId, true
}

// HasAddressTokenId returns a boolean if a field has been set.
func (o *AddressUnitResponse) HasAddressTokenId() bool {
	if o != nil && !IsNil(o.AddressTokenId) {
		return true
	}

	return false
}

// SetAddressTokenId gets a reference to the given string and assigns it to the AddressTokenId field.
func (o *AddressUnitResponse) SetAddressTokenId(v string) {
	o.AddressTokenId = &v
}

// GetOperationId returns the OperationId field value if set, zero value otherwise.
func (o *AddressUnitResponse) GetOperationId() string {
	if o == nil || IsNil(o.OperationId) {
		var ret string
		return ret
	}
	return *o.OperationId
}

// GetOperationIdOk returns a tuple with the OperationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressUnitResponse) GetOperationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OperationId) {
		return nil, false
	}
	return o.OperationId, true
}

// HasOperationId returns a boolean if a field has been set.
func (o *AddressUnitResponse) HasOperationId() bool {
	if o != nil && !IsNil(o.OperationId) {
		return true
	}

	return false
}

// SetOperationId gets a reference to the given string and assigns it to the OperationId field.
func (o *AddressUnitResponse) SetOperationId(v string) {
	o.OperationId = &v
}

// GetCreationDate returns the CreationDate field value
func (o *AddressUnitResponse) GetCreationDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value
// and a boolean to check if the value has been set.
func (o *AddressUnitResponse) GetCreationDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationDate, true
}

// SetCreationDate sets field value
func (o *AddressUnitResponse) SetCreationDate(v time.Time) {
	o.CreationDate = v
}

// GetRedeemDate returns the RedeemDate field value
func (o *AddressUnitResponse) GetRedeemDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.RedeemDate
}

// GetRedeemDateOk returns a tuple with the RedeemDate field value
// and a boolean to check if the value has been set.
func (o *AddressUnitResponse) GetRedeemDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RedeemDate, true
}

// SetRedeemDate sets field value
func (o *AddressUnitResponse) SetRedeemDate(v time.Time) {
	o.RedeemDate = v
}

// GetRedeemResult returns the RedeemResult field value if set, zero value otherwise.
func (o *AddressUnitResponse) GetRedeemResult() string {
	if o == nil || IsNil(o.RedeemResult) {
		var ret string
		return ret
	}
	return *o.RedeemResult
}

// GetRedeemResultOk returns a tuple with the RedeemResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressUnitResponse) GetRedeemResultOk() (*string, bool) {
	if o == nil || IsNil(o.RedeemResult) {
		return nil, false
	}
	return o.RedeemResult, true
}

// HasRedeemResult returns a boolean if a field has been set.
func (o *AddressUnitResponse) HasRedeemResult() bool {
	if o != nil && !IsNil(o.RedeemResult) {
		return true
	}

	return false
}

// SetRedeemResult gets a reference to the given string and assigns it to the RedeemResult field.
func (o *AddressUnitResponse) SetRedeemResult(v string) {
	o.RedeemResult = &v
}

func (o AddressUnitResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressUnitResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.AddressId) {
		toSerialize["addressId"] = o.AddressId
	}
	if !IsNil(o.AddressTokenId) {
		toSerialize["addressTokenId"] = o.AddressTokenId
	}
	if !IsNil(o.OperationId) {
		toSerialize["operationId"] = o.OperationId
	}
	toSerialize["creationDate"] = o.CreationDate
	toSerialize["redeemDate"] = o.RedeemDate
	if !IsNil(o.RedeemResult) {
		toSerialize["redeemResult"] = o.RedeemResult
	}
	return toSerialize, nil
}

func (o *AddressUnitResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"creationDate",
		"redeemDate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddressUnitResponse := _AddressUnitResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddressUnitResponse)

	if err != nil {
		return err
	}

	*o = AddressUnitResponse(varAddressUnitResponse)

	return err
}

type NullableAddressUnitResponse struct {
	value *AddressUnitResponse
	isSet bool
}

func (v NullableAddressUnitResponse) Get() *AddressUnitResponse {
	return v.value
}

func (v *NullableAddressUnitResponse) Set(val *AddressUnitResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressUnitResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressUnitResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressUnitResponse(val *AddressUnitResponse) *NullableAddressUnitResponse {
	return &NullableAddressUnitResponse{value: val, isSet: true}
}

func (v NullableAddressUnitResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressUnitResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


