/*
Nuki API

The Nuki Web Api

API version: 3.9.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Encoding type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Encoding{}

// Encoding struct for Encoding
type Encoding struct {
	Description *string `json:"description,omitempty"`
	Name *string `json:"name,omitempty"`
	Parent *Metadata `json:"parent,omitempty"`
}

// NewEncoding instantiates a new Encoding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncoding() *Encoding {
	this := Encoding{}
	return &this
}

// NewEncodingWithDefaults instantiates a new Encoding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncodingWithDefaults() *Encoding {
	this := Encoding{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Encoding) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Encoding) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Encoding) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Encoding) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Encoding) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Encoding) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Encoding) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Encoding) SetName(v string) {
	o.Name = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *Encoding) GetParent() Metadata {
	if o == nil || IsNil(o.Parent) {
		var ret Metadata
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Encoding) GetParentOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *Encoding) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given Metadata and assigns it to the Parent field.
func (o *Encoding) SetParent(v Metadata) {
	o.Parent = &v
}

func (o Encoding) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Encoding) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	return toSerialize, nil
}

type NullableEncoding struct {
	value *Encoding
	isSet bool
}

func (v NullableEncoding) Get() *Encoding {
	return v.value
}

func (v *NullableEncoding) Set(val *Encoding) {
	v.value = val
	v.isSet = true
}

func (v NullableEncoding) IsSet() bool {
	return v.isSet
}

func (v *NullableEncoding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncoding(val *Encoding) *NullableEncoding {
	return &NullableEncoding{value: val, isSet: true}
}

func (v NullableEncoding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncoding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


