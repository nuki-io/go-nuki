/*
Nuki API

The Nuki Web Api

API version: 0.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the SmartlockAuth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartlockAuth{}

// SmartlockAuth struct for SmartlockAuth
type SmartlockAuth struct {
	// The unique id for the smartlock authorization
	Id string `json:"id"`
	// The smartlock id
	SmartlockId int64 `json:"smartlockId"`
	// The id of the linked account user
	AccountUserId *int32 `json:"accountUserId,omitempty"`
	// The smartlock authorization id
	AuthId *int32 `json:"authId,omitempty"`
	// The keypad code (only for type keypad)
	Code *int32 `json:"code,omitempty"`
	Fingerprints *map[string]string `json:"fingerprints,omitempty"`
	// The type of the authorization: 0 .. app, 1 .. bridge, 2 .. fob, 3 .. keypad, 13 .. keypad code, 14 .. z-key, 15 .. virtual
	Type int32 `json:"type"`
	// The name of the authorization (max 32 chars)
	Name string `json:"name"`
	// True if the auth is enabled
	Enabled bool `json:"enabled"`
	// True if the auth has remote access
	RemoteAllowed bool `json:"remoteAllowed"`
	// The lock count
	LockCount int32 `json:"lockCount"`
	// The allowed from date
	AllowedFromDate *time.Time `json:"allowedFromDate,omitempty"`
	// The allowed until date
	AllowedUntilDate *time.Time `json:"allowedUntilDate,omitempty"`
	// The allowed weekdays bitmask: 64 .. monday, 32 .. tuesday, 16 .. wednesday, 8 .. thursday, 4 .. friday, 2 .. saturday, 1 .. sunday
	AllowedWeekDays *int32 `json:"allowedWeekDays,omitempty"`
	// The allowed from time (in minutes from midnight)
	AllowedFromTime *int32 `json:"allowedFromTime,omitempty"`
	// The allowed until time (in minutes from midnight)
	AllowedUntilTime *int32 `json:"allowedUntilTime,omitempty"`
	// The last active date
	LastActiveDate *time.Time `json:"lastActiveDate,omitempty"`
	// The creation date
	CreationDate *time.Time `json:"creationDate,omitempty"`
	// The update date
	UpdateDate *time.Time `json:"updateDate,omitempty"`
	OperationId *ObjectId `json:"operationId,omitempty"`
	// In case of any error, it contains the error message
	Error *string `json:"error,omitempty"`
	// The ID of the Nuki App
	AppId *int32 `json:"appId,omitempty"`
	AuthTypeAsString *string `json:"authTypeAsString,omitempty"`
}

type _SmartlockAuth SmartlockAuth

// NewSmartlockAuth instantiates a new SmartlockAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartlockAuth(id string, smartlockId int64, type_ int32, name string, enabled bool, remoteAllowed bool, lockCount int32) *SmartlockAuth {
	this := SmartlockAuth{}
	this.Id = id
	this.SmartlockId = smartlockId
	this.Type = type_
	this.Name = name
	this.Enabled = enabled
	this.RemoteAllowed = remoteAllowed
	this.LockCount = lockCount
	return &this
}

// NewSmartlockAuthWithDefaults instantiates a new SmartlockAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartlockAuthWithDefaults() *SmartlockAuth {
	this := SmartlockAuth{}
	return &this
}

// GetId returns the Id field value
func (o *SmartlockAuth) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SmartlockAuth) SetId(v string) {
	o.Id = v
}

// GetSmartlockId returns the SmartlockId field value
func (o *SmartlockAuth) GetSmartlockId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SmartlockId
}

// GetSmartlockIdOk returns a tuple with the SmartlockId field value
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetSmartlockIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SmartlockId, true
}

// SetSmartlockId sets field value
func (o *SmartlockAuth) SetSmartlockId(v int64) {
	o.SmartlockId = v
}

// GetAccountUserId returns the AccountUserId field value if set, zero value otherwise.
func (o *SmartlockAuth) GetAccountUserId() int32 {
	if o == nil || IsNil(o.AccountUserId) {
		var ret int32
		return ret
	}
	return *o.AccountUserId
}

// GetAccountUserIdOk returns a tuple with the AccountUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetAccountUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AccountUserId) {
		return nil, false
	}
	return o.AccountUserId, true
}

// HasAccountUserId returns a boolean if a field has been set.
func (o *SmartlockAuth) HasAccountUserId() bool {
	if o != nil && !IsNil(o.AccountUserId) {
		return true
	}

	return false
}

// SetAccountUserId gets a reference to the given int32 and assigns it to the AccountUserId field.
func (o *SmartlockAuth) SetAccountUserId(v int32) {
	o.AccountUserId = &v
}

// GetAuthId returns the AuthId field value if set, zero value otherwise.
func (o *SmartlockAuth) GetAuthId() int32 {
	if o == nil || IsNil(o.AuthId) {
		var ret int32
		return ret
	}
	return *o.AuthId
}

// GetAuthIdOk returns a tuple with the AuthId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetAuthIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AuthId) {
		return nil, false
	}
	return o.AuthId, true
}

// HasAuthId returns a boolean if a field has been set.
func (o *SmartlockAuth) HasAuthId() bool {
	if o != nil && !IsNil(o.AuthId) {
		return true
	}

	return false
}

// SetAuthId gets a reference to the given int32 and assigns it to the AuthId field.
func (o *SmartlockAuth) SetAuthId(v int32) {
	o.AuthId = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *SmartlockAuth) GetCode() int32 {
	if o == nil || IsNil(o.Code) {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *SmartlockAuth) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *SmartlockAuth) SetCode(v int32) {
	o.Code = &v
}

// GetFingerprints returns the Fingerprints field value if set, zero value otherwise.
func (o *SmartlockAuth) GetFingerprints() map[string]string {
	if o == nil || IsNil(o.Fingerprints) {
		var ret map[string]string
		return ret
	}
	return *o.Fingerprints
}

// GetFingerprintsOk returns a tuple with the Fingerprints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetFingerprintsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Fingerprints) {
		return nil, false
	}
	return o.Fingerprints, true
}

// HasFingerprints returns a boolean if a field has been set.
func (o *SmartlockAuth) HasFingerprints() bool {
	if o != nil && !IsNil(o.Fingerprints) {
		return true
	}

	return false
}

// SetFingerprints gets a reference to the given map[string]string and assigns it to the Fingerprints field.
func (o *SmartlockAuth) SetFingerprints(v map[string]string) {
	o.Fingerprints = &v
}

// GetType returns the Type field value
func (o *SmartlockAuth) GetType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SmartlockAuth) SetType(v int32) {
	o.Type = v
}

// GetName returns the Name field value
func (o *SmartlockAuth) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SmartlockAuth) SetName(v string) {
	o.Name = v
}

// GetEnabled returns the Enabled field value
func (o *SmartlockAuth) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *SmartlockAuth) SetEnabled(v bool) {
	o.Enabled = v
}

// GetRemoteAllowed returns the RemoteAllowed field value
func (o *SmartlockAuth) GetRemoteAllowed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RemoteAllowed
}

// GetRemoteAllowedOk returns a tuple with the RemoteAllowed field value
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetRemoteAllowedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteAllowed, true
}

// SetRemoteAllowed sets field value
func (o *SmartlockAuth) SetRemoteAllowed(v bool) {
	o.RemoteAllowed = v
}

// GetLockCount returns the LockCount field value
func (o *SmartlockAuth) GetLockCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LockCount
}

// GetLockCountOk returns a tuple with the LockCount field value
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetLockCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LockCount, true
}

// SetLockCount sets field value
func (o *SmartlockAuth) SetLockCount(v int32) {
	o.LockCount = v
}

// GetAllowedFromDate returns the AllowedFromDate field value if set, zero value otherwise.
func (o *SmartlockAuth) GetAllowedFromDate() time.Time {
	if o == nil || IsNil(o.AllowedFromDate) {
		var ret time.Time
		return ret
	}
	return *o.AllowedFromDate
}

// GetAllowedFromDateOk returns a tuple with the AllowedFromDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetAllowedFromDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AllowedFromDate) {
		return nil, false
	}
	return o.AllowedFromDate, true
}

// HasAllowedFromDate returns a boolean if a field has been set.
func (o *SmartlockAuth) HasAllowedFromDate() bool {
	if o != nil && !IsNil(o.AllowedFromDate) {
		return true
	}

	return false
}

// SetAllowedFromDate gets a reference to the given time.Time and assigns it to the AllowedFromDate field.
func (o *SmartlockAuth) SetAllowedFromDate(v time.Time) {
	o.AllowedFromDate = &v
}

// GetAllowedUntilDate returns the AllowedUntilDate field value if set, zero value otherwise.
func (o *SmartlockAuth) GetAllowedUntilDate() time.Time {
	if o == nil || IsNil(o.AllowedUntilDate) {
		var ret time.Time
		return ret
	}
	return *o.AllowedUntilDate
}

// GetAllowedUntilDateOk returns a tuple with the AllowedUntilDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetAllowedUntilDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AllowedUntilDate) {
		return nil, false
	}
	return o.AllowedUntilDate, true
}

// HasAllowedUntilDate returns a boolean if a field has been set.
func (o *SmartlockAuth) HasAllowedUntilDate() bool {
	if o != nil && !IsNil(o.AllowedUntilDate) {
		return true
	}

	return false
}

// SetAllowedUntilDate gets a reference to the given time.Time and assigns it to the AllowedUntilDate field.
func (o *SmartlockAuth) SetAllowedUntilDate(v time.Time) {
	o.AllowedUntilDate = &v
}

// GetAllowedWeekDays returns the AllowedWeekDays field value if set, zero value otherwise.
func (o *SmartlockAuth) GetAllowedWeekDays() int32 {
	if o == nil || IsNil(o.AllowedWeekDays) {
		var ret int32
		return ret
	}
	return *o.AllowedWeekDays
}

// GetAllowedWeekDaysOk returns a tuple with the AllowedWeekDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetAllowedWeekDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.AllowedWeekDays) {
		return nil, false
	}
	return o.AllowedWeekDays, true
}

// HasAllowedWeekDays returns a boolean if a field has been set.
func (o *SmartlockAuth) HasAllowedWeekDays() bool {
	if o != nil && !IsNil(o.AllowedWeekDays) {
		return true
	}

	return false
}

// SetAllowedWeekDays gets a reference to the given int32 and assigns it to the AllowedWeekDays field.
func (o *SmartlockAuth) SetAllowedWeekDays(v int32) {
	o.AllowedWeekDays = &v
}

// GetAllowedFromTime returns the AllowedFromTime field value if set, zero value otherwise.
func (o *SmartlockAuth) GetAllowedFromTime() int32 {
	if o == nil || IsNil(o.AllowedFromTime) {
		var ret int32
		return ret
	}
	return *o.AllowedFromTime
}

// GetAllowedFromTimeOk returns a tuple with the AllowedFromTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetAllowedFromTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.AllowedFromTime) {
		return nil, false
	}
	return o.AllowedFromTime, true
}

// HasAllowedFromTime returns a boolean if a field has been set.
func (o *SmartlockAuth) HasAllowedFromTime() bool {
	if o != nil && !IsNil(o.AllowedFromTime) {
		return true
	}

	return false
}

// SetAllowedFromTime gets a reference to the given int32 and assigns it to the AllowedFromTime field.
func (o *SmartlockAuth) SetAllowedFromTime(v int32) {
	o.AllowedFromTime = &v
}

// GetAllowedUntilTime returns the AllowedUntilTime field value if set, zero value otherwise.
func (o *SmartlockAuth) GetAllowedUntilTime() int32 {
	if o == nil || IsNil(o.AllowedUntilTime) {
		var ret int32
		return ret
	}
	return *o.AllowedUntilTime
}

// GetAllowedUntilTimeOk returns a tuple with the AllowedUntilTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetAllowedUntilTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.AllowedUntilTime) {
		return nil, false
	}
	return o.AllowedUntilTime, true
}

// HasAllowedUntilTime returns a boolean if a field has been set.
func (o *SmartlockAuth) HasAllowedUntilTime() bool {
	if o != nil && !IsNil(o.AllowedUntilTime) {
		return true
	}

	return false
}

// SetAllowedUntilTime gets a reference to the given int32 and assigns it to the AllowedUntilTime field.
func (o *SmartlockAuth) SetAllowedUntilTime(v int32) {
	o.AllowedUntilTime = &v
}

// GetLastActiveDate returns the LastActiveDate field value if set, zero value otherwise.
func (o *SmartlockAuth) GetLastActiveDate() time.Time {
	if o == nil || IsNil(o.LastActiveDate) {
		var ret time.Time
		return ret
	}
	return *o.LastActiveDate
}

// GetLastActiveDateOk returns a tuple with the LastActiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetLastActiveDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastActiveDate) {
		return nil, false
	}
	return o.LastActiveDate, true
}

// HasLastActiveDate returns a boolean if a field has been set.
func (o *SmartlockAuth) HasLastActiveDate() bool {
	if o != nil && !IsNil(o.LastActiveDate) {
		return true
	}

	return false
}

// SetLastActiveDate gets a reference to the given time.Time and assigns it to the LastActiveDate field.
func (o *SmartlockAuth) SetLastActiveDate(v time.Time) {
	o.LastActiveDate = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *SmartlockAuth) GetCreationDate() time.Time {
	if o == nil || IsNil(o.CreationDate) {
		var ret time.Time
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetCreationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *SmartlockAuth) HasCreationDate() bool {
	if o != nil && !IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given time.Time and assigns it to the CreationDate field.
func (o *SmartlockAuth) SetCreationDate(v time.Time) {
	o.CreationDate = &v
}

// GetUpdateDate returns the UpdateDate field value if set, zero value otherwise.
func (o *SmartlockAuth) GetUpdateDate() time.Time {
	if o == nil || IsNil(o.UpdateDate) {
		var ret time.Time
		return ret
	}
	return *o.UpdateDate
}

// GetUpdateDateOk returns a tuple with the UpdateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetUpdateDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdateDate) {
		return nil, false
	}
	return o.UpdateDate, true
}

// HasUpdateDate returns a boolean if a field has been set.
func (o *SmartlockAuth) HasUpdateDate() bool {
	if o != nil && !IsNil(o.UpdateDate) {
		return true
	}

	return false
}

// SetUpdateDate gets a reference to the given time.Time and assigns it to the UpdateDate field.
func (o *SmartlockAuth) SetUpdateDate(v time.Time) {
	o.UpdateDate = &v
}

// GetOperationId returns the OperationId field value if set, zero value otherwise.
func (o *SmartlockAuth) GetOperationId() ObjectId {
	if o == nil || IsNil(o.OperationId) {
		var ret ObjectId
		return ret
	}
	return *o.OperationId
}

// GetOperationIdOk returns a tuple with the OperationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetOperationIdOk() (*ObjectId, bool) {
	if o == nil || IsNil(o.OperationId) {
		return nil, false
	}
	return o.OperationId, true
}

// HasOperationId returns a boolean if a field has been set.
func (o *SmartlockAuth) HasOperationId() bool {
	if o != nil && !IsNil(o.OperationId) {
		return true
	}

	return false
}

// SetOperationId gets a reference to the given ObjectId and assigns it to the OperationId field.
func (o *SmartlockAuth) SetOperationId(v ObjectId) {
	o.OperationId = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *SmartlockAuth) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *SmartlockAuth) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *SmartlockAuth) SetError(v string) {
	o.Error = &v
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *SmartlockAuth) GetAppId() int32 {
	if o == nil || IsNil(o.AppId) {
		var ret int32
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetAppIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *SmartlockAuth) HasAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given int32 and assigns it to the AppId field.
func (o *SmartlockAuth) SetAppId(v int32) {
	o.AppId = &v
}

// GetAuthTypeAsString returns the AuthTypeAsString field value if set, zero value otherwise.
func (o *SmartlockAuth) GetAuthTypeAsString() string {
	if o == nil || IsNil(o.AuthTypeAsString) {
		var ret string
		return ret
	}
	return *o.AuthTypeAsString
}

// GetAuthTypeAsStringOk returns a tuple with the AuthTypeAsString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAuth) GetAuthTypeAsStringOk() (*string, bool) {
	if o == nil || IsNil(o.AuthTypeAsString) {
		return nil, false
	}
	return o.AuthTypeAsString, true
}

// HasAuthTypeAsString returns a boolean if a field has been set.
func (o *SmartlockAuth) HasAuthTypeAsString() bool {
	if o != nil && !IsNil(o.AuthTypeAsString) {
		return true
	}

	return false
}

// SetAuthTypeAsString gets a reference to the given string and assigns it to the AuthTypeAsString field.
func (o *SmartlockAuth) SetAuthTypeAsString(v string) {
	o.AuthTypeAsString = &v
}

func (o SmartlockAuth) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartlockAuth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["smartlockId"] = o.SmartlockId
	if !IsNil(o.AccountUserId) {
		toSerialize["accountUserId"] = o.AccountUserId
	}
	if !IsNil(o.AuthId) {
		toSerialize["authId"] = o.AuthId
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Fingerprints) {
		toSerialize["fingerprints"] = o.Fingerprints
	}
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name
	toSerialize["enabled"] = o.Enabled
	toSerialize["remoteAllowed"] = o.RemoteAllowed
	toSerialize["lockCount"] = o.LockCount
	if !IsNil(o.AllowedFromDate) {
		toSerialize["allowedFromDate"] = o.AllowedFromDate
	}
	if !IsNil(o.AllowedUntilDate) {
		toSerialize["allowedUntilDate"] = o.AllowedUntilDate
	}
	if !IsNil(o.AllowedWeekDays) {
		toSerialize["allowedWeekDays"] = o.AllowedWeekDays
	}
	if !IsNil(o.AllowedFromTime) {
		toSerialize["allowedFromTime"] = o.AllowedFromTime
	}
	if !IsNil(o.AllowedUntilTime) {
		toSerialize["allowedUntilTime"] = o.AllowedUntilTime
	}
	if !IsNil(o.LastActiveDate) {
		toSerialize["lastActiveDate"] = o.LastActiveDate
	}
	if !IsNil(o.CreationDate) {
		toSerialize["creationDate"] = o.CreationDate
	}
	if !IsNil(o.UpdateDate) {
		toSerialize["updateDate"] = o.UpdateDate
	}
	if !IsNil(o.OperationId) {
		toSerialize["operationId"] = o.OperationId
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.AppId) {
		toSerialize["appId"] = o.AppId
	}
	if !IsNil(o.AuthTypeAsString) {
		toSerialize["authTypeAsString"] = o.AuthTypeAsString
	}
	return toSerialize, nil
}

func (o *SmartlockAuth) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"smartlockId",
		"type",
		"name",
		"enabled",
		"remoteAllowed",
		"lockCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmartlockAuth := _SmartlockAuth{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSmartlockAuth)

	if err != nil {
		return err
	}

	*o = SmartlockAuth(varSmartlockAuth)

	return err
}

type NullableSmartlockAuth struct {
	value *SmartlockAuth
	isSet bool
}

func (v NullableSmartlockAuth) Get() *SmartlockAuth {
	return v.value
}

func (v *NullableSmartlockAuth) Set(val *SmartlockAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartlockAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartlockAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartlockAuth(val *SmartlockAuth) *NullableSmartlockAuth {
	return &NullableSmartlockAuth{value: val, isSet: true}
}

func (v NullableSmartlockAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartlockAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


