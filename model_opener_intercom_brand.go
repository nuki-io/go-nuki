/*
Nuki API

The Nuki Web Api

API version: 0.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OpenerIntercomBrand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenerIntercomBrand{}

// OpenerIntercomBrand struct for OpenerIntercomBrand
type OpenerIntercomBrand struct {
	// The brand ID
	BrandId int32 `json:"brandId"`
	// The brand name
	Brand string `json:"brand"`
}

type _OpenerIntercomBrand OpenerIntercomBrand

// NewOpenerIntercomBrand instantiates a new OpenerIntercomBrand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenerIntercomBrand(brandId int32, brand string) *OpenerIntercomBrand {
	this := OpenerIntercomBrand{}
	this.BrandId = brandId
	this.Brand = brand
	return &this
}

// NewOpenerIntercomBrandWithDefaults instantiates a new OpenerIntercomBrand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenerIntercomBrandWithDefaults() *OpenerIntercomBrand {
	this := OpenerIntercomBrand{}
	return &this
}

// GetBrandId returns the BrandId field value
func (o *OpenerIntercomBrand) GetBrandId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BrandId
}

// GetBrandIdOk returns a tuple with the BrandId field value
// and a boolean to check if the value has been set.
func (o *OpenerIntercomBrand) GetBrandIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BrandId, true
}

// SetBrandId sets field value
func (o *OpenerIntercomBrand) SetBrandId(v int32) {
	o.BrandId = v
}

// GetBrand returns the Brand field value
func (o *OpenerIntercomBrand) GetBrand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Brand
}

// GetBrandOk returns a tuple with the Brand field value
// and a boolean to check if the value has been set.
func (o *OpenerIntercomBrand) GetBrandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Brand, true
}

// SetBrand sets field value
func (o *OpenerIntercomBrand) SetBrand(v string) {
	o.Brand = v
}

func (o OpenerIntercomBrand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenerIntercomBrand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["brandId"] = o.BrandId
	toSerialize["brand"] = o.Brand
	return toSerialize, nil
}

func (o *OpenerIntercomBrand) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"brandId",
		"brand",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOpenerIntercomBrand := _OpenerIntercomBrand{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOpenerIntercomBrand)

	if err != nil {
		return err
	}

	*o = OpenerIntercomBrand(varOpenerIntercomBrand)

	return err
}

type NullableOpenerIntercomBrand struct {
	value *OpenerIntercomBrand
	isSet bool
}

func (v NullableOpenerIntercomBrand) Get() *OpenerIntercomBrand {
	return v.value
}

func (v *NullableOpenerIntercomBrand) Set(val *OpenerIntercomBrand) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenerIntercomBrand) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenerIntercomBrand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenerIntercomBrand(val *OpenerIntercomBrand) *NullableOpenerIntercomBrand {
	return &NullableOpenerIntercomBrand{value: val, isSet: true}
}

func (v NullableOpenerIntercomBrand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenerIntercomBrand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


