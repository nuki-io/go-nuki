/*
Nuki API

The Nuki Web Api

API version: 4.0.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Response{}

// Response struct for Response
type Response struct {
	Attributes map[string]map[string]interface{} `json:"attributes,omitempty"`
	CacheDirectives []CacheDirective `json:"cacheDirectives,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Entity *Representation `json:"entity,omitempty"`
	OnError map[string]interface{} `json:"onError,omitempty"`
	OnSent map[string]interface{} `json:"onSent,omitempty"`
	RecipientsInfo []RecipientInfo `json:"recipientsInfo,omitempty"`
	Warnings []Warning `json:"warnings,omitempty"`
	AccessControlAllowCredentials *bool `json:"accessControlAllowCredentials,omitempty"`
	AccessControlAllowHeaders []string `json:"accessControlAllowHeaders,omitempty"`
	AccessControlAllowMethods []Method `json:"accessControlAllowMethods,omitempty"`
	AccessControlAllowOrigin *string `json:"accessControlAllowOrigin,omitempty"`
	AccessControlExposeHeaders []string `json:"accessControlExposeHeaders,omitempty"`
	AccessControlMaxAge *int32 `json:"accessControlMaxAge,omitempty"`
	Age *int32 `json:"age,omitempty"`
	AllowedMethods []Method `json:"allowedMethods,omitempty"`
	AuthenticationInfo *AuthenticationInfo `json:"authenticationInfo,omitempty"`
	AutoCommitting *bool `json:"autoCommitting,omitempty"`
	ChallengeRequests []ChallengeRequest `json:"challengeRequests,omitempty"`
	Committed *bool `json:"committed,omitempty"`
	CookieSettings []CookieSetting `json:"cookieSettings,omitempty"`
	Dimensions []string `json:"dimensions,omitempty"`
	LocationRef *Reference `json:"locationRef,omitempty"`
	ProxyChallengeRequests []ChallengeRequest `json:"proxyChallengeRequests,omitempty"`
	Request *Request `json:"request,omitempty"`
	RetryAfter *time.Time `json:"retryAfter,omitempty"`
	ServerInfo *ServerInfo `json:"serverInfo,omitempty"`
	Status *Status `json:"status,omitempty"`
	Final *bool `json:"final,omitempty"`
	Confidential *bool `json:"confidential,omitempty"`
	Provisional *bool `json:"provisional,omitempty"`
	Headers []Header `json:"headers,omitempty"`
	EntityAsText *string `json:"entityAsText,omitempty"`
	EntityAvailable *bool `json:"entityAvailable,omitempty"`
}

// NewResponse instantiates a new Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponse() *Response {
	this := Response{}
	return &this
}

// NewResponseWithDefaults instantiates a new Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseWithDefaults() *Response {
	this := Response{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Response) GetAttributes() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetAttributesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Attributes) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Response) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]map[string]interface{} and assigns it to the Attributes field.
func (o *Response) SetAttributes(v map[string]map[string]interface{}) {
	o.Attributes = v
}

// GetCacheDirectives returns the CacheDirectives field value if set, zero value otherwise.
func (o *Response) GetCacheDirectives() []CacheDirective {
	if o == nil || IsNil(o.CacheDirectives) {
		var ret []CacheDirective
		return ret
	}
	return o.CacheDirectives
}

// GetCacheDirectivesOk returns a tuple with the CacheDirectives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetCacheDirectivesOk() ([]CacheDirective, bool) {
	if o == nil || IsNil(o.CacheDirectives) {
		return nil, false
	}
	return o.CacheDirectives, true
}

// HasCacheDirectives returns a boolean if a field has been set.
func (o *Response) HasCacheDirectives() bool {
	if o != nil && !IsNil(o.CacheDirectives) {
		return true
	}

	return false
}

// SetCacheDirectives gets a reference to the given []CacheDirective and assigns it to the CacheDirectives field.
func (o *Response) SetCacheDirectives(v []CacheDirective) {
	o.CacheDirectives = v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *Response) GetDate() time.Time {
	if o == nil || IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *Response) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *Response) SetDate(v time.Time) {
	o.Date = &v
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *Response) GetEntity() Representation {
	if o == nil || IsNil(o.Entity) {
		var ret Representation
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetEntityOk() (*Representation, bool) {
	if o == nil || IsNil(o.Entity) {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *Response) HasEntity() bool {
	if o != nil && !IsNil(o.Entity) {
		return true
	}

	return false
}

// SetEntity gets a reference to the given Representation and assigns it to the Entity field.
func (o *Response) SetEntity(v Representation) {
	o.Entity = &v
}

// GetOnError returns the OnError field value if set, zero value otherwise.
func (o *Response) GetOnError() map[string]interface{} {
	if o == nil || IsNil(o.OnError) {
		var ret map[string]interface{}
		return ret
	}
	return o.OnError
}

// GetOnErrorOk returns a tuple with the OnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetOnErrorOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.OnError) {
		return map[string]interface{}{}, false
	}
	return o.OnError, true
}

// HasOnError returns a boolean if a field has been set.
func (o *Response) HasOnError() bool {
	if o != nil && !IsNil(o.OnError) {
		return true
	}

	return false
}

// SetOnError gets a reference to the given map[string]interface{} and assigns it to the OnError field.
func (o *Response) SetOnError(v map[string]interface{}) {
	o.OnError = v
}

// GetOnSent returns the OnSent field value if set, zero value otherwise.
func (o *Response) GetOnSent() map[string]interface{} {
	if o == nil || IsNil(o.OnSent) {
		var ret map[string]interface{}
		return ret
	}
	return o.OnSent
}

// GetOnSentOk returns a tuple with the OnSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetOnSentOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.OnSent) {
		return map[string]interface{}{}, false
	}
	return o.OnSent, true
}

// HasOnSent returns a boolean if a field has been set.
func (o *Response) HasOnSent() bool {
	if o != nil && !IsNil(o.OnSent) {
		return true
	}

	return false
}

// SetOnSent gets a reference to the given map[string]interface{} and assigns it to the OnSent field.
func (o *Response) SetOnSent(v map[string]interface{}) {
	o.OnSent = v
}

// GetRecipientsInfo returns the RecipientsInfo field value if set, zero value otherwise.
func (o *Response) GetRecipientsInfo() []RecipientInfo {
	if o == nil || IsNil(o.RecipientsInfo) {
		var ret []RecipientInfo
		return ret
	}
	return o.RecipientsInfo
}

// GetRecipientsInfoOk returns a tuple with the RecipientsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetRecipientsInfoOk() ([]RecipientInfo, bool) {
	if o == nil || IsNil(o.RecipientsInfo) {
		return nil, false
	}
	return o.RecipientsInfo, true
}

// HasRecipientsInfo returns a boolean if a field has been set.
func (o *Response) HasRecipientsInfo() bool {
	if o != nil && !IsNil(o.RecipientsInfo) {
		return true
	}

	return false
}

// SetRecipientsInfo gets a reference to the given []RecipientInfo and assigns it to the RecipientsInfo field.
func (o *Response) SetRecipientsInfo(v []RecipientInfo) {
	o.RecipientsInfo = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *Response) GetWarnings() []Warning {
	if o == nil || IsNil(o.Warnings) {
		var ret []Warning
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetWarningsOk() ([]Warning, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *Response) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []Warning and assigns it to the Warnings field.
func (o *Response) SetWarnings(v []Warning) {
	o.Warnings = v
}

// GetAccessControlAllowCredentials returns the AccessControlAllowCredentials field value if set, zero value otherwise.
func (o *Response) GetAccessControlAllowCredentials() bool {
	if o == nil || IsNil(o.AccessControlAllowCredentials) {
		var ret bool
		return ret
	}
	return *o.AccessControlAllowCredentials
}

// GetAccessControlAllowCredentialsOk returns a tuple with the AccessControlAllowCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetAccessControlAllowCredentialsOk() (*bool, bool) {
	if o == nil || IsNil(o.AccessControlAllowCredentials) {
		return nil, false
	}
	return o.AccessControlAllowCredentials, true
}

// HasAccessControlAllowCredentials returns a boolean if a field has been set.
func (o *Response) HasAccessControlAllowCredentials() bool {
	if o != nil && !IsNil(o.AccessControlAllowCredentials) {
		return true
	}

	return false
}

// SetAccessControlAllowCredentials gets a reference to the given bool and assigns it to the AccessControlAllowCredentials field.
func (o *Response) SetAccessControlAllowCredentials(v bool) {
	o.AccessControlAllowCredentials = &v
}

// GetAccessControlAllowHeaders returns the AccessControlAllowHeaders field value if set, zero value otherwise.
func (o *Response) GetAccessControlAllowHeaders() []string {
	if o == nil || IsNil(o.AccessControlAllowHeaders) {
		var ret []string
		return ret
	}
	return o.AccessControlAllowHeaders
}

// GetAccessControlAllowHeadersOk returns a tuple with the AccessControlAllowHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetAccessControlAllowHeadersOk() ([]string, bool) {
	if o == nil || IsNil(o.AccessControlAllowHeaders) {
		return nil, false
	}
	return o.AccessControlAllowHeaders, true
}

// HasAccessControlAllowHeaders returns a boolean if a field has been set.
func (o *Response) HasAccessControlAllowHeaders() bool {
	if o != nil && !IsNil(o.AccessControlAllowHeaders) {
		return true
	}

	return false
}

// SetAccessControlAllowHeaders gets a reference to the given []string and assigns it to the AccessControlAllowHeaders field.
func (o *Response) SetAccessControlAllowHeaders(v []string) {
	o.AccessControlAllowHeaders = v
}

// GetAccessControlAllowMethods returns the AccessControlAllowMethods field value if set, zero value otherwise.
func (o *Response) GetAccessControlAllowMethods() []Method {
	if o == nil || IsNil(o.AccessControlAllowMethods) {
		var ret []Method
		return ret
	}
	return o.AccessControlAllowMethods
}

// GetAccessControlAllowMethodsOk returns a tuple with the AccessControlAllowMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetAccessControlAllowMethodsOk() ([]Method, bool) {
	if o == nil || IsNil(o.AccessControlAllowMethods) {
		return nil, false
	}
	return o.AccessControlAllowMethods, true
}

// HasAccessControlAllowMethods returns a boolean if a field has been set.
func (o *Response) HasAccessControlAllowMethods() bool {
	if o != nil && !IsNil(o.AccessControlAllowMethods) {
		return true
	}

	return false
}

// SetAccessControlAllowMethods gets a reference to the given []Method and assigns it to the AccessControlAllowMethods field.
func (o *Response) SetAccessControlAllowMethods(v []Method) {
	o.AccessControlAllowMethods = v
}

// GetAccessControlAllowOrigin returns the AccessControlAllowOrigin field value if set, zero value otherwise.
func (o *Response) GetAccessControlAllowOrigin() string {
	if o == nil || IsNil(o.AccessControlAllowOrigin) {
		var ret string
		return ret
	}
	return *o.AccessControlAllowOrigin
}

// GetAccessControlAllowOriginOk returns a tuple with the AccessControlAllowOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetAccessControlAllowOriginOk() (*string, bool) {
	if o == nil || IsNil(o.AccessControlAllowOrigin) {
		return nil, false
	}
	return o.AccessControlAllowOrigin, true
}

// HasAccessControlAllowOrigin returns a boolean if a field has been set.
func (o *Response) HasAccessControlAllowOrigin() bool {
	if o != nil && !IsNil(o.AccessControlAllowOrigin) {
		return true
	}

	return false
}

// SetAccessControlAllowOrigin gets a reference to the given string and assigns it to the AccessControlAllowOrigin field.
func (o *Response) SetAccessControlAllowOrigin(v string) {
	o.AccessControlAllowOrigin = &v
}

// GetAccessControlExposeHeaders returns the AccessControlExposeHeaders field value if set, zero value otherwise.
func (o *Response) GetAccessControlExposeHeaders() []string {
	if o == nil || IsNil(o.AccessControlExposeHeaders) {
		var ret []string
		return ret
	}
	return o.AccessControlExposeHeaders
}

// GetAccessControlExposeHeadersOk returns a tuple with the AccessControlExposeHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetAccessControlExposeHeadersOk() ([]string, bool) {
	if o == nil || IsNil(o.AccessControlExposeHeaders) {
		return nil, false
	}
	return o.AccessControlExposeHeaders, true
}

// HasAccessControlExposeHeaders returns a boolean if a field has been set.
func (o *Response) HasAccessControlExposeHeaders() bool {
	if o != nil && !IsNil(o.AccessControlExposeHeaders) {
		return true
	}

	return false
}

// SetAccessControlExposeHeaders gets a reference to the given []string and assigns it to the AccessControlExposeHeaders field.
func (o *Response) SetAccessControlExposeHeaders(v []string) {
	o.AccessControlExposeHeaders = v
}

// GetAccessControlMaxAge returns the AccessControlMaxAge field value if set, zero value otherwise.
func (o *Response) GetAccessControlMaxAge() int32 {
	if o == nil || IsNil(o.AccessControlMaxAge) {
		var ret int32
		return ret
	}
	return *o.AccessControlMaxAge
}

// GetAccessControlMaxAgeOk returns a tuple with the AccessControlMaxAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetAccessControlMaxAgeOk() (*int32, bool) {
	if o == nil || IsNil(o.AccessControlMaxAge) {
		return nil, false
	}
	return o.AccessControlMaxAge, true
}

// HasAccessControlMaxAge returns a boolean if a field has been set.
func (o *Response) HasAccessControlMaxAge() bool {
	if o != nil && !IsNil(o.AccessControlMaxAge) {
		return true
	}

	return false
}

// SetAccessControlMaxAge gets a reference to the given int32 and assigns it to the AccessControlMaxAge field.
func (o *Response) SetAccessControlMaxAge(v int32) {
	o.AccessControlMaxAge = &v
}

// GetAge returns the Age field value if set, zero value otherwise.
func (o *Response) GetAge() int32 {
	if o == nil || IsNil(o.Age) {
		var ret int32
		return ret
	}
	return *o.Age
}

// GetAgeOk returns a tuple with the Age field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetAgeOk() (*int32, bool) {
	if o == nil || IsNil(o.Age) {
		return nil, false
	}
	return o.Age, true
}

// HasAge returns a boolean if a field has been set.
func (o *Response) HasAge() bool {
	if o != nil && !IsNil(o.Age) {
		return true
	}

	return false
}

// SetAge gets a reference to the given int32 and assigns it to the Age field.
func (o *Response) SetAge(v int32) {
	o.Age = &v
}

// GetAllowedMethods returns the AllowedMethods field value if set, zero value otherwise.
func (o *Response) GetAllowedMethods() []Method {
	if o == nil || IsNil(o.AllowedMethods) {
		var ret []Method
		return ret
	}
	return o.AllowedMethods
}

// GetAllowedMethodsOk returns a tuple with the AllowedMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetAllowedMethodsOk() ([]Method, bool) {
	if o == nil || IsNil(o.AllowedMethods) {
		return nil, false
	}
	return o.AllowedMethods, true
}

// HasAllowedMethods returns a boolean if a field has been set.
func (o *Response) HasAllowedMethods() bool {
	if o != nil && !IsNil(o.AllowedMethods) {
		return true
	}

	return false
}

// SetAllowedMethods gets a reference to the given []Method and assigns it to the AllowedMethods field.
func (o *Response) SetAllowedMethods(v []Method) {
	o.AllowedMethods = v
}

// GetAuthenticationInfo returns the AuthenticationInfo field value if set, zero value otherwise.
func (o *Response) GetAuthenticationInfo() AuthenticationInfo {
	if o == nil || IsNil(o.AuthenticationInfo) {
		var ret AuthenticationInfo
		return ret
	}
	return *o.AuthenticationInfo
}

// GetAuthenticationInfoOk returns a tuple with the AuthenticationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetAuthenticationInfoOk() (*AuthenticationInfo, bool) {
	if o == nil || IsNil(o.AuthenticationInfo) {
		return nil, false
	}
	return o.AuthenticationInfo, true
}

// HasAuthenticationInfo returns a boolean if a field has been set.
func (o *Response) HasAuthenticationInfo() bool {
	if o != nil && !IsNil(o.AuthenticationInfo) {
		return true
	}

	return false
}

// SetAuthenticationInfo gets a reference to the given AuthenticationInfo and assigns it to the AuthenticationInfo field.
func (o *Response) SetAuthenticationInfo(v AuthenticationInfo) {
	o.AuthenticationInfo = &v
}

// GetAutoCommitting returns the AutoCommitting field value if set, zero value otherwise.
func (o *Response) GetAutoCommitting() bool {
	if o == nil || IsNil(o.AutoCommitting) {
		var ret bool
		return ret
	}
	return *o.AutoCommitting
}

// GetAutoCommittingOk returns a tuple with the AutoCommitting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetAutoCommittingOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoCommitting) {
		return nil, false
	}
	return o.AutoCommitting, true
}

// HasAutoCommitting returns a boolean if a field has been set.
func (o *Response) HasAutoCommitting() bool {
	if o != nil && !IsNil(o.AutoCommitting) {
		return true
	}

	return false
}

// SetAutoCommitting gets a reference to the given bool and assigns it to the AutoCommitting field.
func (o *Response) SetAutoCommitting(v bool) {
	o.AutoCommitting = &v
}

// GetChallengeRequests returns the ChallengeRequests field value if set, zero value otherwise.
func (o *Response) GetChallengeRequests() []ChallengeRequest {
	if o == nil || IsNil(o.ChallengeRequests) {
		var ret []ChallengeRequest
		return ret
	}
	return o.ChallengeRequests
}

// GetChallengeRequestsOk returns a tuple with the ChallengeRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetChallengeRequestsOk() ([]ChallengeRequest, bool) {
	if o == nil || IsNil(o.ChallengeRequests) {
		return nil, false
	}
	return o.ChallengeRequests, true
}

// HasChallengeRequests returns a boolean if a field has been set.
func (o *Response) HasChallengeRequests() bool {
	if o != nil && !IsNil(o.ChallengeRequests) {
		return true
	}

	return false
}

// SetChallengeRequests gets a reference to the given []ChallengeRequest and assigns it to the ChallengeRequests field.
func (o *Response) SetChallengeRequests(v []ChallengeRequest) {
	o.ChallengeRequests = v
}

// GetCommitted returns the Committed field value if set, zero value otherwise.
func (o *Response) GetCommitted() bool {
	if o == nil || IsNil(o.Committed) {
		var ret bool
		return ret
	}
	return *o.Committed
}

// GetCommittedOk returns a tuple with the Committed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetCommittedOk() (*bool, bool) {
	if o == nil || IsNil(o.Committed) {
		return nil, false
	}
	return o.Committed, true
}

// HasCommitted returns a boolean if a field has been set.
func (o *Response) HasCommitted() bool {
	if o != nil && !IsNil(o.Committed) {
		return true
	}

	return false
}

// SetCommitted gets a reference to the given bool and assigns it to the Committed field.
func (o *Response) SetCommitted(v bool) {
	o.Committed = &v
}

// GetCookieSettings returns the CookieSettings field value if set, zero value otherwise.
func (o *Response) GetCookieSettings() []CookieSetting {
	if o == nil || IsNil(o.CookieSettings) {
		var ret []CookieSetting
		return ret
	}
	return o.CookieSettings
}

// GetCookieSettingsOk returns a tuple with the CookieSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetCookieSettingsOk() ([]CookieSetting, bool) {
	if o == nil || IsNil(o.CookieSettings) {
		return nil, false
	}
	return o.CookieSettings, true
}

// HasCookieSettings returns a boolean if a field has been set.
func (o *Response) HasCookieSettings() bool {
	if o != nil && !IsNil(o.CookieSettings) {
		return true
	}

	return false
}

// SetCookieSettings gets a reference to the given []CookieSetting and assigns it to the CookieSettings field.
func (o *Response) SetCookieSettings(v []CookieSetting) {
	o.CookieSettings = v
}

// GetDimensions returns the Dimensions field value if set, zero value otherwise.
func (o *Response) GetDimensions() []string {
	if o == nil || IsNil(o.Dimensions) {
		var ret []string
		return ret
	}
	return o.Dimensions
}

// GetDimensionsOk returns a tuple with the Dimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetDimensionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Dimensions) {
		return nil, false
	}
	return o.Dimensions, true
}

// HasDimensions returns a boolean if a field has been set.
func (o *Response) HasDimensions() bool {
	if o != nil && !IsNil(o.Dimensions) {
		return true
	}

	return false
}

// SetDimensions gets a reference to the given []string and assigns it to the Dimensions field.
func (o *Response) SetDimensions(v []string) {
	o.Dimensions = v
}

// GetLocationRef returns the LocationRef field value if set, zero value otherwise.
func (o *Response) GetLocationRef() Reference {
	if o == nil || IsNil(o.LocationRef) {
		var ret Reference
		return ret
	}
	return *o.LocationRef
}

// GetLocationRefOk returns a tuple with the LocationRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetLocationRefOk() (*Reference, bool) {
	if o == nil || IsNil(o.LocationRef) {
		return nil, false
	}
	return o.LocationRef, true
}

// HasLocationRef returns a boolean if a field has been set.
func (o *Response) HasLocationRef() bool {
	if o != nil && !IsNil(o.LocationRef) {
		return true
	}

	return false
}

// SetLocationRef gets a reference to the given Reference and assigns it to the LocationRef field.
func (o *Response) SetLocationRef(v Reference) {
	o.LocationRef = &v
}

// GetProxyChallengeRequests returns the ProxyChallengeRequests field value if set, zero value otherwise.
func (o *Response) GetProxyChallengeRequests() []ChallengeRequest {
	if o == nil || IsNil(o.ProxyChallengeRequests) {
		var ret []ChallengeRequest
		return ret
	}
	return o.ProxyChallengeRequests
}

// GetProxyChallengeRequestsOk returns a tuple with the ProxyChallengeRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetProxyChallengeRequestsOk() ([]ChallengeRequest, bool) {
	if o == nil || IsNil(o.ProxyChallengeRequests) {
		return nil, false
	}
	return o.ProxyChallengeRequests, true
}

// HasProxyChallengeRequests returns a boolean if a field has been set.
func (o *Response) HasProxyChallengeRequests() bool {
	if o != nil && !IsNil(o.ProxyChallengeRequests) {
		return true
	}

	return false
}

// SetProxyChallengeRequests gets a reference to the given []ChallengeRequest and assigns it to the ProxyChallengeRequests field.
func (o *Response) SetProxyChallengeRequests(v []ChallengeRequest) {
	o.ProxyChallengeRequests = v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *Response) GetRequest() Request {
	if o == nil || IsNil(o.Request) {
		var ret Request
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetRequestOk() (*Request, bool) {
	if o == nil || IsNil(o.Request) {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *Response) HasRequest() bool {
	if o != nil && !IsNil(o.Request) {
		return true
	}

	return false
}

// SetRequest gets a reference to the given Request and assigns it to the Request field.
func (o *Response) SetRequest(v Request) {
	o.Request = &v
}

// GetRetryAfter returns the RetryAfter field value if set, zero value otherwise.
func (o *Response) GetRetryAfter() time.Time {
	if o == nil || IsNil(o.RetryAfter) {
		var ret time.Time
		return ret
	}
	return *o.RetryAfter
}

// GetRetryAfterOk returns a tuple with the RetryAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetRetryAfterOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RetryAfter) {
		return nil, false
	}
	return o.RetryAfter, true
}

// HasRetryAfter returns a boolean if a field has been set.
func (o *Response) HasRetryAfter() bool {
	if o != nil && !IsNil(o.RetryAfter) {
		return true
	}

	return false
}

// SetRetryAfter gets a reference to the given time.Time and assigns it to the RetryAfter field.
func (o *Response) SetRetryAfter(v time.Time) {
	o.RetryAfter = &v
}

// GetServerInfo returns the ServerInfo field value if set, zero value otherwise.
func (o *Response) GetServerInfo() ServerInfo {
	if o == nil || IsNil(o.ServerInfo) {
		var ret ServerInfo
		return ret
	}
	return *o.ServerInfo
}

// GetServerInfoOk returns a tuple with the ServerInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetServerInfoOk() (*ServerInfo, bool) {
	if o == nil || IsNil(o.ServerInfo) {
		return nil, false
	}
	return o.ServerInfo, true
}

// HasServerInfo returns a boolean if a field has been set.
func (o *Response) HasServerInfo() bool {
	if o != nil && !IsNil(o.ServerInfo) {
		return true
	}

	return false
}

// SetServerInfo gets a reference to the given ServerInfo and assigns it to the ServerInfo field.
func (o *Response) SetServerInfo(v ServerInfo) {
	o.ServerInfo = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Response) GetStatus() Status {
	if o == nil || IsNil(o.Status) {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetStatusOk() (*Status, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Response) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *Response) SetStatus(v Status) {
	o.Status = &v
}

// GetFinal returns the Final field value if set, zero value otherwise.
func (o *Response) GetFinal() bool {
	if o == nil || IsNil(o.Final) {
		var ret bool
		return ret
	}
	return *o.Final
}

// GetFinalOk returns a tuple with the Final field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetFinalOk() (*bool, bool) {
	if o == nil || IsNil(o.Final) {
		return nil, false
	}
	return o.Final, true
}

// HasFinal returns a boolean if a field has been set.
func (o *Response) HasFinal() bool {
	if o != nil && !IsNil(o.Final) {
		return true
	}

	return false
}

// SetFinal gets a reference to the given bool and assigns it to the Final field.
func (o *Response) SetFinal(v bool) {
	o.Final = &v
}

// GetConfidential returns the Confidential field value if set, zero value otherwise.
func (o *Response) GetConfidential() bool {
	if o == nil || IsNil(o.Confidential) {
		var ret bool
		return ret
	}
	return *o.Confidential
}

// GetConfidentialOk returns a tuple with the Confidential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetConfidentialOk() (*bool, bool) {
	if o == nil || IsNil(o.Confidential) {
		return nil, false
	}
	return o.Confidential, true
}

// HasConfidential returns a boolean if a field has been set.
func (o *Response) HasConfidential() bool {
	if o != nil && !IsNil(o.Confidential) {
		return true
	}

	return false
}

// SetConfidential gets a reference to the given bool and assigns it to the Confidential field.
func (o *Response) SetConfidential(v bool) {
	o.Confidential = &v
}

// GetProvisional returns the Provisional field value if set, zero value otherwise.
func (o *Response) GetProvisional() bool {
	if o == nil || IsNil(o.Provisional) {
		var ret bool
		return ret
	}
	return *o.Provisional
}

// GetProvisionalOk returns a tuple with the Provisional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetProvisionalOk() (*bool, bool) {
	if o == nil || IsNil(o.Provisional) {
		return nil, false
	}
	return o.Provisional, true
}

// HasProvisional returns a boolean if a field has been set.
func (o *Response) HasProvisional() bool {
	if o != nil && !IsNil(o.Provisional) {
		return true
	}

	return false
}

// SetProvisional gets a reference to the given bool and assigns it to the Provisional field.
func (o *Response) SetProvisional(v bool) {
	o.Provisional = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *Response) GetHeaders() []Header {
	if o == nil || IsNil(o.Headers) {
		var ret []Header
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetHeadersOk() ([]Header, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *Response) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given []Header and assigns it to the Headers field.
func (o *Response) SetHeaders(v []Header) {
	o.Headers = v
}

// GetEntityAsText returns the EntityAsText field value if set, zero value otherwise.
func (o *Response) GetEntityAsText() string {
	if o == nil || IsNil(o.EntityAsText) {
		var ret string
		return ret
	}
	return *o.EntityAsText
}

// GetEntityAsTextOk returns a tuple with the EntityAsText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetEntityAsTextOk() (*string, bool) {
	if o == nil || IsNil(o.EntityAsText) {
		return nil, false
	}
	return o.EntityAsText, true
}

// HasEntityAsText returns a boolean if a field has been set.
func (o *Response) HasEntityAsText() bool {
	if o != nil && !IsNil(o.EntityAsText) {
		return true
	}

	return false
}

// SetEntityAsText gets a reference to the given string and assigns it to the EntityAsText field.
func (o *Response) SetEntityAsText(v string) {
	o.EntityAsText = &v
}

// GetEntityAvailable returns the EntityAvailable field value if set, zero value otherwise.
func (o *Response) GetEntityAvailable() bool {
	if o == nil || IsNil(o.EntityAvailable) {
		var ret bool
		return ret
	}
	return *o.EntityAvailable
}

// GetEntityAvailableOk returns a tuple with the EntityAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetEntityAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.EntityAvailable) {
		return nil, false
	}
	return o.EntityAvailable, true
}

// HasEntityAvailable returns a boolean if a field has been set.
func (o *Response) HasEntityAvailable() bool {
	if o != nil && !IsNil(o.EntityAvailable) {
		return true
	}

	return false
}

// SetEntityAvailable gets a reference to the given bool and assigns it to the EntityAvailable field.
func (o *Response) SetEntityAvailable(v bool) {
	o.EntityAvailable = &v
}

func (o Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.CacheDirectives) {
		toSerialize["cacheDirectives"] = o.CacheDirectives
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	if !IsNil(o.OnError) {
		toSerialize["onError"] = o.OnError
	}
	if !IsNil(o.OnSent) {
		toSerialize["onSent"] = o.OnSent
	}
	if !IsNil(o.RecipientsInfo) {
		toSerialize["recipientsInfo"] = o.RecipientsInfo
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	if !IsNil(o.AccessControlAllowCredentials) {
		toSerialize["accessControlAllowCredentials"] = o.AccessControlAllowCredentials
	}
	if !IsNil(o.AccessControlAllowHeaders) {
		toSerialize["accessControlAllowHeaders"] = o.AccessControlAllowHeaders
	}
	if !IsNil(o.AccessControlAllowMethods) {
		toSerialize["accessControlAllowMethods"] = o.AccessControlAllowMethods
	}
	if !IsNil(o.AccessControlAllowOrigin) {
		toSerialize["accessControlAllowOrigin"] = o.AccessControlAllowOrigin
	}
	if !IsNil(o.AccessControlExposeHeaders) {
		toSerialize["accessControlExposeHeaders"] = o.AccessControlExposeHeaders
	}
	if !IsNil(o.AccessControlMaxAge) {
		toSerialize["accessControlMaxAge"] = o.AccessControlMaxAge
	}
	if !IsNil(o.Age) {
		toSerialize["age"] = o.Age
	}
	if !IsNil(o.AllowedMethods) {
		toSerialize["allowedMethods"] = o.AllowedMethods
	}
	if !IsNil(o.AuthenticationInfo) {
		toSerialize["authenticationInfo"] = o.AuthenticationInfo
	}
	if !IsNil(o.AutoCommitting) {
		toSerialize["autoCommitting"] = o.AutoCommitting
	}
	if !IsNil(o.ChallengeRequests) {
		toSerialize["challengeRequests"] = o.ChallengeRequests
	}
	if !IsNil(o.Committed) {
		toSerialize["committed"] = o.Committed
	}
	if !IsNil(o.CookieSettings) {
		toSerialize["cookieSettings"] = o.CookieSettings
	}
	if !IsNil(o.Dimensions) {
		toSerialize["dimensions"] = o.Dimensions
	}
	if !IsNil(o.LocationRef) {
		toSerialize["locationRef"] = o.LocationRef
	}
	if !IsNil(o.ProxyChallengeRequests) {
		toSerialize["proxyChallengeRequests"] = o.ProxyChallengeRequests
	}
	if !IsNil(o.Request) {
		toSerialize["request"] = o.Request
	}
	if !IsNil(o.RetryAfter) {
		toSerialize["retryAfter"] = o.RetryAfter
	}
	if !IsNil(o.ServerInfo) {
		toSerialize["serverInfo"] = o.ServerInfo
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Final) {
		toSerialize["final"] = o.Final
	}
	if !IsNil(o.Confidential) {
		toSerialize["confidential"] = o.Confidential
	}
	if !IsNil(o.Provisional) {
		toSerialize["provisional"] = o.Provisional
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.EntityAsText) {
		toSerialize["entityAsText"] = o.EntityAsText
	}
	if !IsNil(o.EntityAvailable) {
		toSerialize["entityAvailable"] = o.EntityAvailable
	}
	return toSerialize, nil
}

type NullableResponse struct {
	value *Response
	isSet bool
}

func (v NullableResponse) Get() *Response {
	return v.value
}

func (v *NullableResponse) Set(val *Response) {
	v.value = val
	v.isSet = true
}

func (v NullableResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponse(val *Response) *NullableResponse {
	return &NullableResponse{value: val, isSet: true}
}

func (v NullableResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


