/*
Nuki API

The Nuki Web Api

API version: 3.13.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Restlet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Restlet{}

// Restlet struct for Restlet
type Restlet struct {
	Author *string `json:"author,omitempty"`
	Context *Context `json:"context,omitempty"`
	Description *string `json:"description,omitempty"`
	Name *string `json:"name,omitempty"`
	Owner *string `json:"owner,omitempty"`
	Started *bool `json:"started,omitempty"`
	Logger *Logger `json:"logger,omitempty"`
	Application *Application `json:"application,omitempty"`
	Stopped *bool `json:"stopped,omitempty"`
}

// NewRestlet instantiates a new Restlet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestlet() *Restlet {
	this := Restlet{}
	return &this
}

// NewRestletWithDefaults instantiates a new Restlet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestletWithDefaults() *Restlet {
	this := Restlet{}
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *Restlet) GetAuthor() string {
	if o == nil || IsNil(o.Author) {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restlet) GetAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *Restlet) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *Restlet) SetAuthor(v string) {
	o.Author = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *Restlet) GetContext() Context {
	if o == nil || IsNil(o.Context) {
		var ret Context
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restlet) GetContextOk() (*Context, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *Restlet) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given Context and assigns it to the Context field.
func (o *Restlet) SetContext(v Context) {
	o.Context = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Restlet) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restlet) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Restlet) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Restlet) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Restlet) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restlet) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Restlet) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Restlet) SetName(v string) {
	o.Name = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Restlet) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restlet) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Restlet) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *Restlet) SetOwner(v string) {
	o.Owner = &v
}

// GetStarted returns the Started field value if set, zero value otherwise.
func (o *Restlet) GetStarted() bool {
	if o == nil || IsNil(o.Started) {
		var ret bool
		return ret
	}
	return *o.Started
}

// GetStartedOk returns a tuple with the Started field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restlet) GetStartedOk() (*bool, bool) {
	if o == nil || IsNil(o.Started) {
		return nil, false
	}
	return o.Started, true
}

// HasStarted returns a boolean if a field has been set.
func (o *Restlet) HasStarted() bool {
	if o != nil && !IsNil(o.Started) {
		return true
	}

	return false
}

// SetStarted gets a reference to the given bool and assigns it to the Started field.
func (o *Restlet) SetStarted(v bool) {
	o.Started = &v
}

// GetLogger returns the Logger field value if set, zero value otherwise.
func (o *Restlet) GetLogger() Logger {
	if o == nil || IsNil(o.Logger) {
		var ret Logger
		return ret
	}
	return *o.Logger
}

// GetLoggerOk returns a tuple with the Logger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restlet) GetLoggerOk() (*Logger, bool) {
	if o == nil || IsNil(o.Logger) {
		return nil, false
	}
	return o.Logger, true
}

// HasLogger returns a boolean if a field has been set.
func (o *Restlet) HasLogger() bool {
	if o != nil && !IsNil(o.Logger) {
		return true
	}

	return false
}

// SetLogger gets a reference to the given Logger and assigns it to the Logger field.
func (o *Restlet) SetLogger(v Logger) {
	o.Logger = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *Restlet) GetApplication() Application {
	if o == nil || IsNil(o.Application) {
		var ret Application
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restlet) GetApplicationOk() (*Application, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *Restlet) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given Application and assigns it to the Application field.
func (o *Restlet) SetApplication(v Application) {
	o.Application = &v
}

// GetStopped returns the Stopped field value if set, zero value otherwise.
func (o *Restlet) GetStopped() bool {
	if o == nil || IsNil(o.Stopped) {
		var ret bool
		return ret
	}
	return *o.Stopped
}

// GetStoppedOk returns a tuple with the Stopped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restlet) GetStoppedOk() (*bool, bool) {
	if o == nil || IsNil(o.Stopped) {
		return nil, false
	}
	return o.Stopped, true
}

// HasStopped returns a boolean if a field has been set.
func (o *Restlet) HasStopped() bool {
	if o != nil && !IsNil(o.Stopped) {
		return true
	}

	return false
}

// SetStopped gets a reference to the given bool and assigns it to the Stopped field.
func (o *Restlet) SetStopped(v bool) {
	o.Stopped = &v
}

func (o Restlet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Restlet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Started) {
		toSerialize["started"] = o.Started
	}
	if !IsNil(o.Logger) {
		toSerialize["logger"] = o.Logger
	}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !IsNil(o.Stopped) {
		toSerialize["stopped"] = o.Stopped
	}
	return toSerialize, nil
}

type NullableRestlet struct {
	value *Restlet
	isSet bool
}

func (v NullableRestlet) Get() *Restlet {
	return v.value
}

func (v *NullableRestlet) Set(val *Restlet) {
	v.value = val
	v.isSet = true
}

func (v NullableRestlet) IsSet() bool {
	return v.isSet
}

func (v *NullableRestlet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestlet(val *Restlet) *NullableRestlet {
	return &NullableRestlet{value: val, isSet: true}
}

func (v NullableRestlet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestlet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


