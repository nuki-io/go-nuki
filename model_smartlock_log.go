/*
Nuki API

The Nuki Web Api

API version: 3.9.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the SmartlockLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartlockLog{}

// SmartlockLog struct for SmartlockLog
type SmartlockLog struct {
	// The unique id for the smartlock log
	Id string `json:"id"`
	// The smartlock id
	SmartlockId int64 `json:"smartlockId"`
	// The device type: 0 .. smartlock and box, 2 .. opener, 3 .. smartdoor
	DeviceType int32 `json:"deviceType"`
	// The id of the linked account user
	AccountUserId *int32 `json:"accountUserId,omitempty"`
	// The id of the linked smartlock auth
	AuthId *string `json:"authId,omitempty"`
	// The name
	Name string `json:"name"`
	// The action: 1 .. unlock, 2 .. lock, 3 .. unlatch, 4 .. lock'n'go, 5 .. lock'n'go with unlatch, 208 .. door warning ajar, 209 door warning status mismatch, 224 .. doorbell recognition (only Opener), 240 .. door opened, 241 .. door closed, 242 .. door sensor jammed, 243 .. firmware update, 250 .. door log enabled, 251 .. door log disabled, 252 .. initialization, 253 .. calibration, 254 .. log enabled, 255 .. log disabled
	Action int32 `json:"action"`
	// The trigger: 0 .. system, 1 .. manual, 2 .. button, 3 .. automatic, 4 .. web, 5 .. app, 6 .. auto lock, 7 .. accessory, 255 .. keypad
	Trigger int32 `json:"trigger"`
	// The completion state: 0 .. Success, 1 .. Motor blocked, 2 .. Canceled, 3 .. Too recent, 4 .. Busy, 5 .. Low motor voltage, 6 .. Clutch failure, 7 .. Motor power failure, 8 .. Incomplete, 9 .. Rejected, 10 .. Rejected night mode, 254 .. Other error, 255 .. Unknown error
	State int32 `json:"state"`
	// True if it was an auto unlock
	AutoUnlock bool `json:"autoUnlock"`
	// The log date
	Date time.Time `json:"date"`
	OpenerLog *SmartlockLogOpenerLog `json:"openerLog,omitempty"`
	// The door sensor warning ajar timeout (in minutes, only for action = 208)
	AjarTimeout *int32 `json:"ajarTimeout,omitempty"`
	// The source of action: 1 .. Keypad code, 2 .. Fingerprint, 0 .. Default
	Source *int32 `json:"source,omitempty"`
	// In case of any error, it contains the error message
	Error *string `json:"error,omitempty"`
}

type _SmartlockLog SmartlockLog

// NewSmartlockLog instantiates a new SmartlockLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartlockLog(id string, smartlockId int64, deviceType int32, name string, action int32, trigger int32, state int32, autoUnlock bool, date time.Time) *SmartlockLog {
	this := SmartlockLog{}
	this.Id = id
	this.SmartlockId = smartlockId
	this.DeviceType = deviceType
	this.Name = name
	this.Action = action
	this.Trigger = trigger
	this.State = state
	this.AutoUnlock = autoUnlock
	this.Date = date
	return &this
}

// NewSmartlockLogWithDefaults instantiates a new SmartlockLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartlockLogWithDefaults() *SmartlockLog {
	this := SmartlockLog{}
	return &this
}

// GetId returns the Id field value
func (o *SmartlockLog) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SmartlockLog) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SmartlockLog) SetId(v string) {
	o.Id = v
}

// GetSmartlockId returns the SmartlockId field value
func (o *SmartlockLog) GetSmartlockId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SmartlockId
}

// GetSmartlockIdOk returns a tuple with the SmartlockId field value
// and a boolean to check if the value has been set.
func (o *SmartlockLog) GetSmartlockIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SmartlockId, true
}

// SetSmartlockId sets field value
func (o *SmartlockLog) SetSmartlockId(v int64) {
	o.SmartlockId = v
}

// GetDeviceType returns the DeviceType field value
func (o *SmartlockLog) GetDeviceType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value
// and a boolean to check if the value has been set.
func (o *SmartlockLog) GetDeviceTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceType, true
}

// SetDeviceType sets field value
func (o *SmartlockLog) SetDeviceType(v int32) {
	o.DeviceType = v
}

// GetAccountUserId returns the AccountUserId field value if set, zero value otherwise.
func (o *SmartlockLog) GetAccountUserId() int32 {
	if o == nil || IsNil(o.AccountUserId) {
		var ret int32
		return ret
	}
	return *o.AccountUserId
}

// GetAccountUserIdOk returns a tuple with the AccountUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockLog) GetAccountUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AccountUserId) {
		return nil, false
	}
	return o.AccountUserId, true
}

// HasAccountUserId returns a boolean if a field has been set.
func (o *SmartlockLog) HasAccountUserId() bool {
	if o != nil && !IsNil(o.AccountUserId) {
		return true
	}

	return false
}

// SetAccountUserId gets a reference to the given int32 and assigns it to the AccountUserId field.
func (o *SmartlockLog) SetAccountUserId(v int32) {
	o.AccountUserId = &v
}

// GetAuthId returns the AuthId field value if set, zero value otherwise.
func (o *SmartlockLog) GetAuthId() string {
	if o == nil || IsNil(o.AuthId) {
		var ret string
		return ret
	}
	return *o.AuthId
}

// GetAuthIdOk returns a tuple with the AuthId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockLog) GetAuthIdOk() (*string, bool) {
	if o == nil || IsNil(o.AuthId) {
		return nil, false
	}
	return o.AuthId, true
}

// HasAuthId returns a boolean if a field has been set.
func (o *SmartlockLog) HasAuthId() bool {
	if o != nil && !IsNil(o.AuthId) {
		return true
	}

	return false
}

// SetAuthId gets a reference to the given string and assigns it to the AuthId field.
func (o *SmartlockLog) SetAuthId(v string) {
	o.AuthId = &v
}

// GetName returns the Name field value
func (o *SmartlockLog) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SmartlockLog) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SmartlockLog) SetName(v string) {
	o.Name = v
}

// GetAction returns the Action field value
func (o *SmartlockLog) GetAction() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *SmartlockLog) GetActionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *SmartlockLog) SetAction(v int32) {
	o.Action = v
}

// GetTrigger returns the Trigger field value
func (o *SmartlockLog) GetTrigger() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value
// and a boolean to check if the value has been set.
func (o *SmartlockLog) GetTriggerOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Trigger, true
}

// SetTrigger sets field value
func (o *SmartlockLog) SetTrigger(v int32) {
	o.Trigger = v
}

// GetState returns the State field value
func (o *SmartlockLog) GetState() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *SmartlockLog) GetStateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *SmartlockLog) SetState(v int32) {
	o.State = v
}

// GetAutoUnlock returns the AutoUnlock field value
func (o *SmartlockLog) GetAutoUnlock() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutoUnlock
}

// GetAutoUnlockOk returns a tuple with the AutoUnlock field value
// and a boolean to check if the value has been set.
func (o *SmartlockLog) GetAutoUnlockOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoUnlock, true
}

// SetAutoUnlock sets field value
func (o *SmartlockLog) SetAutoUnlock(v bool) {
	o.AutoUnlock = v
}

// GetDate returns the Date field value
func (o *SmartlockLog) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *SmartlockLog) GetDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *SmartlockLog) SetDate(v time.Time) {
	o.Date = v
}

// GetOpenerLog returns the OpenerLog field value if set, zero value otherwise.
func (o *SmartlockLog) GetOpenerLog() SmartlockLogOpenerLog {
	if o == nil || IsNil(o.OpenerLog) {
		var ret SmartlockLogOpenerLog
		return ret
	}
	return *o.OpenerLog
}

// GetOpenerLogOk returns a tuple with the OpenerLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockLog) GetOpenerLogOk() (*SmartlockLogOpenerLog, bool) {
	if o == nil || IsNil(o.OpenerLog) {
		return nil, false
	}
	return o.OpenerLog, true
}

// HasOpenerLog returns a boolean if a field has been set.
func (o *SmartlockLog) HasOpenerLog() bool {
	if o != nil && !IsNil(o.OpenerLog) {
		return true
	}

	return false
}

// SetOpenerLog gets a reference to the given SmartlockLogOpenerLog and assigns it to the OpenerLog field.
func (o *SmartlockLog) SetOpenerLog(v SmartlockLogOpenerLog) {
	o.OpenerLog = &v
}

// GetAjarTimeout returns the AjarTimeout field value if set, zero value otherwise.
func (o *SmartlockLog) GetAjarTimeout() int32 {
	if o == nil || IsNil(o.AjarTimeout) {
		var ret int32
		return ret
	}
	return *o.AjarTimeout
}

// GetAjarTimeoutOk returns a tuple with the AjarTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockLog) GetAjarTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.AjarTimeout) {
		return nil, false
	}
	return o.AjarTimeout, true
}

// HasAjarTimeout returns a boolean if a field has been set.
func (o *SmartlockLog) HasAjarTimeout() bool {
	if o != nil && !IsNil(o.AjarTimeout) {
		return true
	}

	return false
}

// SetAjarTimeout gets a reference to the given int32 and assigns it to the AjarTimeout field.
func (o *SmartlockLog) SetAjarTimeout(v int32) {
	o.AjarTimeout = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *SmartlockLog) GetSource() int32 {
	if o == nil || IsNil(o.Source) {
		var ret int32
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockLog) GetSourceOk() (*int32, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *SmartlockLog) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given int32 and assigns it to the Source field.
func (o *SmartlockLog) SetSource(v int32) {
	o.Source = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *SmartlockLog) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockLog) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *SmartlockLog) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *SmartlockLog) SetError(v string) {
	o.Error = &v
}

func (o SmartlockLog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartlockLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["smartlockId"] = o.SmartlockId
	toSerialize["deviceType"] = o.DeviceType
	if !IsNil(o.AccountUserId) {
		toSerialize["accountUserId"] = o.AccountUserId
	}
	if !IsNil(o.AuthId) {
		toSerialize["authId"] = o.AuthId
	}
	toSerialize["name"] = o.Name
	toSerialize["action"] = o.Action
	toSerialize["trigger"] = o.Trigger
	toSerialize["state"] = o.State
	toSerialize["autoUnlock"] = o.AutoUnlock
	toSerialize["date"] = o.Date
	if !IsNil(o.OpenerLog) {
		toSerialize["openerLog"] = o.OpenerLog
	}
	if !IsNil(o.AjarTimeout) {
		toSerialize["ajarTimeout"] = o.AjarTimeout
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

func (o *SmartlockLog) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"smartlockId",
		"deviceType",
		"name",
		"action",
		"trigger",
		"state",
		"autoUnlock",
		"date",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmartlockLog := _SmartlockLog{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSmartlockLog)

	if err != nil {
		return err
	}

	*o = SmartlockLog(varSmartlockLog)

	return err
}

type NullableSmartlockLog struct {
	value *SmartlockLog
	isSet bool
}

func (v NullableSmartlockLog) Get() *SmartlockLog {
	return v.value
}

func (v *NullableSmartlockLog) Set(val *SmartlockLog) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartlockLog) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartlockLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartlockLog(val *SmartlockLog) *NullableSmartlockLog {
	return &NullableSmartlockLog{value: val, isSet: true}
}

func (v NullableSmartlockLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartlockLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


