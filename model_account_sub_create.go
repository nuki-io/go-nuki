/*
Nuki API

The Nuki Web Api

API version: 3.8.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AccountSubCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountSubCreate{}

// AccountSubCreate struct for AccountSubCreate
type AccountSubCreate struct {
	// The email address
	Email string `json:"email"`
	// The password (must be at least 7 chars long)
	Password string `json:"password"`
	// The name of the sub account
	Name string `json:"name"`
	// The right bitmask of the sub account: 1 .. operate smartlock, 2 .. change smartlock config, 4 .. manage smartlock users, 8 .. view smartlock logs, 16 .. manage sub accounts
	Rights int32 `json:"rights"`
	// The language code
	Language string `json:"language"`
	Profile *AccountProfile `json:"profile,omitempty"`
}

type _AccountSubCreate AccountSubCreate

// NewAccountSubCreate instantiates a new AccountSubCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountSubCreate(email string, password string, name string, rights int32, language string) *AccountSubCreate {
	this := AccountSubCreate{}
	this.Email = email
	this.Password = password
	this.Name = name
	this.Rights = rights
	this.Language = language
	return &this
}

// NewAccountSubCreateWithDefaults instantiates a new AccountSubCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountSubCreateWithDefaults() *AccountSubCreate {
	this := AccountSubCreate{}
	return &this
}

// GetEmail returns the Email field value
func (o *AccountSubCreate) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *AccountSubCreate) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *AccountSubCreate) SetEmail(v string) {
	o.Email = v
}

// GetPassword returns the Password field value
func (o *AccountSubCreate) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *AccountSubCreate) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *AccountSubCreate) SetPassword(v string) {
	o.Password = v
}

// GetName returns the Name field value
func (o *AccountSubCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AccountSubCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AccountSubCreate) SetName(v string) {
	o.Name = v
}

// GetRights returns the Rights field value
func (o *AccountSubCreate) GetRights() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Rights
}

// GetRightsOk returns a tuple with the Rights field value
// and a boolean to check if the value has been set.
func (o *AccountSubCreate) GetRightsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rights, true
}

// SetRights sets field value
func (o *AccountSubCreate) SetRights(v int32) {
	o.Rights = v
}

// GetLanguage returns the Language field value
func (o *AccountSubCreate) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *AccountSubCreate) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *AccountSubCreate) SetLanguage(v string) {
	o.Language = v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *AccountSubCreate) GetProfile() AccountProfile {
	if o == nil || IsNil(o.Profile) {
		var ret AccountProfile
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSubCreate) GetProfileOk() (*AccountProfile, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *AccountSubCreate) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given AccountProfile and assigns it to the Profile field.
func (o *AccountSubCreate) SetProfile(v AccountProfile) {
	o.Profile = &v
}

func (o AccountSubCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountSubCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["password"] = o.Password
	toSerialize["name"] = o.Name
	toSerialize["rights"] = o.Rights
	toSerialize["language"] = o.Language
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	return toSerialize, nil
}

func (o *AccountSubCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"password",
		"name",
		"rights",
		"language",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountSubCreate := _AccountSubCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountSubCreate)

	if err != nil {
		return err
	}

	*o = AccountSubCreate(varAccountSubCreate)

	return err
}

type NullableAccountSubCreate struct {
	value *AccountSubCreate
	isSet bool
}

func (v NullableAccountSubCreate) Get() *AccountSubCreate {
	return v.value
}

func (v *NullableAccountSubCreate) Set(val *AccountSubCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountSubCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountSubCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountSubCreate(val *AccountSubCreate) *NullableAccountSubCreate {
	return &NullableAccountSubCreate{value: val, isSet: true}
}

func (v NullableAccountSubCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountSubCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


