/*
Nuki API

The Nuki Web Api

API version: 0.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AccountUserAPIService AccountUserAPI service
type AccountUserAPIService service

type ApiAccountUserResourceDeleteDeleteRequest struct {
	ctx context.Context
	ApiService *AccountUserAPIService
	accountUserId int32
}

func (r ApiAccountUserResourceDeleteDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AccountUserResourceDeleteDeleteExecute(r)
}

/*
AccountUserResourceDeleteDelete Deletes asynchronous an account user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountUserId The account user id
 @return ApiAccountUserResourceDeleteDeleteRequest
*/
func (a *AccountUserAPIService) AccountUserResourceDeleteDelete(ctx context.Context, accountUserId int32) ApiAccountUserResourceDeleteDeleteRequest {
	return ApiAccountUserResourceDeleteDeleteRequest{
		ApiService: a,
		ctx: ctx,
		accountUserId: accountUserId,
	}
}

// Execute executes the request
func (a *AccountUserAPIService) AccountUserResourceDeleteDeleteExecute(r ApiAccountUserResourceDeleteDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountUserAPIService.AccountUserResourceDeleteDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/account/user/{accountUserId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUserId"+"}", url.PathEscape(parameterValueToString(r.accountUserId, "accountUserId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAccountUserResourceGetGetRequest struct {
	ctx context.Context
	ApiService *AccountUserAPIService
	accountUserId int32
}

func (r ApiAccountUserResourceGetGetRequest) Execute() (*AccountUser, *http.Response, error) {
	return r.ApiService.AccountUserResourceGetGetExecute(r)
}

/*
AccountUserResourceGetGet Get an account user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountUserId The account user id
 @return ApiAccountUserResourceGetGetRequest
*/
func (a *AccountUserAPIService) AccountUserResourceGetGet(ctx context.Context, accountUserId int32) ApiAccountUserResourceGetGetRequest {
	return ApiAccountUserResourceGetGetRequest{
		ApiService: a,
		ctx: ctx,
		accountUserId: accountUserId,
	}
}

// Execute executes the request
//  @return AccountUser
func (a *AccountUserAPIService) AccountUserResourceGetGetExecute(r ApiAccountUserResourceGetGetRequest) (*AccountUser, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountUserAPIService.AccountUserResourceGetGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/account/user/{accountUserId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUserId"+"}", url.PathEscape(parameterValueToString(r.accountUserId, "accountUserId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountUserResourcePostPostRequest struct {
	ctx context.Context
	ApiService *AccountUserAPIService
	accountUserId int32
	body *AccountUserUpdate
}

// Account update representation
func (r ApiAccountUserResourcePostPostRequest) Body(body AccountUserUpdate) ApiAccountUserResourcePostPostRequest {
	r.body = &body
	return r
}

func (r ApiAccountUserResourcePostPostRequest) Execute() (*AccountUser, *http.Response, error) {
	return r.ApiService.AccountUserResourcePostPostExecute(r)
}

/*
AccountUserResourcePostPost Update an account user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountUserId The account user id
 @return ApiAccountUserResourcePostPostRequest
*/
func (a *AccountUserAPIService) AccountUserResourcePostPost(ctx context.Context, accountUserId int32) ApiAccountUserResourcePostPostRequest {
	return ApiAccountUserResourcePostPostRequest{
		ApiService: a,
		ctx: ctx,
		accountUserId: accountUserId,
	}
}

// Execute executes the request
//  @return AccountUser
func (a *AccountUserAPIService) AccountUserResourcePostPostExecute(r ApiAccountUserResourcePostPostRequest) (*AccountUser, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountUserAPIService.AccountUserResourcePostPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/account/user/{accountUserId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountUserId"+"}", url.PathEscape(parameterValueToString(r.accountUserId, "accountUserId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountUsersResourceGetGetRequest struct {
	ctx context.Context
	ApiService *AccountUserAPIService
	email *string
	offset *interface{}
	limit *interface{}
}

// Filter for email
func (r ApiAccountUsersResourceGetGetRequest) Email(email string) ApiAccountUsersResourceGetGetRequest {
	r.email = &email
	return r
}

// The offset of the first user in the collection to return
func (r ApiAccountUsersResourceGetGetRequest) Offset(offset interface{}) ApiAccountUsersResourceGetGetRequest {
	r.offset = &offset
	return r
}

// The maximum number of users to return. If the value exceeds the maximum, then the maximum value will be used.
func (r ApiAccountUsersResourceGetGetRequest) Limit(limit interface{}) ApiAccountUsersResourceGetGetRequest {
	r.limit = &limit
	return r
}

func (r ApiAccountUsersResourceGetGetRequest) Execute() ([]AccountUser, *http.Response, error) {
	return r.ApiService.AccountUsersResourceGetGetExecute(r)
}

/*
AccountUsersResourceGetGet Get an list of account users

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAccountUsersResourceGetGetRequest
*/
func (a *AccountUserAPIService) AccountUsersResourceGetGet(ctx context.Context) ApiAccountUsersResourceGetGetRequest {
	return ApiAccountUsersResourceGetGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []AccountUser
func (a *AccountUserAPIService) AccountUsersResourceGetGetExecute(r ApiAccountUsersResourceGetGetRequest) ([]AccountUser, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AccountUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountUserAPIService.AccountUsersResourceGetGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/account/user"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.email != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountUsersResourcePutPutRequest struct {
	ctx context.Context
	ApiService *AccountUserAPIService
	body *AccountUserCreate
}

// Account sub create representation
func (r ApiAccountUsersResourcePutPutRequest) Body(body AccountUserCreate) ApiAccountUsersResourcePutPutRequest {
	r.body = &body
	return r
}

func (r ApiAccountUsersResourcePutPutRequest) Execute() (*AccountUser, *http.Response, error) {
	return r.ApiService.AccountUsersResourcePutPutExecute(r)
}

/*
AccountUsersResourcePutPut Create an account user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAccountUsersResourcePutPutRequest
*/
func (a *AccountUserAPIService) AccountUsersResourcePutPut(ctx context.Context) ApiAccountUsersResourcePutPutRequest {
	return ApiAccountUsersResourcePutPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountUser
func (a *AccountUserAPIService) AccountUsersResourcePutPutExecute(r ApiAccountUsersResourcePutPutRequest) (*AccountUser, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountUserAPIService.AccountUsersResourcePutPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/account/user"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
