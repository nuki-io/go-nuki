/*
Nuki API

The Nuki Web Api

API version: 3.13.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Level type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Level{}

// Level struct for Level
type Level struct {
	Name *string `json:"name,omitempty"`
	ResourceBundleName *string `json:"resourceBundleName,omitempty"`
	LocalizedName *string `json:"localizedName,omitempty"`
}

// NewLevel instantiates a new Level object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLevel() *Level {
	this := Level{}
	return &this
}

// NewLevelWithDefaults instantiates a new Level object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLevelWithDefaults() *Level {
	this := Level{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Level) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Level) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Level) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Level) SetName(v string) {
	o.Name = &v
}

// GetResourceBundleName returns the ResourceBundleName field value if set, zero value otherwise.
func (o *Level) GetResourceBundleName() string {
	if o == nil || IsNil(o.ResourceBundleName) {
		var ret string
		return ret
	}
	return *o.ResourceBundleName
}

// GetResourceBundleNameOk returns a tuple with the ResourceBundleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Level) GetResourceBundleNameOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceBundleName) {
		return nil, false
	}
	return o.ResourceBundleName, true
}

// HasResourceBundleName returns a boolean if a field has been set.
func (o *Level) HasResourceBundleName() bool {
	if o != nil && !IsNil(o.ResourceBundleName) {
		return true
	}

	return false
}

// SetResourceBundleName gets a reference to the given string and assigns it to the ResourceBundleName field.
func (o *Level) SetResourceBundleName(v string) {
	o.ResourceBundleName = &v
}

// GetLocalizedName returns the LocalizedName field value if set, zero value otherwise.
func (o *Level) GetLocalizedName() string {
	if o == nil || IsNil(o.LocalizedName) {
		var ret string
		return ret
	}
	return *o.LocalizedName
}

// GetLocalizedNameOk returns a tuple with the LocalizedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Level) GetLocalizedNameOk() (*string, bool) {
	if o == nil || IsNil(o.LocalizedName) {
		return nil, false
	}
	return o.LocalizedName, true
}

// HasLocalizedName returns a boolean if a field has been set.
func (o *Level) HasLocalizedName() bool {
	if o != nil && !IsNil(o.LocalizedName) {
		return true
	}

	return false
}

// SetLocalizedName gets a reference to the given string and assigns it to the LocalizedName field.
func (o *Level) SetLocalizedName(v string) {
	o.LocalizedName = &v
}

func (o Level) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Level) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ResourceBundleName) {
		toSerialize["resourceBundleName"] = o.ResourceBundleName
	}
	if !IsNil(o.LocalizedName) {
		toSerialize["localizedName"] = o.LocalizedName
	}
	return toSerialize, nil
}

type NullableLevel struct {
	value *Level
	isSet bool
}

func (v NullableLevel) Get() *Level {
	return v.value
}

func (v *NullableLevel) Set(val *Level) {
	v.value = val
	v.isSet = true
}

func (v NullableLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLevel(val *Level) *NullableLevel {
	return &NullableLevel{value: val, isSet: true}
}

func (v NullableLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


