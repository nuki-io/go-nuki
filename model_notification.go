/*
Nuki API

The Nuki Web Api

API version: 0.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Notification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Notification{}

// Notification struct for Notification
type Notification struct {
	// The unique notificationId for the notification
	NotificationId *string `json:"notificationId,omitempty"`
	// The reference ID, an ID to identify a foreign system
	ReferenceId *string `json:"referenceId,omitempty"`
	// The push ID or the POST URL for a webhook
	PushId string `json:"pushId"`
	// The 40 byte hex string to sign the checksumof the POST payload if the notification is webhook (os=2)
	Secret *string `json:"secret,omitempty"`
	// The operating system: 0 .. Android, 1 .. iOS, 2 .. web hook
	Os int32 `json:"os"`
	// The language of push messages: cs, de, en (default), es, fr, it, nl, sk
	Language *string `json:"language,omitempty"`
	// Current state: 0 .. init, 1 .. active, 2 .. failed
	Status *int32 `json:"status,omitempty"`
	// The last active date
	LastActiveDate *time.Time `json:"lastActiveDate,omitempty"`
	// Settings per Smart Lock
	Settings []NotificationSetting `json:"settings"`
}

type _Notification Notification

// NewNotification instantiates a new Notification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotification(pushId string, os int32, settings []NotificationSetting) *Notification {
	this := Notification{}
	this.PushId = pushId
	this.Os = os
	this.Settings = settings
	return &this
}

// NewNotificationWithDefaults instantiates a new Notification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationWithDefaults() *Notification {
	this := Notification{}
	return &this
}

// GetNotificationId returns the NotificationId field value if set, zero value otherwise.
func (o *Notification) GetNotificationId() string {
	if o == nil || IsNil(o.NotificationId) {
		var ret string
		return ret
	}
	return *o.NotificationId
}

// GetNotificationIdOk returns a tuple with the NotificationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetNotificationIdOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationId) {
		return nil, false
	}
	return o.NotificationId, true
}

// HasNotificationId returns a boolean if a field has been set.
func (o *Notification) HasNotificationId() bool {
	if o != nil && !IsNil(o.NotificationId) {
		return true
	}

	return false
}

// SetNotificationId gets a reference to the given string and assigns it to the NotificationId field.
func (o *Notification) SetNotificationId(v string) {
	o.NotificationId = &v
}

// GetReferenceId returns the ReferenceId field value if set, zero value otherwise.
func (o *Notification) GetReferenceId() string {
	if o == nil || IsNil(o.ReferenceId) {
		var ret string
		return ret
	}
	return *o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceId) {
		return nil, false
	}
	return o.ReferenceId, true
}

// HasReferenceId returns a boolean if a field has been set.
func (o *Notification) HasReferenceId() bool {
	if o != nil && !IsNil(o.ReferenceId) {
		return true
	}

	return false
}

// SetReferenceId gets a reference to the given string and assigns it to the ReferenceId field.
func (o *Notification) SetReferenceId(v string) {
	o.ReferenceId = &v
}

// GetPushId returns the PushId field value
func (o *Notification) GetPushId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PushId
}

// GetPushIdOk returns a tuple with the PushId field value
// and a boolean to check if the value has been set.
func (o *Notification) GetPushIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PushId, true
}

// SetPushId sets field value
func (o *Notification) SetPushId(v string) {
	o.PushId = v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *Notification) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *Notification) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *Notification) SetSecret(v string) {
	o.Secret = &v
}

// GetOs returns the Os field value
func (o *Notification) GetOs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Os
}

// GetOsOk returns a tuple with the Os field value
// and a boolean to check if the value has been set.
func (o *Notification) GetOsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Os, true
}

// SetOs sets field value
func (o *Notification) SetOs(v int32) {
	o.Os = v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Notification) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Notification) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *Notification) SetLanguage(v string) {
	o.Language = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Notification) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Notification) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *Notification) SetStatus(v int32) {
	o.Status = &v
}

// GetLastActiveDate returns the LastActiveDate field value if set, zero value otherwise.
func (o *Notification) GetLastActiveDate() time.Time {
	if o == nil || IsNil(o.LastActiveDate) {
		var ret time.Time
		return ret
	}
	return *o.LastActiveDate
}

// GetLastActiveDateOk returns a tuple with the LastActiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetLastActiveDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastActiveDate) {
		return nil, false
	}
	return o.LastActiveDate, true
}

// HasLastActiveDate returns a boolean if a field has been set.
func (o *Notification) HasLastActiveDate() bool {
	if o != nil && !IsNil(o.LastActiveDate) {
		return true
	}

	return false
}

// SetLastActiveDate gets a reference to the given time.Time and assigns it to the LastActiveDate field.
func (o *Notification) SetLastActiveDate(v time.Time) {
	o.LastActiveDate = &v
}

// GetSettings returns the Settings field value
func (o *Notification) GetSettings() []NotificationSetting {
	if o == nil {
		var ret []NotificationSetting
		return ret
	}

	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value
// and a boolean to check if the value has been set.
func (o *Notification) GetSettingsOk() ([]NotificationSetting, bool) {
	if o == nil {
		return nil, false
	}
	return o.Settings, true
}

// SetSettings sets field value
func (o *Notification) SetSettings(v []NotificationSetting) {
	o.Settings = v
}

func (o Notification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Notification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NotificationId) {
		toSerialize["notificationId"] = o.NotificationId
	}
	if !IsNil(o.ReferenceId) {
		toSerialize["referenceId"] = o.ReferenceId
	}
	toSerialize["pushId"] = o.PushId
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	toSerialize["os"] = o.Os
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.LastActiveDate) {
		toSerialize["lastActiveDate"] = o.LastActiveDate
	}
	toSerialize["settings"] = o.Settings
	return toSerialize, nil
}

func (o *Notification) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pushId",
		"os",
		"settings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotification := _Notification{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNotification)

	if err != nil {
		return err
	}

	*o = Notification(varNotification)

	return err
}

type NullableNotification struct {
	value *Notification
	isSet bool
}

func (v NullableNotification) Get() *Notification {
	return v.value
}

func (v *NullableNotification) Set(val *Notification) {
	v.value = val
	v.isSet = true
}

func (v NullableNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotification(val *Notification) *NullableNotification {
	return &NullableNotification{value: val, isSet: true}
}

func (v NullableNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


