/*
Nuki API

The Nuki Web Api

API version: 3.10.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DecentralWebhook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DecentralWebhook{}

// DecentralWebhook struct for DecentralWebhook
type DecentralWebhook struct {
	// The identifier
	Id *int32 `json:"id,omitempty"`
	// The secret to sign the webhook's payload
	Secret *string `json:"secret,omitempty"`
	// The URL where our webhooks (POST requests) should point to (needs to be https)
	WebhookUrl string `json:"webhookUrl"`
	// The features to trigger webhooks, set values: DEVICE_STATUS, DEVICE_MASTERDATA, DEVICE_CONFIG, DEVICE_LOGS, DEVICE_AUTHS, ACCOUNT_USER
	WebhookFeatures []string `json:"webhookFeatures"`
}

type _DecentralWebhook DecentralWebhook

// NewDecentralWebhook instantiates a new DecentralWebhook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecentralWebhook(webhookUrl string, webhookFeatures []string) *DecentralWebhook {
	this := DecentralWebhook{}
	this.WebhookUrl = webhookUrl
	this.WebhookFeatures = webhookFeatures
	return &this
}

// NewDecentralWebhookWithDefaults instantiates a new DecentralWebhook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecentralWebhookWithDefaults() *DecentralWebhook {
	this := DecentralWebhook{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DecentralWebhook) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecentralWebhook) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DecentralWebhook) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *DecentralWebhook) SetId(v int32) {
	o.Id = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *DecentralWebhook) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecentralWebhook) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *DecentralWebhook) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *DecentralWebhook) SetSecret(v string) {
	o.Secret = &v
}

// GetWebhookUrl returns the WebhookUrl field value
func (o *DecentralWebhook) GetWebhookUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WebhookUrl
}

// GetWebhookUrlOk returns a tuple with the WebhookUrl field value
// and a boolean to check if the value has been set.
func (o *DecentralWebhook) GetWebhookUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WebhookUrl, true
}

// SetWebhookUrl sets field value
func (o *DecentralWebhook) SetWebhookUrl(v string) {
	o.WebhookUrl = v
}

// GetWebhookFeatures returns the WebhookFeatures field value
func (o *DecentralWebhook) GetWebhookFeatures() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.WebhookFeatures
}

// GetWebhookFeaturesOk returns a tuple with the WebhookFeatures field value
// and a boolean to check if the value has been set.
func (o *DecentralWebhook) GetWebhookFeaturesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebhookFeatures, true
}

// SetWebhookFeatures sets field value
func (o *DecentralWebhook) SetWebhookFeatures(v []string) {
	o.WebhookFeatures = v
}

func (o DecentralWebhook) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DecentralWebhook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	toSerialize["webhookUrl"] = o.WebhookUrl
	toSerialize["webhookFeatures"] = o.WebhookFeatures
	return toSerialize, nil
}

func (o *DecentralWebhook) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"webhookUrl",
		"webhookFeatures",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDecentralWebhook := _DecentralWebhook{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDecentralWebhook)

	if err != nil {
		return err
	}

	*o = DecentralWebhook(varDecentralWebhook)

	return err
}

type NullableDecentralWebhook struct {
	value *DecentralWebhook
	isSet bool
}

func (v NullableDecentralWebhook) Get() *DecentralWebhook {
	return v.value
}

func (v *NullableDecentralWebhook) Set(val *DecentralWebhook) {
	v.value = val
	v.isSet = true
}

func (v NullableDecentralWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableDecentralWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecentralWebhook(val *DecentralWebhook) *NullableDecentralWebhook {
	return &NullableDecentralWebhook{value: val, isSet: true}
}

func (v NullableDecentralWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecentralWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


