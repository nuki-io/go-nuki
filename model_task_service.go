/*
Nuki API

The Nuki Web Api

API version: 3.9.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the TaskService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskService{}

// TaskService struct for TaskService
type TaskService struct {
	Context *Context `json:"context,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Started *bool `json:"started,omitempty"`
	CorePoolSize *int32 `json:"corePoolSize,omitempty"`
	Daemon *bool `json:"daemon,omitempty"`
	ShutdownAllowed *bool `json:"shutdownAllowed,omitempty"`
	Shutdown *bool `json:"shutdown,omitempty"`
	Terminated *bool `json:"terminated,omitempty"`
	Stopped *bool `json:"stopped,omitempty"`
}

// NewTaskService instantiates a new TaskService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskService() *TaskService {
	this := TaskService{}
	return &this
}

// NewTaskServiceWithDefaults instantiates a new TaskService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskServiceWithDefaults() *TaskService {
	this := TaskService{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *TaskService) GetContext() Context {
	if o == nil || IsNil(o.Context) {
		var ret Context
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskService) GetContextOk() (*Context, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *TaskService) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given Context and assigns it to the Context field.
func (o *TaskService) SetContext(v Context) {
	o.Context = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *TaskService) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskService) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *TaskService) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *TaskService) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetStarted returns the Started field value if set, zero value otherwise.
func (o *TaskService) GetStarted() bool {
	if o == nil || IsNil(o.Started) {
		var ret bool
		return ret
	}
	return *o.Started
}

// GetStartedOk returns a tuple with the Started field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskService) GetStartedOk() (*bool, bool) {
	if o == nil || IsNil(o.Started) {
		return nil, false
	}
	return o.Started, true
}

// HasStarted returns a boolean if a field has been set.
func (o *TaskService) HasStarted() bool {
	if o != nil && !IsNil(o.Started) {
		return true
	}

	return false
}

// SetStarted gets a reference to the given bool and assigns it to the Started field.
func (o *TaskService) SetStarted(v bool) {
	o.Started = &v
}

// GetCorePoolSize returns the CorePoolSize field value if set, zero value otherwise.
func (o *TaskService) GetCorePoolSize() int32 {
	if o == nil || IsNil(o.CorePoolSize) {
		var ret int32
		return ret
	}
	return *o.CorePoolSize
}

// GetCorePoolSizeOk returns a tuple with the CorePoolSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskService) GetCorePoolSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.CorePoolSize) {
		return nil, false
	}
	return o.CorePoolSize, true
}

// HasCorePoolSize returns a boolean if a field has been set.
func (o *TaskService) HasCorePoolSize() bool {
	if o != nil && !IsNil(o.CorePoolSize) {
		return true
	}

	return false
}

// SetCorePoolSize gets a reference to the given int32 and assigns it to the CorePoolSize field.
func (o *TaskService) SetCorePoolSize(v int32) {
	o.CorePoolSize = &v
}

// GetDaemon returns the Daemon field value if set, zero value otherwise.
func (o *TaskService) GetDaemon() bool {
	if o == nil || IsNil(o.Daemon) {
		var ret bool
		return ret
	}
	return *o.Daemon
}

// GetDaemonOk returns a tuple with the Daemon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskService) GetDaemonOk() (*bool, bool) {
	if o == nil || IsNil(o.Daemon) {
		return nil, false
	}
	return o.Daemon, true
}

// HasDaemon returns a boolean if a field has been set.
func (o *TaskService) HasDaemon() bool {
	if o != nil && !IsNil(o.Daemon) {
		return true
	}

	return false
}

// SetDaemon gets a reference to the given bool and assigns it to the Daemon field.
func (o *TaskService) SetDaemon(v bool) {
	o.Daemon = &v
}

// GetShutdownAllowed returns the ShutdownAllowed field value if set, zero value otherwise.
func (o *TaskService) GetShutdownAllowed() bool {
	if o == nil || IsNil(o.ShutdownAllowed) {
		var ret bool
		return ret
	}
	return *o.ShutdownAllowed
}

// GetShutdownAllowedOk returns a tuple with the ShutdownAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskService) GetShutdownAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.ShutdownAllowed) {
		return nil, false
	}
	return o.ShutdownAllowed, true
}

// HasShutdownAllowed returns a boolean if a field has been set.
func (o *TaskService) HasShutdownAllowed() bool {
	if o != nil && !IsNil(o.ShutdownAllowed) {
		return true
	}

	return false
}

// SetShutdownAllowed gets a reference to the given bool and assigns it to the ShutdownAllowed field.
func (o *TaskService) SetShutdownAllowed(v bool) {
	o.ShutdownAllowed = &v
}

// GetShutdown returns the Shutdown field value if set, zero value otherwise.
func (o *TaskService) GetShutdown() bool {
	if o == nil || IsNil(o.Shutdown) {
		var ret bool
		return ret
	}
	return *o.Shutdown
}

// GetShutdownOk returns a tuple with the Shutdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskService) GetShutdownOk() (*bool, bool) {
	if o == nil || IsNil(o.Shutdown) {
		return nil, false
	}
	return o.Shutdown, true
}

// HasShutdown returns a boolean if a field has been set.
func (o *TaskService) HasShutdown() bool {
	if o != nil && !IsNil(o.Shutdown) {
		return true
	}

	return false
}

// SetShutdown gets a reference to the given bool and assigns it to the Shutdown field.
func (o *TaskService) SetShutdown(v bool) {
	o.Shutdown = &v
}

// GetTerminated returns the Terminated field value if set, zero value otherwise.
func (o *TaskService) GetTerminated() bool {
	if o == nil || IsNil(o.Terminated) {
		var ret bool
		return ret
	}
	return *o.Terminated
}

// GetTerminatedOk returns a tuple with the Terminated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskService) GetTerminatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Terminated) {
		return nil, false
	}
	return o.Terminated, true
}

// HasTerminated returns a boolean if a field has been set.
func (o *TaskService) HasTerminated() bool {
	if o != nil && !IsNil(o.Terminated) {
		return true
	}

	return false
}

// SetTerminated gets a reference to the given bool and assigns it to the Terminated field.
func (o *TaskService) SetTerminated(v bool) {
	o.Terminated = &v
}

// GetStopped returns the Stopped field value if set, zero value otherwise.
func (o *TaskService) GetStopped() bool {
	if o == nil || IsNil(o.Stopped) {
		var ret bool
		return ret
	}
	return *o.Stopped
}

// GetStoppedOk returns a tuple with the Stopped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskService) GetStoppedOk() (*bool, bool) {
	if o == nil || IsNil(o.Stopped) {
		return nil, false
	}
	return o.Stopped, true
}

// HasStopped returns a boolean if a field has been set.
func (o *TaskService) HasStopped() bool {
	if o != nil && !IsNil(o.Stopped) {
		return true
	}

	return false
}

// SetStopped gets a reference to the given bool and assigns it to the Stopped field.
func (o *TaskService) SetStopped(v bool) {
	o.Stopped = &v
}

func (o TaskService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Started) {
		toSerialize["started"] = o.Started
	}
	if !IsNil(o.CorePoolSize) {
		toSerialize["corePoolSize"] = o.CorePoolSize
	}
	if !IsNil(o.Daemon) {
		toSerialize["daemon"] = o.Daemon
	}
	if !IsNil(o.ShutdownAllowed) {
		toSerialize["shutdownAllowed"] = o.ShutdownAllowed
	}
	if !IsNil(o.Shutdown) {
		toSerialize["shutdown"] = o.Shutdown
	}
	if !IsNil(o.Terminated) {
		toSerialize["terminated"] = o.Terminated
	}
	if !IsNil(o.Stopped) {
		toSerialize["stopped"] = o.Stopped
	}
	return toSerialize, nil
}

type NullableTaskService struct {
	value *TaskService
	isSet bool
}

func (v NullableTaskService) Get() *TaskService {
	return v.value
}

func (v *NullableTaskService) Set(val *TaskService) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskService) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskService(val *TaskService) *NullableTaskService {
	return &NullableTaskService{value: val, isSet: true}
}

func (v NullableTaskService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


