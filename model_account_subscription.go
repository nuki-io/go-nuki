/*
Nuki API

The Nuki Web Api

API version: 3.8.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AccountSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountSubscription{}

// AccountSubscription struct for AccountSubscription
type AccountSubscription struct {
	Id ObjectId `json:"id"`
	// The account id
	AccountId int32 `json:"accountId"`
	// The subscription id
	SubscriptionId int32 `json:"subscriptionId"`
	// The actual period
	Period int32 `json:"period"`
	// The payment type
	PaymentType string `json:"paymentType"`
	// The quantity of authorizations
	Quantity int32 `json:"quantity"`
	// The optional gift article after first purchase
	GiftArticle *string `json:"giftArticle,omitempty"`
	// The status
	Status string `json:"status"`
	// The start date
	StartDate *int64 `json:"startDate,omitempty"`
	// The period end date
	PeriodEndDate *int64 `json:"periodEndDate,omitempty"`
	// The next payment date
	NextPaymentDate *int64 `json:"nextPaymentDate,omitempty"`
}

type _AccountSubscription AccountSubscription

// NewAccountSubscription instantiates a new AccountSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountSubscription(id ObjectId, accountId int32, subscriptionId int32, period int32, paymentType string, quantity int32, status string) *AccountSubscription {
	this := AccountSubscription{}
	this.Id = id
	this.AccountId = accountId
	this.SubscriptionId = subscriptionId
	this.Period = period
	this.PaymentType = paymentType
	this.Quantity = quantity
	this.Status = status
	return &this
}

// NewAccountSubscriptionWithDefaults instantiates a new AccountSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountSubscriptionWithDefaults() *AccountSubscription {
	this := AccountSubscription{}
	return &this
}

// GetId returns the Id field value
func (o *AccountSubscription) GetId() ObjectId {
	if o == nil {
		var ret ObjectId
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AccountSubscription) GetIdOk() (*ObjectId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AccountSubscription) SetId(v ObjectId) {
	o.Id = v
}

// GetAccountId returns the AccountId field value
func (o *AccountSubscription) GetAccountId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *AccountSubscription) GetAccountIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *AccountSubscription) SetAccountId(v int32) {
	o.AccountId = v
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *AccountSubscription) GetSubscriptionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *AccountSubscription) GetSubscriptionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *AccountSubscription) SetSubscriptionId(v int32) {
	o.SubscriptionId = v
}

// GetPeriod returns the Period field value
func (o *AccountSubscription) GetPeriod() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Period
}

// GetPeriodOk returns a tuple with the Period field value
// and a boolean to check if the value has been set.
func (o *AccountSubscription) GetPeriodOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Period, true
}

// SetPeriod sets field value
func (o *AccountSubscription) SetPeriod(v int32) {
	o.Period = v
}

// GetPaymentType returns the PaymentType field value
func (o *AccountSubscription) GetPaymentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentType
}

// GetPaymentTypeOk returns a tuple with the PaymentType field value
// and a boolean to check if the value has been set.
func (o *AccountSubscription) GetPaymentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentType, true
}

// SetPaymentType sets field value
func (o *AccountSubscription) SetPaymentType(v string) {
	o.PaymentType = v
}

// GetQuantity returns the Quantity field value
func (o *AccountSubscription) GetQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *AccountSubscription) GetQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *AccountSubscription) SetQuantity(v int32) {
	o.Quantity = v
}

// GetGiftArticle returns the GiftArticle field value if set, zero value otherwise.
func (o *AccountSubscription) GetGiftArticle() string {
	if o == nil || IsNil(o.GiftArticle) {
		var ret string
		return ret
	}
	return *o.GiftArticle
}

// GetGiftArticleOk returns a tuple with the GiftArticle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSubscription) GetGiftArticleOk() (*string, bool) {
	if o == nil || IsNil(o.GiftArticle) {
		return nil, false
	}
	return o.GiftArticle, true
}

// HasGiftArticle returns a boolean if a field has been set.
func (o *AccountSubscription) HasGiftArticle() bool {
	if o != nil && !IsNil(o.GiftArticle) {
		return true
	}

	return false
}

// SetGiftArticle gets a reference to the given string and assigns it to the GiftArticle field.
func (o *AccountSubscription) SetGiftArticle(v string) {
	o.GiftArticle = &v
}

// GetStatus returns the Status field value
func (o *AccountSubscription) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *AccountSubscription) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *AccountSubscription) SetStatus(v string) {
	o.Status = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *AccountSubscription) GetStartDate() int64 {
	if o == nil || IsNil(o.StartDate) {
		var ret int64
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSubscription) GetStartDateOk() (*int64, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *AccountSubscription) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given int64 and assigns it to the StartDate field.
func (o *AccountSubscription) SetStartDate(v int64) {
	o.StartDate = &v
}

// GetPeriodEndDate returns the PeriodEndDate field value if set, zero value otherwise.
func (o *AccountSubscription) GetPeriodEndDate() int64 {
	if o == nil || IsNil(o.PeriodEndDate) {
		var ret int64
		return ret
	}
	return *o.PeriodEndDate
}

// GetPeriodEndDateOk returns a tuple with the PeriodEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSubscription) GetPeriodEndDateOk() (*int64, bool) {
	if o == nil || IsNil(o.PeriodEndDate) {
		return nil, false
	}
	return o.PeriodEndDate, true
}

// HasPeriodEndDate returns a boolean if a field has been set.
func (o *AccountSubscription) HasPeriodEndDate() bool {
	if o != nil && !IsNil(o.PeriodEndDate) {
		return true
	}

	return false
}

// SetPeriodEndDate gets a reference to the given int64 and assigns it to the PeriodEndDate field.
func (o *AccountSubscription) SetPeriodEndDate(v int64) {
	o.PeriodEndDate = &v
}

// GetNextPaymentDate returns the NextPaymentDate field value if set, zero value otherwise.
func (o *AccountSubscription) GetNextPaymentDate() int64 {
	if o == nil || IsNil(o.NextPaymentDate) {
		var ret int64
		return ret
	}
	return *o.NextPaymentDate
}

// GetNextPaymentDateOk returns a tuple with the NextPaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSubscription) GetNextPaymentDateOk() (*int64, bool) {
	if o == nil || IsNil(o.NextPaymentDate) {
		return nil, false
	}
	return o.NextPaymentDate, true
}

// HasNextPaymentDate returns a boolean if a field has been set.
func (o *AccountSubscription) HasNextPaymentDate() bool {
	if o != nil && !IsNil(o.NextPaymentDate) {
		return true
	}

	return false
}

// SetNextPaymentDate gets a reference to the given int64 and assigns it to the NextPaymentDate field.
func (o *AccountSubscription) SetNextPaymentDate(v int64) {
	o.NextPaymentDate = &v
}

func (o AccountSubscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["accountId"] = o.AccountId
	toSerialize["subscriptionId"] = o.SubscriptionId
	toSerialize["period"] = o.Period
	toSerialize["paymentType"] = o.PaymentType
	toSerialize["quantity"] = o.Quantity
	if !IsNil(o.GiftArticle) {
		toSerialize["giftArticle"] = o.GiftArticle
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.PeriodEndDate) {
		toSerialize["periodEndDate"] = o.PeriodEndDate
	}
	if !IsNil(o.NextPaymentDate) {
		toSerialize["nextPaymentDate"] = o.NextPaymentDate
	}
	return toSerialize, nil
}

func (o *AccountSubscription) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"accountId",
		"subscriptionId",
		"period",
		"paymentType",
		"quantity",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountSubscription := _AccountSubscription{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountSubscription)

	if err != nil {
		return err
	}

	*o = AccountSubscription(varAccountSubscription)

	return err
}

type NullableAccountSubscription struct {
	value *AccountSubscription
	isSet bool
}

func (v NullableAccountSubscription) Get() *AccountSubscription {
	return v.value
}

func (v *NullableAccountSubscription) Set(val *AccountSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountSubscription(val *AccountSubscription) *NullableAccountSubscription {
	return &NullableAccountSubscription{value: val, isSet: true}
}

func (v NullableAccountSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


