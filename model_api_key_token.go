/*
Nuki API

The Nuki Web Api

API version: 3.9.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ApiKeyToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiKeyToken{}

// ApiKeyToken struct for ApiKeyToken
type ApiKeyToken struct {
	// The id
	Id string `json:"id"`
	// The account id
	AccountId int32 `json:"accountId"`
	// The description
	Description *string `json:"description,omitempty"`
	// The access token
	AccessToken *string `json:"accessToken,omitempty"`
	// The list of scopes
	Scopes []string `json:"scopes"`
	// The creation date
	CreationDate time.Time `json:"creationDate"`
}

type _ApiKeyToken ApiKeyToken

// NewApiKeyToken instantiates a new ApiKeyToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiKeyToken(id string, accountId int32, scopes []string, creationDate time.Time) *ApiKeyToken {
	this := ApiKeyToken{}
	this.Id = id
	this.AccountId = accountId
	this.Scopes = scopes
	this.CreationDate = creationDate
	return &this
}

// NewApiKeyTokenWithDefaults instantiates a new ApiKeyToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiKeyTokenWithDefaults() *ApiKeyToken {
	this := ApiKeyToken{}
	return &this
}

// GetId returns the Id field value
func (o *ApiKeyToken) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ApiKeyToken) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ApiKeyToken) SetId(v string) {
	o.Id = v
}

// GetAccountId returns the AccountId field value
func (o *ApiKeyToken) GetAccountId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *ApiKeyToken) GetAccountIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *ApiKeyToken) SetAccountId(v int32) {
	o.AccountId = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ApiKeyToken) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKeyToken) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ApiKeyToken) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ApiKeyToken) SetDescription(v string) {
	o.Description = &v
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise.
func (o *ApiKeyToken) GetAccessToken() string {
	if o == nil || IsNil(o.AccessToken) {
		var ret string
		return ret
	}
	return *o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKeyToken) GetAccessTokenOk() (*string, bool) {
	if o == nil || IsNil(o.AccessToken) {
		return nil, false
	}
	return o.AccessToken, true
}

// HasAccessToken returns a boolean if a field has been set.
func (o *ApiKeyToken) HasAccessToken() bool {
	if o != nil && !IsNil(o.AccessToken) {
		return true
	}

	return false
}

// SetAccessToken gets a reference to the given string and assigns it to the AccessToken field.
func (o *ApiKeyToken) SetAccessToken(v string) {
	o.AccessToken = &v
}

// GetScopes returns the Scopes field value
func (o *ApiKeyToken) GetScopes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
func (o *ApiKeyToken) GetScopesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scopes, true
}

// SetScopes sets field value
func (o *ApiKeyToken) SetScopes(v []string) {
	o.Scopes = v
}

// GetCreationDate returns the CreationDate field value
func (o *ApiKeyToken) GetCreationDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value
// and a boolean to check if the value has been set.
func (o *ApiKeyToken) GetCreationDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationDate, true
}

// SetCreationDate sets field value
func (o *ApiKeyToken) SetCreationDate(v time.Time) {
	o.CreationDate = v
}

func (o ApiKeyToken) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiKeyToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["accountId"] = o.AccountId
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.AccessToken) {
		toSerialize["accessToken"] = o.AccessToken
	}
	toSerialize["scopes"] = o.Scopes
	toSerialize["creationDate"] = o.CreationDate
	return toSerialize, nil
}

func (o *ApiKeyToken) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"accountId",
		"scopes",
		"creationDate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiKeyToken := _ApiKeyToken{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiKeyToken)

	if err != nil {
		return err
	}

	*o = ApiKeyToken(varApiKeyToken)

	return err
}

type NullableApiKeyToken struct {
	value *ApiKeyToken
	isSet bool
}

func (v NullableApiKeyToken) Get() *ApiKeyToken {
	return v.value
}

func (v *NullableApiKeyToken) Set(val *ApiKeyToken) {
	v.value = val
	v.isSet = true
}

func (v NullableApiKeyToken) IsSet() bool {
	return v.isSet
}

func (v *NullableApiKeyToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiKeyToken(val *ApiKeyToken) *NullableApiKeyToken {
	return &NullableApiKeyToken{value: val, isSet: true}
}

func (v NullableApiKeyToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiKeyToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


