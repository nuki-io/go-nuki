/*
Nuki API

The Nuki Web Api

API version: 0.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddressTokenInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressTokenInfo{}

// AddressTokenInfo struct for AddressTokenInfo
type AddressTokenInfo struct {
	// The id
	Id string `json:"id"`
	// The address name
	AddressName string `json:"addressName"`
	// The associated smartlock names
	SmartlockNames []string `json:"smartlockNames"`
}

type _AddressTokenInfo AddressTokenInfo

// NewAddressTokenInfo instantiates a new AddressTokenInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressTokenInfo(id string, addressName string, smartlockNames []string) *AddressTokenInfo {
	this := AddressTokenInfo{}
	this.Id = id
	this.AddressName = addressName
	this.SmartlockNames = smartlockNames
	return &this
}

// NewAddressTokenInfoWithDefaults instantiates a new AddressTokenInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressTokenInfoWithDefaults() *AddressTokenInfo {
	this := AddressTokenInfo{}
	return &this
}

// GetId returns the Id field value
func (o *AddressTokenInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AddressTokenInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AddressTokenInfo) SetId(v string) {
	o.Id = v
}

// GetAddressName returns the AddressName field value
func (o *AddressTokenInfo) GetAddressName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AddressName
}

// GetAddressNameOk returns a tuple with the AddressName field value
// and a boolean to check if the value has been set.
func (o *AddressTokenInfo) GetAddressNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddressName, true
}

// SetAddressName sets field value
func (o *AddressTokenInfo) SetAddressName(v string) {
	o.AddressName = v
}

// GetSmartlockNames returns the SmartlockNames field value
func (o *AddressTokenInfo) GetSmartlockNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SmartlockNames
}

// GetSmartlockNamesOk returns a tuple with the SmartlockNames field value
// and a boolean to check if the value has been set.
func (o *AddressTokenInfo) GetSmartlockNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SmartlockNames, true
}

// SetSmartlockNames sets field value
func (o *AddressTokenInfo) SetSmartlockNames(v []string) {
	o.SmartlockNames = v
}

func (o AddressTokenInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressTokenInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["addressName"] = o.AddressName
	toSerialize["smartlockNames"] = o.SmartlockNames
	return toSerialize, nil
}

func (o *AddressTokenInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"addressName",
		"smartlockNames",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddressTokenInfo := _AddressTokenInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddressTokenInfo)

	if err != nil {
		return err
	}

	*o = AddressTokenInfo(varAddressTokenInfo)

	return err
}

type NullableAddressTokenInfo struct {
	value *AddressTokenInfo
	isSet bool
}

func (v NullableAddressTokenInfo) Get() *AddressTokenInfo {
	return v.value
}

func (v *NullableAddressTokenInfo) Set(val *AddressTokenInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressTokenInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressTokenInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressTokenInfo(val *AddressTokenInfo) *NullableAddressTokenInfo {
	return &NullableAddressTokenInfo{value: val, isSet: true}
}

func (v NullableAddressTokenInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressTokenInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


