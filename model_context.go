/*
Nuki API

The Nuki Web Api

API version: 4.0.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Context type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Context{}

// Context struct for Context
type Context struct {
	ClientDispatcher *Restlet `json:"clientDispatcher,omitempty"`
	ServerDispatcher *Restlet `json:"serverDispatcher,omitempty"`
	Attributes map[string]map[string]interface{} `json:"attributes,omitempty"`
	Logger *Logger `json:"logger,omitempty"`
	Parameters []Parameter `json:"parameters,omitempty"`
	DefaultEnroler map[string]interface{} `json:"defaultEnroler,omitempty"`
	DefaultVerifier map[string]interface{} `json:"defaultVerifier,omitempty"`
	ExecutorService *ScheduledExecutorService `json:"executorService,omitempty"`
}

// NewContext instantiates a new Context object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContext() *Context {
	this := Context{}
	return &this
}

// NewContextWithDefaults instantiates a new Context object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContextWithDefaults() *Context {
	this := Context{}
	return &this
}

// GetClientDispatcher returns the ClientDispatcher field value if set, zero value otherwise.
func (o *Context) GetClientDispatcher() Restlet {
	if o == nil || IsNil(o.ClientDispatcher) {
		var ret Restlet
		return ret
	}
	return *o.ClientDispatcher
}

// GetClientDispatcherOk returns a tuple with the ClientDispatcher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetClientDispatcherOk() (*Restlet, bool) {
	if o == nil || IsNil(o.ClientDispatcher) {
		return nil, false
	}
	return o.ClientDispatcher, true
}

// HasClientDispatcher returns a boolean if a field has been set.
func (o *Context) HasClientDispatcher() bool {
	if o != nil && !IsNil(o.ClientDispatcher) {
		return true
	}

	return false
}

// SetClientDispatcher gets a reference to the given Restlet and assigns it to the ClientDispatcher field.
func (o *Context) SetClientDispatcher(v Restlet) {
	o.ClientDispatcher = &v
}

// GetServerDispatcher returns the ServerDispatcher field value if set, zero value otherwise.
func (o *Context) GetServerDispatcher() Restlet {
	if o == nil || IsNil(o.ServerDispatcher) {
		var ret Restlet
		return ret
	}
	return *o.ServerDispatcher
}

// GetServerDispatcherOk returns a tuple with the ServerDispatcher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetServerDispatcherOk() (*Restlet, bool) {
	if o == nil || IsNil(o.ServerDispatcher) {
		return nil, false
	}
	return o.ServerDispatcher, true
}

// HasServerDispatcher returns a boolean if a field has been set.
func (o *Context) HasServerDispatcher() bool {
	if o != nil && !IsNil(o.ServerDispatcher) {
		return true
	}

	return false
}

// SetServerDispatcher gets a reference to the given Restlet and assigns it to the ServerDispatcher field.
func (o *Context) SetServerDispatcher(v Restlet) {
	o.ServerDispatcher = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Context) GetAttributes() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetAttributesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Attributes) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Context) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]map[string]interface{} and assigns it to the Attributes field.
func (o *Context) SetAttributes(v map[string]map[string]interface{}) {
	o.Attributes = v
}

// GetLogger returns the Logger field value if set, zero value otherwise.
func (o *Context) GetLogger() Logger {
	if o == nil || IsNil(o.Logger) {
		var ret Logger
		return ret
	}
	return *o.Logger
}

// GetLoggerOk returns a tuple with the Logger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetLoggerOk() (*Logger, bool) {
	if o == nil || IsNil(o.Logger) {
		return nil, false
	}
	return o.Logger, true
}

// HasLogger returns a boolean if a field has been set.
func (o *Context) HasLogger() bool {
	if o != nil && !IsNil(o.Logger) {
		return true
	}

	return false
}

// SetLogger gets a reference to the given Logger and assigns it to the Logger field.
func (o *Context) SetLogger(v Logger) {
	o.Logger = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *Context) GetParameters() []Parameter {
	if o == nil || IsNil(o.Parameters) {
		var ret []Parameter
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetParametersOk() ([]Parameter, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *Context) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []Parameter and assigns it to the Parameters field.
func (o *Context) SetParameters(v []Parameter) {
	o.Parameters = v
}

// GetDefaultEnroler returns the DefaultEnroler field value if set, zero value otherwise.
func (o *Context) GetDefaultEnroler() map[string]interface{} {
	if o == nil || IsNil(o.DefaultEnroler) {
		var ret map[string]interface{}
		return ret
	}
	return o.DefaultEnroler
}

// GetDefaultEnrolerOk returns a tuple with the DefaultEnroler field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetDefaultEnrolerOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DefaultEnroler) {
		return map[string]interface{}{}, false
	}
	return o.DefaultEnroler, true
}

// HasDefaultEnroler returns a boolean if a field has been set.
func (o *Context) HasDefaultEnroler() bool {
	if o != nil && !IsNil(o.DefaultEnroler) {
		return true
	}

	return false
}

// SetDefaultEnroler gets a reference to the given map[string]interface{} and assigns it to the DefaultEnroler field.
func (o *Context) SetDefaultEnroler(v map[string]interface{}) {
	o.DefaultEnroler = v
}

// GetDefaultVerifier returns the DefaultVerifier field value if set, zero value otherwise.
func (o *Context) GetDefaultVerifier() map[string]interface{} {
	if o == nil || IsNil(o.DefaultVerifier) {
		var ret map[string]interface{}
		return ret
	}
	return o.DefaultVerifier
}

// GetDefaultVerifierOk returns a tuple with the DefaultVerifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetDefaultVerifierOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DefaultVerifier) {
		return map[string]interface{}{}, false
	}
	return o.DefaultVerifier, true
}

// HasDefaultVerifier returns a boolean if a field has been set.
func (o *Context) HasDefaultVerifier() bool {
	if o != nil && !IsNil(o.DefaultVerifier) {
		return true
	}

	return false
}

// SetDefaultVerifier gets a reference to the given map[string]interface{} and assigns it to the DefaultVerifier field.
func (o *Context) SetDefaultVerifier(v map[string]interface{}) {
	o.DefaultVerifier = v
}

// GetExecutorService returns the ExecutorService field value if set, zero value otherwise.
func (o *Context) GetExecutorService() ScheduledExecutorService {
	if o == nil || IsNil(o.ExecutorService) {
		var ret ScheduledExecutorService
		return ret
	}
	return *o.ExecutorService
}

// GetExecutorServiceOk returns a tuple with the ExecutorService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetExecutorServiceOk() (*ScheduledExecutorService, bool) {
	if o == nil || IsNil(o.ExecutorService) {
		return nil, false
	}
	return o.ExecutorService, true
}

// HasExecutorService returns a boolean if a field has been set.
func (o *Context) HasExecutorService() bool {
	if o != nil && !IsNil(o.ExecutorService) {
		return true
	}

	return false
}

// SetExecutorService gets a reference to the given ScheduledExecutorService and assigns it to the ExecutorService field.
func (o *Context) SetExecutorService(v ScheduledExecutorService) {
	o.ExecutorService = &v
}

func (o Context) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Context) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClientDispatcher) {
		toSerialize["clientDispatcher"] = o.ClientDispatcher
	}
	if !IsNil(o.ServerDispatcher) {
		toSerialize["serverDispatcher"] = o.ServerDispatcher
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Logger) {
		toSerialize["logger"] = o.Logger
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.DefaultEnroler) {
		toSerialize["defaultEnroler"] = o.DefaultEnroler
	}
	if !IsNil(o.DefaultVerifier) {
		toSerialize["defaultVerifier"] = o.DefaultVerifier
	}
	if !IsNil(o.ExecutorService) {
		toSerialize["executorService"] = o.ExecutorService
	}
	return toSerialize, nil
}

type NullableContext struct {
	value *Context
	isSet bool
}

func (v NullableContext) Get() *Context {
	return v.value
}

func (v *NullableContext) Set(val *Context) {
	v.value = val
	v.isSet = true
}

func (v NullableContext) IsSet() bool {
	return v.isSet
}

func (v *NullableContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContext(val *Context) *NullableContext {
	return &NullableContext{value: val, isSet: true}
}

func (v NullableContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


