/*
Nuki API

The Nuki Web Api

API version: 0.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SmartlockAuthAPIService SmartlockAuthAPI service
type SmartlockAuthAPIService service

type ApiSmartlockAuthResourceDeleteDeleteRequest struct {
	ctx context.Context
	ApiService *SmartlockAuthAPIService
	smartlockId int32
	id string
}

func (r ApiSmartlockAuthResourceDeleteDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.SmartlockAuthResourceDeleteDeleteExecute(r)
}

/*
SmartlockAuthResourceDeleteDelete Deletes asynchronous a smartlock authorization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param smartlockId The smartlock id
 @param id The smartlock authorization unique id
 @return ApiSmartlockAuthResourceDeleteDeleteRequest
*/
func (a *SmartlockAuthAPIService) SmartlockAuthResourceDeleteDelete(ctx context.Context, smartlockId int32, id string) ApiSmartlockAuthResourceDeleteDeleteRequest {
	return ApiSmartlockAuthResourceDeleteDeleteRequest{
		ApiService: a,
		ctx: ctx,
		smartlockId: smartlockId,
		id: id,
	}
}

// Execute executes the request
func (a *SmartlockAuthAPIService) SmartlockAuthResourceDeleteDeleteExecute(r ApiSmartlockAuthResourceDeleteDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartlockAuthAPIService.SmartlockAuthResourceDeleteDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartlock/{smartlockId}/auth/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"smartlockId"+"}", url.PathEscape(parameterValueToString(r.smartlockId, "smartlockId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSmartlockAuthResourceGetGetRequest struct {
	ctx context.Context
	ApiService *SmartlockAuthAPIService
	smartlockId int32
	id string
}

func (r ApiSmartlockAuthResourceGetGetRequest) Execute() (*SmartlockAuth, *http.Response, error) {
	return r.ApiService.SmartlockAuthResourceGetGetExecute(r)
}

/*
SmartlockAuthResourceGetGet Get a smartlock authorization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param smartlockId The smartlock id
 @param id The smartlock auth unique id
 @return ApiSmartlockAuthResourceGetGetRequest
*/
func (a *SmartlockAuthAPIService) SmartlockAuthResourceGetGet(ctx context.Context, smartlockId int32, id string) ApiSmartlockAuthResourceGetGetRequest {
	return ApiSmartlockAuthResourceGetGetRequest{
		ApiService: a,
		ctx: ctx,
		smartlockId: smartlockId,
		id: id,
	}
}

// Execute executes the request
//  @return SmartlockAuth
func (a *SmartlockAuthAPIService) SmartlockAuthResourceGetGetExecute(r ApiSmartlockAuthResourceGetGetRequest) (*SmartlockAuth, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SmartlockAuth
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartlockAuthAPIService.SmartlockAuthResourceGetGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartlock/{smartlockId}/auth/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"smartlockId"+"}", url.PathEscape(parameterValueToString(r.smartlockId, "smartlockId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSmartlockAuthResourcePostPostRequest struct {
	ctx context.Context
	ApiService *SmartlockAuthAPIService
	smartlockId int32
	id string
	body *SmartlockAuthUpdate
}

// Smartlock authorization update representation
func (r ApiSmartlockAuthResourcePostPostRequest) Body(body SmartlockAuthUpdate) ApiSmartlockAuthResourcePostPostRequest {
	r.body = &body
	return r
}

func (r ApiSmartlockAuthResourcePostPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.SmartlockAuthResourcePostPostExecute(r)
}

/*
SmartlockAuthResourcePostPost Updates asynchronous a smartlock authorization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param smartlockId The smartlock id
 @param id The smartlock authorization unique id
 @return ApiSmartlockAuthResourcePostPostRequest
*/
func (a *SmartlockAuthAPIService) SmartlockAuthResourcePostPost(ctx context.Context, smartlockId int32, id string) ApiSmartlockAuthResourcePostPostRequest {
	return ApiSmartlockAuthResourcePostPostRequest{
		ApiService: a,
		ctx: ctx,
		smartlockId: smartlockId,
		id: id,
	}
}

// Execute executes the request
func (a *SmartlockAuthAPIService) SmartlockAuthResourcePostPostExecute(r ApiSmartlockAuthResourcePostPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartlockAuthAPIService.SmartlockAuthResourcePostPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartlock/{smartlockId}/auth/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"smartlockId"+"}", url.PathEscape(parameterValueToString(r.smartlockId, "smartlockId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSmartlockAuthsResourceGetGetRequest struct {
	ctx context.Context
	ApiService *SmartlockAuthAPIService
	smartlockId int32
	types *string
}

// Filter for smartlock authorization&#39;s types (comma-separated eg: 0,2,3)
func (r ApiSmartlockAuthsResourceGetGetRequest) Types(types string) ApiSmartlockAuthsResourceGetGetRequest {
	r.types = &types
	return r
}

func (r ApiSmartlockAuthsResourceGetGetRequest) Execute() ([]SmartlockAuth, *http.Response, error) {
	return r.ApiService.SmartlockAuthsResourceGetGetExecute(r)
}

/*
SmartlockAuthsResourceGetGet Get a list of smartlock authorizations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param smartlockId The smartlock id
 @return ApiSmartlockAuthsResourceGetGetRequest
*/
func (a *SmartlockAuthAPIService) SmartlockAuthsResourceGetGet(ctx context.Context, smartlockId int32) ApiSmartlockAuthsResourceGetGetRequest {
	return ApiSmartlockAuthsResourceGetGetRequest{
		ApiService: a,
		ctx: ctx,
		smartlockId: smartlockId,
	}
}

// Execute executes the request
//  @return []SmartlockAuth
func (a *SmartlockAuthAPIService) SmartlockAuthsResourceGetGetExecute(r ApiSmartlockAuthsResourceGetGetRequest) ([]SmartlockAuth, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SmartlockAuth
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartlockAuthAPIService.SmartlockAuthsResourceGetGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartlock/{smartlockId}/auth"
	localVarPath = strings.Replace(localVarPath, "{"+"smartlockId"+"}", url.PathEscape(parameterValueToString(r.smartlockId, "smartlockId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.types != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "types", r.types, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSmartlockAuthsResourcePutPutRequest struct {
	ctx context.Context
	ApiService *SmartlockAuthAPIService
	smartlockId int32
	body *SmartlockAuthCreate
}

// Smartlock authorization create representation
func (r ApiSmartlockAuthsResourcePutPutRequest) Body(body SmartlockAuthCreate) ApiSmartlockAuthsResourcePutPutRequest {
	r.body = &body
	return r
}

func (r ApiSmartlockAuthsResourcePutPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.SmartlockAuthsResourcePutPutExecute(r)
}

/*
SmartlockAuthsResourcePutPut Creates asynchronous a smartlock authorization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param smartlockId The smartlock id
 @return ApiSmartlockAuthsResourcePutPutRequest
*/
func (a *SmartlockAuthAPIService) SmartlockAuthsResourcePutPut(ctx context.Context, smartlockId int32) ApiSmartlockAuthsResourcePutPutRequest {
	return ApiSmartlockAuthsResourcePutPutRequest{
		ApiService: a,
		ctx: ctx,
		smartlockId: smartlockId,
	}
}

// Execute executes the request
func (a *SmartlockAuthAPIService) SmartlockAuthsResourcePutPutExecute(r ApiSmartlockAuthsResourcePutPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartlockAuthAPIService.SmartlockAuthsResourcePutPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartlock/{smartlockId}/auth"
	localVarPath = strings.Replace(localVarPath, "{"+"smartlockId"+"}", url.PathEscape(parameterValueToString(r.smartlockId, "smartlockId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSmartlocksAuthsResourceDeleteDeleteRequest struct {
	ctx context.Context
	ApiService *SmartlockAuthAPIService
	body *[]string
}

// Smartlock authorization IDs to delete
func (r ApiSmartlocksAuthsResourceDeleteDeleteRequest) Body(body []string) ApiSmartlocksAuthsResourceDeleteDeleteRequest {
	r.body = &body
	return r
}

func (r ApiSmartlocksAuthsResourceDeleteDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.SmartlocksAuthsResourceDeleteDeleteExecute(r)
}

/*
SmartlocksAuthsResourceDeleteDelete Deletes smartlock authorizations asynchronously

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSmartlocksAuthsResourceDeleteDeleteRequest
*/
func (a *SmartlockAuthAPIService) SmartlocksAuthsResourceDeleteDelete(ctx context.Context) ApiSmartlocksAuthsResourceDeleteDeleteRequest {
	return ApiSmartlocksAuthsResourceDeleteDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SmartlockAuthAPIService) SmartlocksAuthsResourceDeleteDeleteExecute(r ApiSmartlocksAuthsResourceDeleteDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartlockAuthAPIService.SmartlocksAuthsResourceDeleteDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartlock/auth"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSmartlocksAuthsResourceGetGetRequest struct {
	ctx context.Context
	ApiService *SmartlockAuthAPIService
	accountUserId *int32
	types *string
}

// Filter for account users:  set to a positive number will filter for authorizations with this specific accountUserId, set to a negative number will filter without set accountUserId
func (r ApiSmartlocksAuthsResourceGetGetRequest) AccountUserId(accountUserId int32) ApiSmartlocksAuthsResourceGetGetRequest {
	r.accountUserId = &accountUserId
	return r
}

// Filter for authorization&#39;s types (comma-separated eg: 0,2,3)
func (r ApiSmartlocksAuthsResourceGetGetRequest) Types(types string) ApiSmartlocksAuthsResourceGetGetRequest {
	r.types = &types
	return r
}

func (r ApiSmartlocksAuthsResourceGetGetRequest) Execute() ([]SmartlockAuth, *http.Response, error) {
	return r.ApiService.SmartlocksAuthsResourceGetGetExecute(r)
}

/*
SmartlocksAuthsResourceGetGet Get a list of smartlock authorizations for your smartlocks

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSmartlocksAuthsResourceGetGetRequest
*/
func (a *SmartlockAuthAPIService) SmartlocksAuthsResourceGetGet(ctx context.Context) ApiSmartlocksAuthsResourceGetGetRequest {
	return ApiSmartlocksAuthsResourceGetGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SmartlockAuth
func (a *SmartlockAuthAPIService) SmartlocksAuthsResourceGetGetExecute(r ApiSmartlocksAuthsResourceGetGetRequest) ([]SmartlockAuth, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SmartlockAuth
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartlockAuthAPIService.SmartlocksAuthsResourceGetGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartlock/auth"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountUserId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountUserId", r.accountUserId, "", "")
	}
	if r.types != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "types", r.types, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSmartlocksAuthsResourcePostPostRequest struct {
	ctx context.Context
	ApiService *SmartlockAuthAPIService
	body *[]SmartlockAuthMultiUpdate
}

// Smartlock authorization update representations
func (r ApiSmartlocksAuthsResourcePostPostRequest) Body(body []SmartlockAuthMultiUpdate) ApiSmartlocksAuthsResourcePostPostRequest {
	r.body = &body
	return r
}

func (r ApiSmartlocksAuthsResourcePostPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.SmartlocksAuthsResourcePostPostExecute(r)
}

/*
SmartlocksAuthsResourcePostPost Updates smartlock authorizations asynchronously

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSmartlocksAuthsResourcePostPostRequest
*/
func (a *SmartlockAuthAPIService) SmartlocksAuthsResourcePostPost(ctx context.Context) ApiSmartlocksAuthsResourcePostPostRequest {
	return ApiSmartlocksAuthsResourcePostPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SmartlockAuthAPIService) SmartlocksAuthsResourcePostPostExecute(r ApiSmartlocksAuthsResourcePostPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartlockAuthAPIService.SmartlocksAuthsResourcePostPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartlock/auth"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSmartlocksAuthsResourcePutPutRequest struct {
	ctx context.Context
	ApiService *SmartlockAuthAPIService
	body *SmartlocksAuthCreate
}

// Smartlock authorization create representation
func (r ApiSmartlocksAuthsResourcePutPutRequest) Body(body SmartlocksAuthCreate) ApiSmartlocksAuthsResourcePutPutRequest {
	r.body = &body
	return r
}

func (r ApiSmartlocksAuthsResourcePutPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.SmartlocksAuthsResourcePutPutExecute(r)
}

/*
SmartlocksAuthsResourcePutPut Creates asynchronous smartlock authorizations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSmartlocksAuthsResourcePutPutRequest
*/
func (a *SmartlockAuthAPIService) SmartlocksAuthsResourcePutPut(ctx context.Context) ApiSmartlocksAuthsResourcePutPutRequest {
	return ApiSmartlocksAuthsResourcePutPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SmartlockAuthAPIService) SmartlocksAuthsResourcePutPutExecute(r ApiSmartlocksAuthsResourcePutPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartlockAuthAPIService.SmartlocksAuthsResourcePutPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartlock/auth"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
