/*
Nuki API

The Nuki Web Api

API version: 3.13.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SmartlockAuthAPIService SmartlockAuthAPI service
type SmartlockAuthAPIService service

type ApiDeleteSmartlockAuthRequest struct {
	ctx context.Context
	ApiService *SmartlockAuthAPIService
	smartlockId int32
	id string
}

func (r ApiDeleteSmartlockAuthRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSmartlockAuthExecute(r)
}

/*
DeleteSmartlockAuth Deletes asynchronous a smartlock authorization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param smartlockId The smartlock id
 @param id The smartlock authorization unique id
 @return ApiDeleteSmartlockAuthRequest
*/
func (a *SmartlockAuthAPIService) DeleteSmartlockAuth(ctx context.Context, smartlockId int32, id string) ApiDeleteSmartlockAuthRequest {
	return ApiDeleteSmartlockAuthRequest{
		ApiService: a,
		ctx: ctx,
		smartlockId: smartlockId,
		id: id,
	}
}

// Execute executes the request
func (a *SmartlockAuthAPIService) DeleteSmartlockAuthExecute(r ApiDeleteSmartlockAuthRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartlockAuthAPIService.DeleteSmartlockAuth")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartlock/{smartlockId}/auth/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"smartlockId"+"}", url.PathEscape(parameterValueToString(r.smartlockId, "smartlockId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteSmartlocksAuthsRequest struct {
	ctx context.Context
	ApiService *SmartlockAuthAPIService
	body *[]string
}

// Smartlock authorization IDs to delete
func (r ApiDeleteSmartlocksAuthsRequest) Body(body []string) ApiDeleteSmartlocksAuthsRequest {
	r.body = &body
	return r
}

func (r ApiDeleteSmartlocksAuthsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSmartlocksAuthsExecute(r)
}

/*
DeleteSmartlocksAuths Deletes smartlock authorizations asynchronously

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteSmartlocksAuthsRequest
*/
func (a *SmartlockAuthAPIService) DeleteSmartlocksAuths(ctx context.Context) ApiDeleteSmartlocksAuthsRequest {
	return ApiDeleteSmartlocksAuthsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SmartlockAuthAPIService) DeleteSmartlocksAuthsExecute(r ApiDeleteSmartlocksAuthsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartlockAuthAPIService.DeleteSmartlocksAuths")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartlock/auth"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSmartlockAuthRequest struct {
	ctx context.Context
	ApiService *SmartlockAuthAPIService
	smartlockId int32
	id string
}

func (r ApiGetSmartlockAuthRequest) Execute() (*SmartlockAuth, *http.Response, error) {
	return r.ApiService.GetSmartlockAuthExecute(r)
}

/*
GetSmartlockAuth Get a smartlock authorization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param smartlockId The smartlock id
 @param id The smartlock auth unique id
 @return ApiGetSmartlockAuthRequest
*/
func (a *SmartlockAuthAPIService) GetSmartlockAuth(ctx context.Context, smartlockId int32, id string) ApiGetSmartlockAuthRequest {
	return ApiGetSmartlockAuthRequest{
		ApiService: a,
		ctx: ctx,
		smartlockId: smartlockId,
		id: id,
	}
}

// Execute executes the request
//  @return SmartlockAuth
func (a *SmartlockAuthAPIService) GetSmartlockAuthExecute(r ApiGetSmartlockAuthRequest) (*SmartlockAuth, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SmartlockAuth
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartlockAuthAPIService.GetSmartlockAuth")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartlock/{smartlockId}/auth/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"smartlockId"+"}", url.PathEscape(parameterValueToString(r.smartlockId, "smartlockId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSmartlockAuthsRequest struct {
	ctx context.Context
	ApiService *SmartlockAuthAPIService
	smartlockId int32
	types *string
}

// Filter for smartlock authorization&#39;s types (comma-separated eg: 0,2,3)
func (r ApiGetSmartlockAuthsRequest) Types(types string) ApiGetSmartlockAuthsRequest {
	r.types = &types
	return r
}

func (r ApiGetSmartlockAuthsRequest) Execute() ([]SmartlockAuth, *http.Response, error) {
	return r.ApiService.GetSmartlockAuthsExecute(r)
}

/*
GetSmartlockAuths Get a list of smartlock authorizations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param smartlockId The smartlock id
 @return ApiGetSmartlockAuthsRequest
*/
func (a *SmartlockAuthAPIService) GetSmartlockAuths(ctx context.Context, smartlockId int32) ApiGetSmartlockAuthsRequest {
	return ApiGetSmartlockAuthsRequest{
		ApiService: a,
		ctx: ctx,
		smartlockId: smartlockId,
	}
}

// Execute executes the request
//  @return []SmartlockAuth
func (a *SmartlockAuthAPIService) GetSmartlockAuthsExecute(r ApiGetSmartlockAuthsRequest) ([]SmartlockAuth, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SmartlockAuth
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartlockAuthAPIService.GetSmartlockAuths")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartlock/{smartlockId}/auth"
	localVarPath = strings.Replace(localVarPath, "{"+"smartlockId"+"}", url.PathEscape(parameterValueToString(r.smartlockId, "smartlockId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.types != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "types", r.types, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSmartlocksAuthsRequest struct {
	ctx context.Context
	ApiService *SmartlockAuthAPIService
	accountUserId *int32
	types *string
}

// Filter for account users:  set to a positive number will filter for authorizations with this specific accountUserId, set to a negative number will filter without set accountUserId
func (r ApiGetSmartlocksAuthsRequest) AccountUserId(accountUserId int32) ApiGetSmartlocksAuthsRequest {
	r.accountUserId = &accountUserId
	return r
}

// Filter for authorization&#39;s types (comma-separated eg: 0,2,3)
func (r ApiGetSmartlocksAuthsRequest) Types(types string) ApiGetSmartlocksAuthsRequest {
	r.types = &types
	return r
}

func (r ApiGetSmartlocksAuthsRequest) Execute() ([]SmartlockAuth, *http.Response, error) {
	return r.ApiService.GetSmartlocksAuthsExecute(r)
}

/*
GetSmartlocksAuths Get a list of smartlock authorizations for your smartlocks

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSmartlocksAuthsRequest
*/
func (a *SmartlockAuthAPIService) GetSmartlocksAuths(ctx context.Context) ApiGetSmartlocksAuthsRequest {
	return ApiGetSmartlocksAuthsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SmartlockAuth
func (a *SmartlockAuthAPIService) GetSmartlocksAuthsExecute(r ApiGetSmartlocksAuthsRequest) ([]SmartlockAuth, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SmartlockAuth
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartlockAuthAPIService.GetSmartlocksAuths")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartlock/auth"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountUserId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountUserId", r.accountUserId, "", "")
	}
	if r.types != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "types", r.types, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSmartlocksAuthsPaginatedRequest struct {
	ctx context.Context
	ApiService *SmartlockAuthAPIService
	page *int32
	size *int32
	accountUserId *int32
	types *string
}

// The page number, starting from 0
func (r ApiGetSmartlocksAuthsPaginatedRequest) Page(page int32) ApiGetSmartlocksAuthsPaginatedRequest {
	r.page = &page
	return r
}

// The number of items in one page
func (r ApiGetSmartlocksAuthsPaginatedRequest) Size(size int32) ApiGetSmartlocksAuthsPaginatedRequest {
	r.size = &size
	return r
}

// Filter for account users:  set to a positive number will filter for authorizations with this specific accountUserId, set to a negative number will filter without set accountUserId
func (r ApiGetSmartlocksAuthsPaginatedRequest) AccountUserId(accountUserId int32) ApiGetSmartlocksAuthsPaginatedRequest {
	r.accountUserId = &accountUserId
	return r
}

// Filter for authorization&#39;s types (comma-separated eg: 0,2,3)
func (r ApiGetSmartlocksAuthsPaginatedRequest) Types(types string) ApiGetSmartlocksAuthsPaginatedRequest {
	r.types = &types
	return r
}

func (r ApiGetSmartlocksAuthsPaginatedRequest) Execute() (*PaginatedResponse, *http.Response, error) {
	return r.ApiService.GetSmartlocksAuthsPaginatedExecute(r)
}

/*
GetSmartlocksAuthsPaginated Get a paginated list of smartlock authorizations for your smartlocks

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSmartlocksAuthsPaginatedRequest
*/
func (a *SmartlockAuthAPIService) GetSmartlocksAuthsPaginated(ctx context.Context) ApiGetSmartlocksAuthsPaginatedRequest {
	return ApiGetSmartlocksAuthsPaginatedRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedResponse
func (a *SmartlockAuthAPIService) GetSmartlocksAuthsPaginatedExecute(r ApiGetSmartlocksAuthsPaginatedRequest) (*PaginatedResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartlockAuthAPIService.GetSmartlocksAuthsPaginated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartlock/auth/paged"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "", "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "", "")
	} else {
		var defaultValue int32 = 100
		r.size = &defaultValue
	}
	if r.accountUserId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountUserId", r.accountUserId, "", "")
	}
	if r.types != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "types", r.types, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSmartlockAuthRequest struct {
	ctx context.Context
	ApiService *SmartlockAuthAPIService
	smartlockId int32
	id string
	body *SmartlockAuthUpdate
}

// Smartlock authorization update representation
func (r ApiPostSmartlockAuthRequest) Body(body SmartlockAuthUpdate) ApiPostSmartlockAuthRequest {
	r.body = &body
	return r
}

func (r ApiPostSmartlockAuthRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostSmartlockAuthExecute(r)
}

/*
PostSmartlockAuth Updates asynchronous a smartlock authorization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param smartlockId The smartlock id
 @param id The smartlock authorization unique id
 @return ApiPostSmartlockAuthRequest
*/
func (a *SmartlockAuthAPIService) PostSmartlockAuth(ctx context.Context, smartlockId int32, id string) ApiPostSmartlockAuthRequest {
	return ApiPostSmartlockAuthRequest{
		ApiService: a,
		ctx: ctx,
		smartlockId: smartlockId,
		id: id,
	}
}

// Execute executes the request
func (a *SmartlockAuthAPIService) PostSmartlockAuthExecute(r ApiPostSmartlockAuthRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartlockAuthAPIService.PostSmartlockAuth")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartlock/{smartlockId}/auth/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"smartlockId"+"}", url.PathEscape(parameterValueToString(r.smartlockId, "smartlockId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostSmartlockAuthWithSharedKeyRequest struct {
	ctx context.Context
	ApiService *SmartlockAuthAPIService
	smartlockId int32
	body *SmartlockAuthWithSharedKeyCreate
}

// Smartlock auth create with shared key
func (r ApiPostSmartlockAuthWithSharedKeyRequest) Body(body SmartlockAuthWithSharedKeyCreate) ApiPostSmartlockAuthWithSharedKeyRequest {
	r.body = &body
	return r
}

func (r ApiPostSmartlockAuthWithSharedKeyRequest) Execute() ([]SmartlockAuth, *http.Response, error) {
	return r.ApiService.PostSmartlockAuthWithSharedKeyExecute(r)
}

/*
PostSmartlockAuthWithSharedKey Generate a new smartlock auth with a shared key

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param smartlockId The smartlock id
 @return ApiPostSmartlockAuthWithSharedKeyRequest
*/
func (a *SmartlockAuthAPIService) PostSmartlockAuthWithSharedKey(ctx context.Context, smartlockId int32) ApiPostSmartlockAuthWithSharedKeyRequest {
	return ApiPostSmartlockAuthWithSharedKeyRequest{
		ApiService: a,
		ctx: ctx,
		smartlockId: smartlockId,
	}
}

// Execute executes the request
//  @return []SmartlockAuth
func (a *SmartlockAuthAPIService) PostSmartlockAuthWithSharedKeyExecute(r ApiPostSmartlockAuthWithSharedKeyRequest) ([]SmartlockAuth, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SmartlockAuth
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartlockAuthAPIService.PostSmartlockAuthWithSharedKey")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartlock/{smartlockId}/auth/advanced/sharedkey"
	localVarPath = strings.Replace(localVarPath, "{"+"smartlockId"+"}", url.PathEscape(parameterValueToString(r.smartlockId, "smartlockId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSmartlocksAuthsRequest struct {
	ctx context.Context
	ApiService *SmartlockAuthAPIService
	body *[]SmartlockAuthMultiUpdate
}

// Smartlock authorization update representations
func (r ApiPostSmartlocksAuthsRequest) Body(body []SmartlockAuthMultiUpdate) ApiPostSmartlocksAuthsRequest {
	r.body = &body
	return r
}

func (r ApiPostSmartlocksAuthsRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostSmartlocksAuthsExecute(r)
}

/*
PostSmartlocksAuths Updates smartlock authorizations asynchronously

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSmartlocksAuthsRequest
*/
func (a *SmartlockAuthAPIService) PostSmartlocksAuths(ctx context.Context) ApiPostSmartlocksAuthsRequest {
	return ApiPostSmartlocksAuthsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SmartlockAuthAPIService) PostSmartlocksAuthsExecute(r ApiPostSmartlocksAuthsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartlockAuthAPIService.PostSmartlocksAuths")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartlock/auth"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPutSmartlockAuthsRequest struct {
	ctx context.Context
	ApiService *SmartlockAuthAPIService
	smartlockId int32
	body *SmartlockAuthCreate
}

// Smartlock authorization create representation
func (r ApiPutSmartlockAuthsRequest) Body(body SmartlockAuthCreate) ApiPutSmartlockAuthsRequest {
	r.body = &body
	return r
}

func (r ApiPutSmartlockAuthsRequest) Execute() (*http.Response, error) {
	return r.ApiService.PutSmartlockAuthsExecute(r)
}

/*
PutSmartlockAuths Creates asynchronous a smartlock authorization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param smartlockId The smartlock id
 @return ApiPutSmartlockAuthsRequest
*/
func (a *SmartlockAuthAPIService) PutSmartlockAuths(ctx context.Context, smartlockId int32) ApiPutSmartlockAuthsRequest {
	return ApiPutSmartlockAuthsRequest{
		ApiService: a,
		ctx: ctx,
		smartlockId: smartlockId,
	}
}

// Execute executes the request
func (a *SmartlockAuthAPIService) PutSmartlockAuthsExecute(r ApiPutSmartlockAuthsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartlockAuthAPIService.PutSmartlockAuths")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartlock/{smartlockId}/auth"
	localVarPath = strings.Replace(localVarPath, "{"+"smartlockId"+"}", url.PathEscape(parameterValueToString(r.smartlockId, "smartlockId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPutSmartlocksAuthsRequest struct {
	ctx context.Context
	ApiService *SmartlockAuthAPIService
	body *SmartlocksAuthCreate
}

// Smartlock authorization create representation
func (r ApiPutSmartlocksAuthsRequest) Body(body SmartlocksAuthCreate) ApiPutSmartlocksAuthsRequest {
	r.body = &body
	return r
}

func (r ApiPutSmartlocksAuthsRequest) Execute() (*http.Response, error) {
	return r.ApiService.PutSmartlocksAuthsExecute(r)
}

/*
PutSmartlocksAuths Creates asynchronous smartlock authorizations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPutSmartlocksAuthsRequest
*/
func (a *SmartlockAuthAPIService) PutSmartlocksAuths(ctx context.Context) ApiPutSmartlocksAuthsRequest {
	return ApiPutSmartlocksAuthsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SmartlockAuthAPIService) PutSmartlocksAuthsExecute(r ApiPutSmartlocksAuthsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SmartlockAuthAPIService.PutSmartlocksAuths")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/smartlock/auth"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
