/*
Nuki API

The Nuki Web Api

API version: 3.8.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Disposition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Disposition{}

// Disposition struct for Disposition
type Disposition struct {
	Parameters []Parameter `json:"parameters,omitempty"`
	Type *string `json:"type,omitempty"`
	Filename *string `json:"filename,omitempty"`
}

// NewDisposition instantiates a new Disposition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisposition() *Disposition {
	this := Disposition{}
	return &this
}

// NewDispositionWithDefaults instantiates a new Disposition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDispositionWithDefaults() *Disposition {
	this := Disposition{}
	return &this
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *Disposition) GetParameters() []Parameter {
	if o == nil || IsNil(o.Parameters) {
		var ret []Parameter
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Disposition) GetParametersOk() ([]Parameter, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *Disposition) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []Parameter and assigns it to the Parameters field.
func (o *Disposition) SetParameters(v []Parameter) {
	o.Parameters = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Disposition) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Disposition) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Disposition) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Disposition) SetType(v string) {
	o.Type = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *Disposition) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Disposition) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *Disposition) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *Disposition) SetFilename(v string) {
	o.Filename = &v
}

func (o Disposition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Disposition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	return toSerialize, nil
}

type NullableDisposition struct {
	value *Disposition
	isSet bool
}

func (v NullableDisposition) Get() *Disposition {
	return v.value
}

func (v *NullableDisposition) Set(val *Disposition) {
	v.value = val
	v.isSet = true
}

func (v NullableDisposition) IsSet() bool {
	return v.isSet
}

func (v *NullableDisposition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisposition(val *Disposition) *NullableDisposition {
	return &NullableDisposition{value: val, isSet: true}
}

func (v NullableDisposition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisposition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


