/*
Nuki API

The Nuki Web Api

API version: 3.9.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the SelectableChannel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectableChannel{}

// SelectableChannel struct for SelectableChannel
type SelectableChannel struct {
	Open *bool `json:"open,omitempty"`
	Blocking *bool `json:"blocking,omitempty"`
	Registered *bool `json:"registered,omitempty"`
}

// NewSelectableChannel instantiates a new SelectableChannel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectableChannel() *SelectableChannel {
	this := SelectableChannel{}
	return &this
}

// NewSelectableChannelWithDefaults instantiates a new SelectableChannel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectableChannelWithDefaults() *SelectableChannel {
	this := SelectableChannel{}
	return &this
}

// GetOpen returns the Open field value if set, zero value otherwise.
func (o *SelectableChannel) GetOpen() bool {
	if o == nil || IsNil(o.Open) {
		var ret bool
		return ret
	}
	return *o.Open
}

// GetOpenOk returns a tuple with the Open field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectableChannel) GetOpenOk() (*bool, bool) {
	if o == nil || IsNil(o.Open) {
		return nil, false
	}
	return o.Open, true
}

// HasOpen returns a boolean if a field has been set.
func (o *SelectableChannel) HasOpen() bool {
	if o != nil && !IsNil(o.Open) {
		return true
	}

	return false
}

// SetOpen gets a reference to the given bool and assigns it to the Open field.
func (o *SelectableChannel) SetOpen(v bool) {
	o.Open = &v
}

// GetBlocking returns the Blocking field value if set, zero value otherwise.
func (o *SelectableChannel) GetBlocking() bool {
	if o == nil || IsNil(o.Blocking) {
		var ret bool
		return ret
	}
	return *o.Blocking
}

// GetBlockingOk returns a tuple with the Blocking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectableChannel) GetBlockingOk() (*bool, bool) {
	if o == nil || IsNil(o.Blocking) {
		return nil, false
	}
	return o.Blocking, true
}

// HasBlocking returns a boolean if a field has been set.
func (o *SelectableChannel) HasBlocking() bool {
	if o != nil && !IsNil(o.Blocking) {
		return true
	}

	return false
}

// SetBlocking gets a reference to the given bool and assigns it to the Blocking field.
func (o *SelectableChannel) SetBlocking(v bool) {
	o.Blocking = &v
}

// GetRegistered returns the Registered field value if set, zero value otherwise.
func (o *SelectableChannel) GetRegistered() bool {
	if o == nil || IsNil(o.Registered) {
		var ret bool
		return ret
	}
	return *o.Registered
}

// GetRegisteredOk returns a tuple with the Registered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectableChannel) GetRegisteredOk() (*bool, bool) {
	if o == nil || IsNil(o.Registered) {
		return nil, false
	}
	return o.Registered, true
}

// HasRegistered returns a boolean if a field has been set.
func (o *SelectableChannel) HasRegistered() bool {
	if o != nil && !IsNil(o.Registered) {
		return true
	}

	return false
}

// SetRegistered gets a reference to the given bool and assigns it to the Registered field.
func (o *SelectableChannel) SetRegistered(v bool) {
	o.Registered = &v
}

func (o SelectableChannel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectableChannel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Open) {
		toSerialize["open"] = o.Open
	}
	if !IsNil(o.Blocking) {
		toSerialize["blocking"] = o.Blocking
	}
	if !IsNil(o.Registered) {
		toSerialize["registered"] = o.Registered
	}
	return toSerialize, nil
}

type NullableSelectableChannel struct {
	value *SelectableChannel
	isSet bool
}

func (v NullableSelectableChannel) Get() *SelectableChannel {
	return v.value
}

func (v *NullableSelectableChannel) Set(val *SelectableChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectableChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectableChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectableChannel(val *SelectableChannel) *NullableSelectableChannel {
	return &NullableSelectableChannel{value: val, isSet: true}
}

func (v NullableSelectableChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectableChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


