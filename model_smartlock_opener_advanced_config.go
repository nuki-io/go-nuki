/*
Nuki API

The Nuki Web Api

API version: 3.10.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SmartlockOpenerAdvancedConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartlockOpenerAdvancedConfig{}

// SmartlockOpenerAdvancedConfig struct for SmartlockOpenerAdvancedConfig
type SmartlockOpenerAdvancedConfig struct {
	// The database ID of the connected intercom
	IntercomId int32 `json:"intercomId"`
	// Method to switch between data and analogue mode
	BusModeSwitch int32 `json:"busModeSwitch"`
	// Duration of the short circuit for BUS mode switching in ms
	ShortCircuitDuration int32 `json:"shortCircuitDuration"`
	// Delay of electric strike activation in ms after lock action 3 'electric strike actuation'
	ElectricStrikeDelay int32 `json:"electricStrikeDelay"`
	// Random electricStrikeDelay (range 3000 - 7000 ms) in order to simulate a person inside actuating the electric strike
	RandomElectricStrikeDelay bool `json:"randomElectricStrikeDelay"`
	// Duration in ms of electric strike actuation lock action 3 'electric strike actuation'
	ElectricStrikeDuration int32 `json:"electricStrikeDuration"`
	// Flag to disable RTO after ring
	DisableRtoAfterRing bool `json:"disableRtoAfterRing"`
	// After this period of time in minutes, RTO gets deactivated automatically
	RtoTimeout int32 `json:"rtoTimeout"`
	// The doorbell supression bitmask: first bit (least significant) .. whenever the doorbell rings and CM and RTO are inactive, second bit .. RTO is active, third bit .. CM is active
	DoorbellSuppression int32 `json:"doorbellSuppression"`
	// Duration in ms of doorbell suppression (only in Operating mode 2 'digital Intercom')
	DoorbellSuppressionDuration int32 `json:"doorbellSuppressionDuration"`
	// The sound for ring: 0 .. no sound, 1 .. Sound1, 2 .. Sound2, 3 .. Sound3
	SoundRing int32 `json:"soundRing"`
	// The sound for open: 0 .. no sound, 1 .. Sound1, 2 .. Sound2, 3 .. Sound3
	SoundOpen int32 `json:"soundOpen"`
	// The sound for RTO: 0 .. no sound, 1 .. Sound1, 2 .. Sound2, 3 .. Sound3
	SoundRto int32 `json:"soundRto"`
	// The sound for CM: 0 .. no sound, 1 .. Sound1, 2 .. Sound2, 3 .. Sound3
	SoundCm int32 `json:"soundCm"`
	// The sound confirmation: 0 .. no sound, 1 .. sound
	SoundConfirmation int32 `json:"soundConfirmation"`
	// The sound level
	SoundLevel int32 `json:"soundLevel"`
	// The desired action, if the button is pressed once: 0 .. no action, 1 .. toggle RTO, 2 .. activate RTO, 3 .. deactivate RTO, 4 .. toggle CM, 5 .. activate CM, 6 .. deactivate CM, 7 .. open
	SingleButtonPressAction int32 `json:"singleButtonPressAction"`
	// The desired action, if the button is pressed twice: 0 .. no action, 1 .. toggle RTO, 2 .. activate RTO, 3 .. deactivate RTO, 4 .. toggle CM, 5 .. activate CM, 6 .. deactivate CM, 7 .. open
	DoubleButtonPressAction int32 `json:"doubleButtonPressAction"`
	// The type of the batteries present in the smart lock: 0 .. alkali, 1 .. accumulator, 2 .. lithium, 3 .. fixed
	BatteryType int32 `json:"batteryType"`
	// Flag that indicates if the automatic detection of the battery type is enabled
	AutomaticBatteryTypeDetection *bool `json:"automaticBatteryTypeDetection,omitempty"`
	// Flag that indicates if available firmware updates for the deviceshould be installed automatically
	AutoUpdateEnabled *bool `json:"autoUpdateEnabled,omitempty"`
	// The operation id - if set it's locked for another operation
	OperationId *string `json:"operationId,omitempty"`
}

type _SmartlockOpenerAdvancedConfig SmartlockOpenerAdvancedConfig

// NewSmartlockOpenerAdvancedConfig instantiates a new SmartlockOpenerAdvancedConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartlockOpenerAdvancedConfig(intercomId int32, busModeSwitch int32, shortCircuitDuration int32, electricStrikeDelay int32, randomElectricStrikeDelay bool, electricStrikeDuration int32, disableRtoAfterRing bool, rtoTimeout int32, doorbellSuppression int32, doorbellSuppressionDuration int32, soundRing int32, soundOpen int32, soundRto int32, soundCm int32, soundConfirmation int32, soundLevel int32, singleButtonPressAction int32, doubleButtonPressAction int32, batteryType int32) *SmartlockOpenerAdvancedConfig {
	this := SmartlockOpenerAdvancedConfig{}
	this.IntercomId = intercomId
	this.BusModeSwitch = busModeSwitch
	this.ShortCircuitDuration = shortCircuitDuration
	this.ElectricStrikeDelay = electricStrikeDelay
	this.RandomElectricStrikeDelay = randomElectricStrikeDelay
	this.ElectricStrikeDuration = electricStrikeDuration
	this.DisableRtoAfterRing = disableRtoAfterRing
	this.RtoTimeout = rtoTimeout
	this.DoorbellSuppression = doorbellSuppression
	this.DoorbellSuppressionDuration = doorbellSuppressionDuration
	this.SoundRing = soundRing
	this.SoundOpen = soundOpen
	this.SoundRto = soundRto
	this.SoundCm = soundCm
	this.SoundConfirmation = soundConfirmation
	this.SoundLevel = soundLevel
	this.SingleButtonPressAction = singleButtonPressAction
	this.DoubleButtonPressAction = doubleButtonPressAction
	this.BatteryType = batteryType
	return &this
}

// NewSmartlockOpenerAdvancedConfigWithDefaults instantiates a new SmartlockOpenerAdvancedConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartlockOpenerAdvancedConfigWithDefaults() *SmartlockOpenerAdvancedConfig {
	this := SmartlockOpenerAdvancedConfig{}
	return &this
}

// GetIntercomId returns the IntercomId field value
func (o *SmartlockOpenerAdvancedConfig) GetIntercomId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IntercomId
}

// GetIntercomIdOk returns a tuple with the IntercomId field value
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetIntercomIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntercomId, true
}

// SetIntercomId sets field value
func (o *SmartlockOpenerAdvancedConfig) SetIntercomId(v int32) {
	o.IntercomId = v
}

// GetBusModeSwitch returns the BusModeSwitch field value
func (o *SmartlockOpenerAdvancedConfig) GetBusModeSwitch() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BusModeSwitch
}

// GetBusModeSwitchOk returns a tuple with the BusModeSwitch field value
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetBusModeSwitchOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BusModeSwitch, true
}

// SetBusModeSwitch sets field value
func (o *SmartlockOpenerAdvancedConfig) SetBusModeSwitch(v int32) {
	o.BusModeSwitch = v
}

// GetShortCircuitDuration returns the ShortCircuitDuration field value
func (o *SmartlockOpenerAdvancedConfig) GetShortCircuitDuration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ShortCircuitDuration
}

// GetShortCircuitDurationOk returns a tuple with the ShortCircuitDuration field value
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetShortCircuitDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShortCircuitDuration, true
}

// SetShortCircuitDuration sets field value
func (o *SmartlockOpenerAdvancedConfig) SetShortCircuitDuration(v int32) {
	o.ShortCircuitDuration = v
}

// GetElectricStrikeDelay returns the ElectricStrikeDelay field value
func (o *SmartlockOpenerAdvancedConfig) GetElectricStrikeDelay() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ElectricStrikeDelay
}

// GetElectricStrikeDelayOk returns a tuple with the ElectricStrikeDelay field value
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetElectricStrikeDelayOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElectricStrikeDelay, true
}

// SetElectricStrikeDelay sets field value
func (o *SmartlockOpenerAdvancedConfig) SetElectricStrikeDelay(v int32) {
	o.ElectricStrikeDelay = v
}

// GetRandomElectricStrikeDelay returns the RandomElectricStrikeDelay field value
func (o *SmartlockOpenerAdvancedConfig) GetRandomElectricStrikeDelay() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RandomElectricStrikeDelay
}

// GetRandomElectricStrikeDelayOk returns a tuple with the RandomElectricStrikeDelay field value
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetRandomElectricStrikeDelayOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RandomElectricStrikeDelay, true
}

// SetRandomElectricStrikeDelay sets field value
func (o *SmartlockOpenerAdvancedConfig) SetRandomElectricStrikeDelay(v bool) {
	o.RandomElectricStrikeDelay = v
}

// GetElectricStrikeDuration returns the ElectricStrikeDuration field value
func (o *SmartlockOpenerAdvancedConfig) GetElectricStrikeDuration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ElectricStrikeDuration
}

// GetElectricStrikeDurationOk returns a tuple with the ElectricStrikeDuration field value
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetElectricStrikeDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElectricStrikeDuration, true
}

// SetElectricStrikeDuration sets field value
func (o *SmartlockOpenerAdvancedConfig) SetElectricStrikeDuration(v int32) {
	o.ElectricStrikeDuration = v
}

// GetDisableRtoAfterRing returns the DisableRtoAfterRing field value
func (o *SmartlockOpenerAdvancedConfig) GetDisableRtoAfterRing() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DisableRtoAfterRing
}

// GetDisableRtoAfterRingOk returns a tuple with the DisableRtoAfterRing field value
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetDisableRtoAfterRingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisableRtoAfterRing, true
}

// SetDisableRtoAfterRing sets field value
func (o *SmartlockOpenerAdvancedConfig) SetDisableRtoAfterRing(v bool) {
	o.DisableRtoAfterRing = v
}

// GetRtoTimeout returns the RtoTimeout field value
func (o *SmartlockOpenerAdvancedConfig) GetRtoTimeout() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RtoTimeout
}

// GetRtoTimeoutOk returns a tuple with the RtoTimeout field value
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetRtoTimeoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RtoTimeout, true
}

// SetRtoTimeout sets field value
func (o *SmartlockOpenerAdvancedConfig) SetRtoTimeout(v int32) {
	o.RtoTimeout = v
}

// GetDoorbellSuppression returns the DoorbellSuppression field value
func (o *SmartlockOpenerAdvancedConfig) GetDoorbellSuppression() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DoorbellSuppression
}

// GetDoorbellSuppressionOk returns a tuple with the DoorbellSuppression field value
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetDoorbellSuppressionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DoorbellSuppression, true
}

// SetDoorbellSuppression sets field value
func (o *SmartlockOpenerAdvancedConfig) SetDoorbellSuppression(v int32) {
	o.DoorbellSuppression = v
}

// GetDoorbellSuppressionDuration returns the DoorbellSuppressionDuration field value
func (o *SmartlockOpenerAdvancedConfig) GetDoorbellSuppressionDuration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DoorbellSuppressionDuration
}

// GetDoorbellSuppressionDurationOk returns a tuple with the DoorbellSuppressionDuration field value
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetDoorbellSuppressionDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DoorbellSuppressionDuration, true
}

// SetDoorbellSuppressionDuration sets field value
func (o *SmartlockOpenerAdvancedConfig) SetDoorbellSuppressionDuration(v int32) {
	o.DoorbellSuppressionDuration = v
}

// GetSoundRing returns the SoundRing field value
func (o *SmartlockOpenerAdvancedConfig) GetSoundRing() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SoundRing
}

// GetSoundRingOk returns a tuple with the SoundRing field value
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetSoundRingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoundRing, true
}

// SetSoundRing sets field value
func (o *SmartlockOpenerAdvancedConfig) SetSoundRing(v int32) {
	o.SoundRing = v
}

// GetSoundOpen returns the SoundOpen field value
func (o *SmartlockOpenerAdvancedConfig) GetSoundOpen() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SoundOpen
}

// GetSoundOpenOk returns a tuple with the SoundOpen field value
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetSoundOpenOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoundOpen, true
}

// SetSoundOpen sets field value
func (o *SmartlockOpenerAdvancedConfig) SetSoundOpen(v int32) {
	o.SoundOpen = v
}

// GetSoundRto returns the SoundRto field value
func (o *SmartlockOpenerAdvancedConfig) GetSoundRto() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SoundRto
}

// GetSoundRtoOk returns a tuple with the SoundRto field value
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetSoundRtoOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoundRto, true
}

// SetSoundRto sets field value
func (o *SmartlockOpenerAdvancedConfig) SetSoundRto(v int32) {
	o.SoundRto = v
}

// GetSoundCm returns the SoundCm field value
func (o *SmartlockOpenerAdvancedConfig) GetSoundCm() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SoundCm
}

// GetSoundCmOk returns a tuple with the SoundCm field value
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetSoundCmOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoundCm, true
}

// SetSoundCm sets field value
func (o *SmartlockOpenerAdvancedConfig) SetSoundCm(v int32) {
	o.SoundCm = v
}

// GetSoundConfirmation returns the SoundConfirmation field value
func (o *SmartlockOpenerAdvancedConfig) GetSoundConfirmation() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SoundConfirmation
}

// GetSoundConfirmationOk returns a tuple with the SoundConfirmation field value
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetSoundConfirmationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoundConfirmation, true
}

// SetSoundConfirmation sets field value
func (o *SmartlockOpenerAdvancedConfig) SetSoundConfirmation(v int32) {
	o.SoundConfirmation = v
}

// GetSoundLevel returns the SoundLevel field value
func (o *SmartlockOpenerAdvancedConfig) GetSoundLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SoundLevel
}

// GetSoundLevelOk returns a tuple with the SoundLevel field value
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetSoundLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoundLevel, true
}

// SetSoundLevel sets field value
func (o *SmartlockOpenerAdvancedConfig) SetSoundLevel(v int32) {
	o.SoundLevel = v
}

// GetSingleButtonPressAction returns the SingleButtonPressAction field value
func (o *SmartlockOpenerAdvancedConfig) GetSingleButtonPressAction() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SingleButtonPressAction
}

// GetSingleButtonPressActionOk returns a tuple with the SingleButtonPressAction field value
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetSingleButtonPressActionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SingleButtonPressAction, true
}

// SetSingleButtonPressAction sets field value
func (o *SmartlockOpenerAdvancedConfig) SetSingleButtonPressAction(v int32) {
	o.SingleButtonPressAction = v
}

// GetDoubleButtonPressAction returns the DoubleButtonPressAction field value
func (o *SmartlockOpenerAdvancedConfig) GetDoubleButtonPressAction() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DoubleButtonPressAction
}

// GetDoubleButtonPressActionOk returns a tuple with the DoubleButtonPressAction field value
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetDoubleButtonPressActionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DoubleButtonPressAction, true
}

// SetDoubleButtonPressAction sets field value
func (o *SmartlockOpenerAdvancedConfig) SetDoubleButtonPressAction(v int32) {
	o.DoubleButtonPressAction = v
}

// GetBatteryType returns the BatteryType field value
func (o *SmartlockOpenerAdvancedConfig) GetBatteryType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BatteryType
}

// GetBatteryTypeOk returns a tuple with the BatteryType field value
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetBatteryTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BatteryType, true
}

// SetBatteryType sets field value
func (o *SmartlockOpenerAdvancedConfig) SetBatteryType(v int32) {
	o.BatteryType = v
}

// GetAutomaticBatteryTypeDetection returns the AutomaticBatteryTypeDetection field value if set, zero value otherwise.
func (o *SmartlockOpenerAdvancedConfig) GetAutomaticBatteryTypeDetection() bool {
	if o == nil || IsNil(o.AutomaticBatteryTypeDetection) {
		var ret bool
		return ret
	}
	return *o.AutomaticBatteryTypeDetection
}

// GetAutomaticBatteryTypeDetectionOk returns a tuple with the AutomaticBatteryTypeDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetAutomaticBatteryTypeDetectionOk() (*bool, bool) {
	if o == nil || IsNil(o.AutomaticBatteryTypeDetection) {
		return nil, false
	}
	return o.AutomaticBatteryTypeDetection, true
}

// HasAutomaticBatteryTypeDetection returns a boolean if a field has been set.
func (o *SmartlockOpenerAdvancedConfig) HasAutomaticBatteryTypeDetection() bool {
	if o != nil && !IsNil(o.AutomaticBatteryTypeDetection) {
		return true
	}

	return false
}

// SetAutomaticBatteryTypeDetection gets a reference to the given bool and assigns it to the AutomaticBatteryTypeDetection field.
func (o *SmartlockOpenerAdvancedConfig) SetAutomaticBatteryTypeDetection(v bool) {
	o.AutomaticBatteryTypeDetection = &v
}

// GetAutoUpdateEnabled returns the AutoUpdateEnabled field value if set, zero value otherwise.
func (o *SmartlockOpenerAdvancedConfig) GetAutoUpdateEnabled() bool {
	if o == nil || IsNil(o.AutoUpdateEnabled) {
		var ret bool
		return ret
	}
	return *o.AutoUpdateEnabled
}

// GetAutoUpdateEnabledOk returns a tuple with the AutoUpdateEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetAutoUpdateEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoUpdateEnabled) {
		return nil, false
	}
	return o.AutoUpdateEnabled, true
}

// HasAutoUpdateEnabled returns a boolean if a field has been set.
func (o *SmartlockOpenerAdvancedConfig) HasAutoUpdateEnabled() bool {
	if o != nil && !IsNil(o.AutoUpdateEnabled) {
		return true
	}

	return false
}

// SetAutoUpdateEnabled gets a reference to the given bool and assigns it to the AutoUpdateEnabled field.
func (o *SmartlockOpenerAdvancedConfig) SetAutoUpdateEnabled(v bool) {
	o.AutoUpdateEnabled = &v
}

// GetOperationId returns the OperationId field value if set, zero value otherwise.
func (o *SmartlockOpenerAdvancedConfig) GetOperationId() string {
	if o == nil || IsNil(o.OperationId) {
		var ret string
		return ret
	}
	return *o.OperationId
}

// GetOperationIdOk returns a tuple with the OperationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockOpenerAdvancedConfig) GetOperationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OperationId) {
		return nil, false
	}
	return o.OperationId, true
}

// HasOperationId returns a boolean if a field has been set.
func (o *SmartlockOpenerAdvancedConfig) HasOperationId() bool {
	if o != nil && !IsNil(o.OperationId) {
		return true
	}

	return false
}

// SetOperationId gets a reference to the given string and assigns it to the OperationId field.
func (o *SmartlockOpenerAdvancedConfig) SetOperationId(v string) {
	o.OperationId = &v
}

func (o SmartlockOpenerAdvancedConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartlockOpenerAdvancedConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["intercomId"] = o.IntercomId
	toSerialize["busModeSwitch"] = o.BusModeSwitch
	toSerialize["shortCircuitDuration"] = o.ShortCircuitDuration
	toSerialize["electricStrikeDelay"] = o.ElectricStrikeDelay
	toSerialize["randomElectricStrikeDelay"] = o.RandomElectricStrikeDelay
	toSerialize["electricStrikeDuration"] = o.ElectricStrikeDuration
	toSerialize["disableRtoAfterRing"] = o.DisableRtoAfterRing
	toSerialize["rtoTimeout"] = o.RtoTimeout
	toSerialize["doorbellSuppression"] = o.DoorbellSuppression
	toSerialize["doorbellSuppressionDuration"] = o.DoorbellSuppressionDuration
	toSerialize["soundRing"] = o.SoundRing
	toSerialize["soundOpen"] = o.SoundOpen
	toSerialize["soundRto"] = o.SoundRto
	toSerialize["soundCm"] = o.SoundCm
	toSerialize["soundConfirmation"] = o.SoundConfirmation
	toSerialize["soundLevel"] = o.SoundLevel
	toSerialize["singleButtonPressAction"] = o.SingleButtonPressAction
	toSerialize["doubleButtonPressAction"] = o.DoubleButtonPressAction
	toSerialize["batteryType"] = o.BatteryType
	if !IsNil(o.AutomaticBatteryTypeDetection) {
		toSerialize["automaticBatteryTypeDetection"] = o.AutomaticBatteryTypeDetection
	}
	if !IsNil(o.AutoUpdateEnabled) {
		toSerialize["autoUpdateEnabled"] = o.AutoUpdateEnabled
	}
	if !IsNil(o.OperationId) {
		toSerialize["operationId"] = o.OperationId
	}
	return toSerialize, nil
}

func (o *SmartlockOpenerAdvancedConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"intercomId",
		"busModeSwitch",
		"shortCircuitDuration",
		"electricStrikeDelay",
		"randomElectricStrikeDelay",
		"electricStrikeDuration",
		"disableRtoAfterRing",
		"rtoTimeout",
		"doorbellSuppression",
		"doorbellSuppressionDuration",
		"soundRing",
		"soundOpen",
		"soundRto",
		"soundCm",
		"soundConfirmation",
		"soundLevel",
		"singleButtonPressAction",
		"doubleButtonPressAction",
		"batteryType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmartlockOpenerAdvancedConfig := _SmartlockOpenerAdvancedConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSmartlockOpenerAdvancedConfig)

	if err != nil {
		return err
	}

	*o = SmartlockOpenerAdvancedConfig(varSmartlockOpenerAdvancedConfig)

	return err
}

type NullableSmartlockOpenerAdvancedConfig struct {
	value *SmartlockOpenerAdvancedConfig
	isSet bool
}

func (v NullableSmartlockOpenerAdvancedConfig) Get() *SmartlockOpenerAdvancedConfig {
	return v.value
}

func (v *NullableSmartlockOpenerAdvancedConfig) Set(val *SmartlockOpenerAdvancedConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartlockOpenerAdvancedConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartlockOpenerAdvancedConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartlockOpenerAdvancedConfig(val *SmartlockOpenerAdvancedConfig) *NullableSmartlockOpenerAdvancedConfig {
	return &NullableSmartlockOpenerAdvancedConfig{value: val, isSet: true}
}

func (v NullableSmartlockOpenerAdvancedConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartlockOpenerAdvancedConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


