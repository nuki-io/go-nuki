/*
Nuki API

The Nuki Web Api

API version: 3.13.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ChallengeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChallengeRequest{}

// ChallengeRequest struct for ChallengeRequest
type ChallengeRequest struct {
	RawValue *string `json:"rawValue,omitempty"`
	Parameters []Parameter `json:"parameters,omitempty"`
	Scheme *ChallengeScheme `json:"scheme,omitempty"`
	ServerNonce *string `json:"serverNonce,omitempty"`
	Realm *string `json:"realm,omitempty"`
	Opaque *string `json:"opaque,omitempty"`
	DigestAlgorithm *string `json:"digestAlgorithm,omitempty"`
	QualityOptions []string `json:"qualityOptions,omitempty"`
	DomainRefs []Reference `json:"domainRefs,omitempty"`
	Stale *bool `json:"stale,omitempty"`
}

// NewChallengeRequest instantiates a new ChallengeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChallengeRequest() *ChallengeRequest {
	this := ChallengeRequest{}
	return &this
}

// NewChallengeRequestWithDefaults instantiates a new ChallengeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChallengeRequestWithDefaults() *ChallengeRequest {
	this := ChallengeRequest{}
	return &this
}

// GetRawValue returns the RawValue field value if set, zero value otherwise.
func (o *ChallengeRequest) GetRawValue() string {
	if o == nil || IsNil(o.RawValue) {
		var ret string
		return ret
	}
	return *o.RawValue
}

// GetRawValueOk returns a tuple with the RawValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChallengeRequest) GetRawValueOk() (*string, bool) {
	if o == nil || IsNil(o.RawValue) {
		return nil, false
	}
	return o.RawValue, true
}

// HasRawValue returns a boolean if a field has been set.
func (o *ChallengeRequest) HasRawValue() bool {
	if o != nil && !IsNil(o.RawValue) {
		return true
	}

	return false
}

// SetRawValue gets a reference to the given string and assigns it to the RawValue field.
func (o *ChallengeRequest) SetRawValue(v string) {
	o.RawValue = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *ChallengeRequest) GetParameters() []Parameter {
	if o == nil || IsNil(o.Parameters) {
		var ret []Parameter
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChallengeRequest) GetParametersOk() ([]Parameter, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *ChallengeRequest) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []Parameter and assigns it to the Parameters field.
func (o *ChallengeRequest) SetParameters(v []Parameter) {
	o.Parameters = v
}

// GetScheme returns the Scheme field value if set, zero value otherwise.
func (o *ChallengeRequest) GetScheme() ChallengeScheme {
	if o == nil || IsNil(o.Scheme) {
		var ret ChallengeScheme
		return ret
	}
	return *o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChallengeRequest) GetSchemeOk() (*ChallengeScheme, bool) {
	if o == nil || IsNil(o.Scheme) {
		return nil, false
	}
	return o.Scheme, true
}

// HasScheme returns a boolean if a field has been set.
func (o *ChallengeRequest) HasScheme() bool {
	if o != nil && !IsNil(o.Scheme) {
		return true
	}

	return false
}

// SetScheme gets a reference to the given ChallengeScheme and assigns it to the Scheme field.
func (o *ChallengeRequest) SetScheme(v ChallengeScheme) {
	o.Scheme = &v
}

// GetServerNonce returns the ServerNonce field value if set, zero value otherwise.
func (o *ChallengeRequest) GetServerNonce() string {
	if o == nil || IsNil(o.ServerNonce) {
		var ret string
		return ret
	}
	return *o.ServerNonce
}

// GetServerNonceOk returns a tuple with the ServerNonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChallengeRequest) GetServerNonceOk() (*string, bool) {
	if o == nil || IsNil(o.ServerNonce) {
		return nil, false
	}
	return o.ServerNonce, true
}

// HasServerNonce returns a boolean if a field has been set.
func (o *ChallengeRequest) HasServerNonce() bool {
	if o != nil && !IsNil(o.ServerNonce) {
		return true
	}

	return false
}

// SetServerNonce gets a reference to the given string and assigns it to the ServerNonce field.
func (o *ChallengeRequest) SetServerNonce(v string) {
	o.ServerNonce = &v
}

// GetRealm returns the Realm field value if set, zero value otherwise.
func (o *ChallengeRequest) GetRealm() string {
	if o == nil || IsNil(o.Realm) {
		var ret string
		return ret
	}
	return *o.Realm
}

// GetRealmOk returns a tuple with the Realm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChallengeRequest) GetRealmOk() (*string, bool) {
	if o == nil || IsNil(o.Realm) {
		return nil, false
	}
	return o.Realm, true
}

// HasRealm returns a boolean if a field has been set.
func (o *ChallengeRequest) HasRealm() bool {
	if o != nil && !IsNil(o.Realm) {
		return true
	}

	return false
}

// SetRealm gets a reference to the given string and assigns it to the Realm field.
func (o *ChallengeRequest) SetRealm(v string) {
	o.Realm = &v
}

// GetOpaque returns the Opaque field value if set, zero value otherwise.
func (o *ChallengeRequest) GetOpaque() string {
	if o == nil || IsNil(o.Opaque) {
		var ret string
		return ret
	}
	return *o.Opaque
}

// GetOpaqueOk returns a tuple with the Opaque field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChallengeRequest) GetOpaqueOk() (*string, bool) {
	if o == nil || IsNil(o.Opaque) {
		return nil, false
	}
	return o.Opaque, true
}

// HasOpaque returns a boolean if a field has been set.
func (o *ChallengeRequest) HasOpaque() bool {
	if o != nil && !IsNil(o.Opaque) {
		return true
	}

	return false
}

// SetOpaque gets a reference to the given string and assigns it to the Opaque field.
func (o *ChallengeRequest) SetOpaque(v string) {
	o.Opaque = &v
}

// GetDigestAlgorithm returns the DigestAlgorithm field value if set, zero value otherwise.
func (o *ChallengeRequest) GetDigestAlgorithm() string {
	if o == nil || IsNil(o.DigestAlgorithm) {
		var ret string
		return ret
	}
	return *o.DigestAlgorithm
}

// GetDigestAlgorithmOk returns a tuple with the DigestAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChallengeRequest) GetDigestAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.DigestAlgorithm) {
		return nil, false
	}
	return o.DigestAlgorithm, true
}

// HasDigestAlgorithm returns a boolean if a field has been set.
func (o *ChallengeRequest) HasDigestAlgorithm() bool {
	if o != nil && !IsNil(o.DigestAlgorithm) {
		return true
	}

	return false
}

// SetDigestAlgorithm gets a reference to the given string and assigns it to the DigestAlgorithm field.
func (o *ChallengeRequest) SetDigestAlgorithm(v string) {
	o.DigestAlgorithm = &v
}

// GetQualityOptions returns the QualityOptions field value if set, zero value otherwise.
func (o *ChallengeRequest) GetQualityOptions() []string {
	if o == nil || IsNil(o.QualityOptions) {
		var ret []string
		return ret
	}
	return o.QualityOptions
}

// GetQualityOptionsOk returns a tuple with the QualityOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChallengeRequest) GetQualityOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.QualityOptions) {
		return nil, false
	}
	return o.QualityOptions, true
}

// HasQualityOptions returns a boolean if a field has been set.
func (o *ChallengeRequest) HasQualityOptions() bool {
	if o != nil && !IsNil(o.QualityOptions) {
		return true
	}

	return false
}

// SetQualityOptions gets a reference to the given []string and assigns it to the QualityOptions field.
func (o *ChallengeRequest) SetQualityOptions(v []string) {
	o.QualityOptions = v
}

// GetDomainRefs returns the DomainRefs field value if set, zero value otherwise.
func (o *ChallengeRequest) GetDomainRefs() []Reference {
	if o == nil || IsNil(o.DomainRefs) {
		var ret []Reference
		return ret
	}
	return o.DomainRefs
}

// GetDomainRefsOk returns a tuple with the DomainRefs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChallengeRequest) GetDomainRefsOk() ([]Reference, bool) {
	if o == nil || IsNil(o.DomainRefs) {
		return nil, false
	}
	return o.DomainRefs, true
}

// HasDomainRefs returns a boolean if a field has been set.
func (o *ChallengeRequest) HasDomainRefs() bool {
	if o != nil && !IsNil(o.DomainRefs) {
		return true
	}

	return false
}

// SetDomainRefs gets a reference to the given []Reference and assigns it to the DomainRefs field.
func (o *ChallengeRequest) SetDomainRefs(v []Reference) {
	o.DomainRefs = v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *ChallengeRequest) GetStale() bool {
	if o == nil || IsNil(o.Stale) {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChallengeRequest) GetStaleOk() (*bool, bool) {
	if o == nil || IsNil(o.Stale) {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *ChallengeRequest) HasStale() bool {
	if o != nil && !IsNil(o.Stale) {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *ChallengeRequest) SetStale(v bool) {
	o.Stale = &v
}

func (o ChallengeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChallengeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RawValue) {
		toSerialize["rawValue"] = o.RawValue
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.Scheme) {
		toSerialize["scheme"] = o.Scheme
	}
	if !IsNil(o.ServerNonce) {
		toSerialize["serverNonce"] = o.ServerNonce
	}
	if !IsNil(o.Realm) {
		toSerialize["realm"] = o.Realm
	}
	if !IsNil(o.Opaque) {
		toSerialize["opaque"] = o.Opaque
	}
	if !IsNil(o.DigestAlgorithm) {
		toSerialize["digestAlgorithm"] = o.DigestAlgorithm
	}
	if !IsNil(o.QualityOptions) {
		toSerialize["qualityOptions"] = o.QualityOptions
	}
	if !IsNil(o.DomainRefs) {
		toSerialize["domainRefs"] = o.DomainRefs
	}
	if !IsNil(o.Stale) {
		toSerialize["stale"] = o.Stale
	}
	return toSerialize, nil
}

type NullableChallengeRequest struct {
	value *ChallengeRequest
	isSet bool
}

func (v NullableChallengeRequest) Get() *ChallengeRequest {
	return v.value
}

func (v *NullableChallengeRequest) Set(val *ChallengeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableChallengeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableChallengeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChallengeRequest(val *ChallengeRequest) *NullableChallengeRequest {
	return &NullableChallengeRequest{value: val, isSet: true}
}

func (v NullableChallengeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChallengeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


