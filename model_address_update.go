/*
Nuki API

The Nuki Web Api

API version: 3.9.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the AddressUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressUpdate{}

// AddressUpdate struct for AddressUpdate
type AddressUpdate struct {
	// The name of the address
	Name *string `json:"name,omitempty"`
	// The smartlocks for this address
	SmartlockIds []int64 `json:"smartlockIds,omitempty"`
	// The optional settings
	Settings map[string]map[string]interface{} `json:"settings,omitempty"`
}

// NewAddressUpdate instantiates a new AddressUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressUpdate() *AddressUpdate {
	this := AddressUpdate{}
	return &this
}

// NewAddressUpdateWithDefaults instantiates a new AddressUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressUpdateWithDefaults() *AddressUpdate {
	this := AddressUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AddressUpdate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressUpdate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AddressUpdate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AddressUpdate) SetName(v string) {
	o.Name = &v
}

// GetSmartlockIds returns the SmartlockIds field value if set, zero value otherwise.
func (o *AddressUpdate) GetSmartlockIds() []int64 {
	if o == nil || IsNil(o.SmartlockIds) {
		var ret []int64
		return ret
	}
	return o.SmartlockIds
}

// GetSmartlockIdsOk returns a tuple with the SmartlockIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressUpdate) GetSmartlockIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.SmartlockIds) {
		return nil, false
	}
	return o.SmartlockIds, true
}

// HasSmartlockIds returns a boolean if a field has been set.
func (o *AddressUpdate) HasSmartlockIds() bool {
	if o != nil && !IsNil(o.SmartlockIds) {
		return true
	}

	return false
}

// SetSmartlockIds gets a reference to the given []int64 and assigns it to the SmartlockIds field.
func (o *AddressUpdate) SetSmartlockIds(v []int64) {
	o.SmartlockIds = v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *AddressUpdate) GetSettings() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Settings) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressUpdate) GetSettingsOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Settings) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *AddressUpdate) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given map[string]map[string]interface{} and assigns it to the Settings field.
func (o *AddressUpdate) SetSettings(v map[string]map[string]interface{}) {
	o.Settings = v
}

func (o AddressUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SmartlockIds) {
		toSerialize["smartlockIds"] = o.SmartlockIds
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	return toSerialize, nil
}

type NullableAddressUpdate struct {
	value *AddressUpdate
	isSet bool
}

func (v NullableAddressUpdate) Get() *AddressUpdate {
	return v.value
}

func (v *NullableAddressUpdate) Set(val *AddressUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressUpdate(val *AddressUpdate) *NullableAddressUpdate {
	return &NullableAddressUpdate{value: val, isSet: true}
}

func (v NullableAddressUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


