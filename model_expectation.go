/*
Nuki API

The Nuki Web Api

API version: 3.13.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Expectation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Expectation{}

// Expectation struct for Expectation
type Expectation struct {
	Name *string `json:"name,omitempty"`
	Parameters []Parameter `json:"parameters,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewExpectation instantiates a new Expectation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpectation() *Expectation {
	this := Expectation{}
	return &this
}

// NewExpectationWithDefaults instantiates a new Expectation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpectationWithDefaults() *Expectation {
	this := Expectation{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Expectation) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expectation) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Expectation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Expectation) SetName(v string) {
	o.Name = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *Expectation) GetParameters() []Parameter {
	if o == nil || IsNil(o.Parameters) {
		var ret []Parameter
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expectation) GetParametersOk() ([]Parameter, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *Expectation) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []Parameter and assigns it to the Parameters field.
func (o *Expectation) SetParameters(v []Parameter) {
	o.Parameters = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Expectation) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expectation) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Expectation) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Expectation) SetValue(v string) {
	o.Value = &v
}

func (o Expectation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Expectation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableExpectation struct {
	value *Expectation
	isSet bool
}

func (v NullableExpectation) Get() *Expectation {
	return v.value
}

func (v *NullableExpectation) Set(val *Expectation) {
	v.value = val
	v.isSet = true
}

func (v NullableExpectation) IsSet() bool {
	return v.isSet
}

func (v *NullableExpectation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpectation(val *Expectation) *NullableExpectation {
	return &NullableExpectation{value: val, isSet: true}
}

func (v NullableExpectation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpectation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


