/*
Nuki API

The Nuki Web Api

API version: 3.8.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AccountIntegration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountIntegration{}

// AccountIntegration struct for AccountIntegration
type AccountIntegration struct {
	// If the integration/device is an legacy or from the new oauth implementation
	Version string `json:"version"`
	// Enum key identifying the integration/device, values are e.g. ALEXA, IOS, NUKI_WEB, API_TOKEN etc
	VendorKey string `json:"vendorKey"`
	// Name of the sub-account or null if there is none, which is associated with this token
	SubAccountName *string `json:"subAccountName,omitempty"`
	// Id of the sub-account or null if there is none, which is associated with this token
	SubAccountId *int32 `json:"subAccountId,omitempty"`
	// True if the integration is done via a sub-account
	SubAccount *bool `json:"subAccount,omitempty"`
	// Name of the token
	Name string `json:"name"`
	// Description given by the user, usually only set for api tokens
	Description *string `json:"description,omitempty"`
	// First creation date of the token
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Last refresh date of the token
	LastActiveAt *time.Time `json:"lastActiveAt,omitempty"`
	// The scopes which have been granted to the token
	Scopes []string `json:"scopes,omitempty"`
	// If this is from a legacy integration this is set to true
	Warning *bool `json:"warning,omitempty"`
	// The tokenId if this a manual generated api token
	TokenId *string `json:"tokenId,omitempty"`
	// The enum advanced type (HEALTHCARE e.g.) if this integration is a advanced one
	AdvancedType *string `json:"advancedType,omitempty"`
	// The enum advanced state (TESTING e.g.) if this integration is a advanced one
	AdvancedState *string `json:"advancedState,omitempty"`
	// The clientId of this integration/device used for deleting the integration
	ClientId string `json:"clientId"`
	// Sort order by which the entry should be sorted, is being set by the vendor key enum
	SortOrder *int32 `json:"sortOrder,omitempty"`
	// True this is a device and false this is an integration
	Device *bool `json:"device,omitempty"`
}

type _AccountIntegration AccountIntegration

// NewAccountIntegration instantiates a new AccountIntegration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountIntegration(version string, vendorKey string, name string, clientId string) *AccountIntegration {
	this := AccountIntegration{}
	this.Version = version
	this.VendorKey = vendorKey
	this.Name = name
	this.ClientId = clientId
	return &this
}

// NewAccountIntegrationWithDefaults instantiates a new AccountIntegration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountIntegrationWithDefaults() *AccountIntegration {
	this := AccountIntegration{}
	return &this
}

// GetVersion returns the Version field value
func (o *AccountIntegration) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *AccountIntegration) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *AccountIntegration) SetVersion(v string) {
	o.Version = v
}

// GetVendorKey returns the VendorKey field value
func (o *AccountIntegration) GetVendorKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VendorKey
}

// GetVendorKeyOk returns a tuple with the VendorKey field value
// and a boolean to check if the value has been set.
func (o *AccountIntegration) GetVendorKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VendorKey, true
}

// SetVendorKey sets field value
func (o *AccountIntegration) SetVendorKey(v string) {
	o.VendorKey = v
}

// GetSubAccountName returns the SubAccountName field value if set, zero value otherwise.
func (o *AccountIntegration) GetSubAccountName() string {
	if o == nil || IsNil(o.SubAccountName) {
		var ret string
		return ret
	}
	return *o.SubAccountName
}

// GetSubAccountNameOk returns a tuple with the SubAccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountIntegration) GetSubAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.SubAccountName) {
		return nil, false
	}
	return o.SubAccountName, true
}

// HasSubAccountName returns a boolean if a field has been set.
func (o *AccountIntegration) HasSubAccountName() bool {
	if o != nil && !IsNil(o.SubAccountName) {
		return true
	}

	return false
}

// SetSubAccountName gets a reference to the given string and assigns it to the SubAccountName field.
func (o *AccountIntegration) SetSubAccountName(v string) {
	o.SubAccountName = &v
}

// GetSubAccountId returns the SubAccountId field value if set, zero value otherwise.
func (o *AccountIntegration) GetSubAccountId() int32 {
	if o == nil || IsNil(o.SubAccountId) {
		var ret int32
		return ret
	}
	return *o.SubAccountId
}

// GetSubAccountIdOk returns a tuple with the SubAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountIntegration) GetSubAccountIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SubAccountId) {
		return nil, false
	}
	return o.SubAccountId, true
}

// HasSubAccountId returns a boolean if a field has been set.
func (o *AccountIntegration) HasSubAccountId() bool {
	if o != nil && !IsNil(o.SubAccountId) {
		return true
	}

	return false
}

// SetSubAccountId gets a reference to the given int32 and assigns it to the SubAccountId field.
func (o *AccountIntegration) SetSubAccountId(v int32) {
	o.SubAccountId = &v
}

// GetSubAccount returns the SubAccount field value if set, zero value otherwise.
func (o *AccountIntegration) GetSubAccount() bool {
	if o == nil || IsNil(o.SubAccount) {
		var ret bool
		return ret
	}
	return *o.SubAccount
}

// GetSubAccountOk returns a tuple with the SubAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountIntegration) GetSubAccountOk() (*bool, bool) {
	if o == nil || IsNil(o.SubAccount) {
		return nil, false
	}
	return o.SubAccount, true
}

// HasSubAccount returns a boolean if a field has been set.
func (o *AccountIntegration) HasSubAccount() bool {
	if o != nil && !IsNil(o.SubAccount) {
		return true
	}

	return false
}

// SetSubAccount gets a reference to the given bool and assigns it to the SubAccount field.
func (o *AccountIntegration) SetSubAccount(v bool) {
	o.SubAccount = &v
}

// GetName returns the Name field value
func (o *AccountIntegration) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AccountIntegration) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AccountIntegration) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AccountIntegration) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountIntegration) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AccountIntegration) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AccountIntegration) SetDescription(v string) {
	o.Description = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AccountIntegration) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountIntegration) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AccountIntegration) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *AccountIntegration) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetLastActiveAt returns the LastActiveAt field value if set, zero value otherwise.
func (o *AccountIntegration) GetLastActiveAt() time.Time {
	if o == nil || IsNil(o.LastActiveAt) {
		var ret time.Time
		return ret
	}
	return *o.LastActiveAt
}

// GetLastActiveAtOk returns a tuple with the LastActiveAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountIntegration) GetLastActiveAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastActiveAt) {
		return nil, false
	}
	return o.LastActiveAt, true
}

// HasLastActiveAt returns a boolean if a field has been set.
func (o *AccountIntegration) HasLastActiveAt() bool {
	if o != nil && !IsNil(o.LastActiveAt) {
		return true
	}

	return false
}

// SetLastActiveAt gets a reference to the given time.Time and assigns it to the LastActiveAt field.
func (o *AccountIntegration) SetLastActiveAt(v time.Time) {
	o.LastActiveAt = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *AccountIntegration) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountIntegration) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *AccountIntegration) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *AccountIntegration) SetScopes(v []string) {
	o.Scopes = v
}

// GetWarning returns the Warning field value if set, zero value otherwise.
func (o *AccountIntegration) GetWarning() bool {
	if o == nil || IsNil(o.Warning) {
		var ret bool
		return ret
	}
	return *o.Warning
}

// GetWarningOk returns a tuple with the Warning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountIntegration) GetWarningOk() (*bool, bool) {
	if o == nil || IsNil(o.Warning) {
		return nil, false
	}
	return o.Warning, true
}

// HasWarning returns a boolean if a field has been set.
func (o *AccountIntegration) HasWarning() bool {
	if o != nil && !IsNil(o.Warning) {
		return true
	}

	return false
}

// SetWarning gets a reference to the given bool and assigns it to the Warning field.
func (o *AccountIntegration) SetWarning(v bool) {
	o.Warning = &v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *AccountIntegration) GetTokenId() string {
	if o == nil || IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountIntegration) GetTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *AccountIntegration) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *AccountIntegration) SetTokenId(v string) {
	o.TokenId = &v
}

// GetAdvancedType returns the AdvancedType field value if set, zero value otherwise.
func (o *AccountIntegration) GetAdvancedType() string {
	if o == nil || IsNil(o.AdvancedType) {
		var ret string
		return ret
	}
	return *o.AdvancedType
}

// GetAdvancedTypeOk returns a tuple with the AdvancedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountIntegration) GetAdvancedTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AdvancedType) {
		return nil, false
	}
	return o.AdvancedType, true
}

// HasAdvancedType returns a boolean if a field has been set.
func (o *AccountIntegration) HasAdvancedType() bool {
	if o != nil && !IsNil(o.AdvancedType) {
		return true
	}

	return false
}

// SetAdvancedType gets a reference to the given string and assigns it to the AdvancedType field.
func (o *AccountIntegration) SetAdvancedType(v string) {
	o.AdvancedType = &v
}

// GetAdvancedState returns the AdvancedState field value if set, zero value otherwise.
func (o *AccountIntegration) GetAdvancedState() string {
	if o == nil || IsNil(o.AdvancedState) {
		var ret string
		return ret
	}
	return *o.AdvancedState
}

// GetAdvancedStateOk returns a tuple with the AdvancedState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountIntegration) GetAdvancedStateOk() (*string, bool) {
	if o == nil || IsNil(o.AdvancedState) {
		return nil, false
	}
	return o.AdvancedState, true
}

// HasAdvancedState returns a boolean if a field has been set.
func (o *AccountIntegration) HasAdvancedState() bool {
	if o != nil && !IsNil(o.AdvancedState) {
		return true
	}

	return false
}

// SetAdvancedState gets a reference to the given string and assigns it to the AdvancedState field.
func (o *AccountIntegration) SetAdvancedState(v string) {
	o.AdvancedState = &v
}

// GetClientId returns the ClientId field value
func (o *AccountIntegration) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *AccountIntegration) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *AccountIntegration) SetClientId(v string) {
	o.ClientId = v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *AccountIntegration) GetSortOrder() int32 {
	if o == nil || IsNil(o.SortOrder) {
		var ret int32
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountIntegration) GetSortOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.SortOrder) {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *AccountIntegration) HasSortOrder() bool {
	if o != nil && !IsNil(o.SortOrder) {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given int32 and assigns it to the SortOrder field.
func (o *AccountIntegration) SetSortOrder(v int32) {
	o.SortOrder = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *AccountIntegration) GetDevice() bool {
	if o == nil || IsNil(o.Device) {
		var ret bool
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountIntegration) GetDeviceOk() (*bool, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *AccountIntegration) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given bool and assigns it to the Device field.
func (o *AccountIntegration) SetDevice(v bool) {
	o.Device = &v
}

func (o AccountIntegration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountIntegration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["vendorKey"] = o.VendorKey
	if !IsNil(o.SubAccountName) {
		toSerialize["subAccountName"] = o.SubAccountName
	}
	if !IsNil(o.SubAccountId) {
		toSerialize["subAccountId"] = o.SubAccountId
	}
	if !IsNil(o.SubAccount) {
		toSerialize["subAccount"] = o.SubAccount
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.LastActiveAt) {
		toSerialize["lastActiveAt"] = o.LastActiveAt
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.Warning) {
		toSerialize["warning"] = o.Warning
	}
	if !IsNil(o.TokenId) {
		toSerialize["tokenId"] = o.TokenId
	}
	if !IsNil(o.AdvancedType) {
		toSerialize["advancedType"] = o.AdvancedType
	}
	if !IsNil(o.AdvancedState) {
		toSerialize["advancedState"] = o.AdvancedState
	}
	toSerialize["clientId"] = o.ClientId
	if !IsNil(o.SortOrder) {
		toSerialize["sortOrder"] = o.SortOrder
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	return toSerialize, nil
}

func (o *AccountIntegration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
		"vendorKey",
		"name",
		"clientId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountIntegration := _AccountIntegration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountIntegration)

	if err != nil {
		return err
	}

	*o = AccountIntegration(varAccountIntegration)

	return err
}

type NullableAccountIntegration struct {
	value *AccountIntegration
	isSet bool
}

func (v NullableAccountIntegration) Get() *AccountIntegration {
	return v.value
}

func (v *NullableAccountIntegration) Set(val *AccountIntegration) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountIntegration) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountIntegration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountIntegration(val *AccountIntegration) *NullableAccountIntegration {
	return &NullableAccountIntegration{value: val, isSet: true}
}

func (v NullableAccountIntegration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountIntegration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


