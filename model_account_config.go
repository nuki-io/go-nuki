/*
Nuki API

The Nuki Web Api

API version: 3.13.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AccountConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountConfig{}

// AccountConfig struct for AccountConfig
type AccountConfig struct {
	// The alexa pin - used by alexa for unlock actions
	AlexaPin string `json:"alexaPin"`
	// The google smart home pin - used for unlock actions
	GactionsHomePin string `json:"gactionsHomePin"`
	// The opt enabled date
	OtpEnabledDate *time.Time `json:"otpEnabledDate,omitempty"`
}

type _AccountConfig AccountConfig

// NewAccountConfig instantiates a new AccountConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountConfig(alexaPin string, gactionsHomePin string) *AccountConfig {
	this := AccountConfig{}
	this.AlexaPin = alexaPin
	this.GactionsHomePin = gactionsHomePin
	return &this
}

// NewAccountConfigWithDefaults instantiates a new AccountConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountConfigWithDefaults() *AccountConfig {
	this := AccountConfig{}
	return &this
}

// GetAlexaPin returns the AlexaPin field value
func (o *AccountConfig) GetAlexaPin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AlexaPin
}

// GetAlexaPinOk returns a tuple with the AlexaPin field value
// and a boolean to check if the value has been set.
func (o *AccountConfig) GetAlexaPinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlexaPin, true
}

// SetAlexaPin sets field value
func (o *AccountConfig) SetAlexaPin(v string) {
	o.AlexaPin = v
}

// GetGactionsHomePin returns the GactionsHomePin field value
func (o *AccountConfig) GetGactionsHomePin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GactionsHomePin
}

// GetGactionsHomePinOk returns a tuple with the GactionsHomePin field value
// and a boolean to check if the value has been set.
func (o *AccountConfig) GetGactionsHomePinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GactionsHomePin, true
}

// SetGactionsHomePin sets field value
func (o *AccountConfig) SetGactionsHomePin(v string) {
	o.GactionsHomePin = v
}

// GetOtpEnabledDate returns the OtpEnabledDate field value if set, zero value otherwise.
func (o *AccountConfig) GetOtpEnabledDate() time.Time {
	if o == nil || IsNil(o.OtpEnabledDate) {
		var ret time.Time
		return ret
	}
	return *o.OtpEnabledDate
}

// GetOtpEnabledDateOk returns a tuple with the OtpEnabledDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountConfig) GetOtpEnabledDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.OtpEnabledDate) {
		return nil, false
	}
	return o.OtpEnabledDate, true
}

// HasOtpEnabledDate returns a boolean if a field has been set.
func (o *AccountConfig) HasOtpEnabledDate() bool {
	if o != nil && !IsNil(o.OtpEnabledDate) {
		return true
	}

	return false
}

// SetOtpEnabledDate gets a reference to the given time.Time and assigns it to the OtpEnabledDate field.
func (o *AccountConfig) SetOtpEnabledDate(v time.Time) {
	o.OtpEnabledDate = &v
}

func (o AccountConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["alexaPin"] = o.AlexaPin
	toSerialize["gactionsHomePin"] = o.GactionsHomePin
	if !IsNil(o.OtpEnabledDate) {
		toSerialize["otpEnabledDate"] = o.OtpEnabledDate
	}
	return toSerialize, nil
}

func (o *AccountConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"alexaPin",
		"gactionsHomePin",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountConfig := _AccountConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountConfig)

	if err != nil {
		return err
	}

	*o = AccountConfig(varAccountConfig)

	return err
}

type NullableAccountConfig struct {
	value *AccountConfig
	isSet bool
}

func (v NullableAccountConfig) Get() *AccountConfig {
	return v.value
}

func (v *NullableAccountConfig) Set(val *AccountConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountConfig(val *AccountConfig) *NullableAccountConfig {
	return &NullableAccountConfig{value: val, isSet: true}
}

func (v NullableAccountConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


