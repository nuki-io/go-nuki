/*
Nuki API

The Nuki Web Api

API version: 3.8.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the StaleDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StaleDevice{}

// StaleDevice struct for StaleDevice
type StaleDevice struct {
	SmartlockId *int64 `json:"smartlockId,omitempty"`
	Name *string `json:"name,omitempty"`
	Read *bool `json:"read,omitempty"`
}

// NewStaleDevice instantiates a new StaleDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStaleDevice() *StaleDevice {
	this := StaleDevice{}
	return &this
}

// NewStaleDeviceWithDefaults instantiates a new StaleDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStaleDeviceWithDefaults() *StaleDevice {
	this := StaleDevice{}
	return &this
}

// GetSmartlockId returns the SmartlockId field value if set, zero value otherwise.
func (o *StaleDevice) GetSmartlockId() int64 {
	if o == nil || IsNil(o.SmartlockId) {
		var ret int64
		return ret
	}
	return *o.SmartlockId
}

// GetSmartlockIdOk returns a tuple with the SmartlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaleDevice) GetSmartlockIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SmartlockId) {
		return nil, false
	}
	return o.SmartlockId, true
}

// HasSmartlockId returns a boolean if a field has been set.
func (o *StaleDevice) HasSmartlockId() bool {
	if o != nil && !IsNil(o.SmartlockId) {
		return true
	}

	return false
}

// SetSmartlockId gets a reference to the given int64 and assigns it to the SmartlockId field.
func (o *StaleDevice) SetSmartlockId(v int64) {
	o.SmartlockId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StaleDevice) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaleDevice) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StaleDevice) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StaleDevice) SetName(v string) {
	o.Name = &v
}

// GetRead returns the Read field value if set, zero value otherwise.
func (o *StaleDevice) GetRead() bool {
	if o == nil || IsNil(o.Read) {
		var ret bool
		return ret
	}
	return *o.Read
}

// GetReadOk returns a tuple with the Read field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaleDevice) GetReadOk() (*bool, bool) {
	if o == nil || IsNil(o.Read) {
		return nil, false
	}
	return o.Read, true
}

// HasRead returns a boolean if a field has been set.
func (o *StaleDevice) HasRead() bool {
	if o != nil && !IsNil(o.Read) {
		return true
	}

	return false
}

// SetRead gets a reference to the given bool and assigns it to the Read field.
func (o *StaleDevice) SetRead(v bool) {
	o.Read = &v
}

func (o StaleDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StaleDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SmartlockId) {
		toSerialize["smartlockId"] = o.SmartlockId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Read) {
		toSerialize["read"] = o.Read
	}
	return toSerialize, nil
}

type NullableStaleDevice struct {
	value *StaleDevice
	isSet bool
}

func (v NullableStaleDevice) Get() *StaleDevice {
	return v.value
}

func (v *NullableStaleDevice) Set(val *StaleDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableStaleDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableStaleDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStaleDevice(val *StaleDevice) *NullableStaleDevice {
	return &NullableStaleDevice{value: val, isSet: true}
}

func (v NullableStaleDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStaleDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


