/*
Nuki API

The Nuki Web Api

API version: 3.10.2
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the TermsOfUse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TermsOfUse{}

// TermsOfUse struct for TermsOfUse
type TermsOfUse struct {
	State *string `json:"state,omitempty"`
	PublishDate *time.Time `json:"publishDate,omitempty"`
	AcceptanceDate *time.Time `json:"acceptanceDate,omitempty"`
}

// NewTermsOfUse instantiates a new TermsOfUse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTermsOfUse() *TermsOfUse {
	this := TermsOfUse{}
	return &this
}

// NewTermsOfUseWithDefaults instantiates a new TermsOfUse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTermsOfUseWithDefaults() *TermsOfUse {
	this := TermsOfUse{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *TermsOfUse) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermsOfUse) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *TermsOfUse) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *TermsOfUse) SetState(v string) {
	o.State = &v
}

// GetPublishDate returns the PublishDate field value if set, zero value otherwise.
func (o *TermsOfUse) GetPublishDate() time.Time {
	if o == nil || IsNil(o.PublishDate) {
		var ret time.Time
		return ret
	}
	return *o.PublishDate
}

// GetPublishDateOk returns a tuple with the PublishDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermsOfUse) GetPublishDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PublishDate) {
		return nil, false
	}
	return o.PublishDate, true
}

// HasPublishDate returns a boolean if a field has been set.
func (o *TermsOfUse) HasPublishDate() bool {
	if o != nil && !IsNil(o.PublishDate) {
		return true
	}

	return false
}

// SetPublishDate gets a reference to the given time.Time and assigns it to the PublishDate field.
func (o *TermsOfUse) SetPublishDate(v time.Time) {
	o.PublishDate = &v
}

// GetAcceptanceDate returns the AcceptanceDate field value if set, zero value otherwise.
func (o *TermsOfUse) GetAcceptanceDate() time.Time {
	if o == nil || IsNil(o.AcceptanceDate) {
		var ret time.Time
		return ret
	}
	return *o.AcceptanceDate
}

// GetAcceptanceDateOk returns a tuple with the AcceptanceDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermsOfUse) GetAcceptanceDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AcceptanceDate) {
		return nil, false
	}
	return o.AcceptanceDate, true
}

// HasAcceptanceDate returns a boolean if a field has been set.
func (o *TermsOfUse) HasAcceptanceDate() bool {
	if o != nil && !IsNil(o.AcceptanceDate) {
		return true
	}

	return false
}

// SetAcceptanceDate gets a reference to the given time.Time and assigns it to the AcceptanceDate field.
func (o *TermsOfUse) SetAcceptanceDate(v time.Time) {
	o.AcceptanceDate = &v
}

func (o TermsOfUse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TermsOfUse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.PublishDate) {
		toSerialize["publishDate"] = o.PublishDate
	}
	if !IsNil(o.AcceptanceDate) {
		toSerialize["acceptanceDate"] = o.AcceptanceDate
	}
	return toSerialize, nil
}

type NullableTermsOfUse struct {
	value *TermsOfUse
	isSet bool
}

func (v NullableTermsOfUse) Get() *TermsOfUse {
	return v.value
}

func (v *NullableTermsOfUse) Set(val *TermsOfUse) {
	v.value = val
	v.isSet = true
}

func (v NullableTermsOfUse) IsSet() bool {
	return v.isSet
}

func (v *NullableTermsOfUse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTermsOfUse(val *TermsOfUse) *NullableTermsOfUse {
	return &NullableTermsOfUse{value: val, isSet: true}
}

func (v NullableTermsOfUse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTermsOfUse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


