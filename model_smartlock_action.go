/*
Nuki API

The Nuki Web Api

API version: 3.8.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SmartlockAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartlockAction{}

// SmartlockAction struct for SmartlockAction
type SmartlockAction struct {
	// The action: type=0/3/4: 1 .. unlock, 2 .. lock, 3 .. unlatch, 4 .. lock 'n' go, 5 .. lock 'n' go with unlatch; type=1: 1 .. unlock; type=2: 1 activate ring to open, 2 .. deactivate ring to open, 3 .. open (electric strike actuation), 6 ... activate continuous mode, 7 ... deactivate continuous mode
	Action int32 `json:"action"`
	// The option mask: 0 .. none, 2 .. force, 4 .. full lock
	Option *int32 `json:"option,omitempty"`
}

type _SmartlockAction SmartlockAction

// NewSmartlockAction instantiates a new SmartlockAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartlockAction(action int32) *SmartlockAction {
	this := SmartlockAction{}
	this.Action = action
	return &this
}

// NewSmartlockActionWithDefaults instantiates a new SmartlockAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartlockActionWithDefaults() *SmartlockAction {
	this := SmartlockAction{}
	return &this
}

// GetAction returns the Action field value
func (o *SmartlockAction) GetAction() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *SmartlockAction) GetActionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *SmartlockAction) SetAction(v int32) {
	o.Action = v
}

// GetOption returns the Option field value if set, zero value otherwise.
func (o *SmartlockAction) GetOption() int32 {
	if o == nil || IsNil(o.Option) {
		var ret int32
		return ret
	}
	return *o.Option
}

// GetOptionOk returns a tuple with the Option field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockAction) GetOptionOk() (*int32, bool) {
	if o == nil || IsNil(o.Option) {
		return nil, false
	}
	return o.Option, true
}

// HasOption returns a boolean if a field has been set.
func (o *SmartlockAction) HasOption() bool {
	if o != nil && !IsNil(o.Option) {
		return true
	}

	return false
}

// SetOption gets a reference to the given int32 and assigns it to the Option field.
func (o *SmartlockAction) SetOption(v int32) {
	o.Option = &v
}

func (o SmartlockAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartlockAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	if !IsNil(o.Option) {
		toSerialize["option"] = o.Option
	}
	return toSerialize, nil
}

func (o *SmartlockAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmartlockAction := _SmartlockAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSmartlockAction)

	if err != nil {
		return err
	}

	*o = SmartlockAction(varSmartlockAction)

	return err
}

type NullableSmartlockAction struct {
	value *SmartlockAction
	isSet bool
}

func (v NullableSmartlockAction) Get() *SmartlockAction {
	return v.value
}

func (v *NullableSmartlockAction) Set(val *SmartlockAction) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartlockAction) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartlockAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartlockAction(val *SmartlockAction) *NullableSmartlockAction {
	return &NullableSmartlockAction{value: val, isSet: true}
}

func (v NullableSmartlockAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartlockAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


