/*
Nuki API

The Nuki Web Api

API version: 3.9.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the AuthenticationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthenticationInfo{}

// AuthenticationInfo struct for AuthenticationInfo
type AuthenticationInfo struct {
	NextServerNonce *string `json:"nextServerNonce,omitempty"`
	NonceCount *int32 `json:"nonceCount,omitempty"`
	ClientNonce *string `json:"clientNonce,omitempty"`
	Quality *string `json:"quality,omitempty"`
	ResponseDigest *string `json:"responseDigest,omitempty"`
}

// NewAuthenticationInfo instantiates a new AuthenticationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticationInfo() *AuthenticationInfo {
	this := AuthenticationInfo{}
	return &this
}

// NewAuthenticationInfoWithDefaults instantiates a new AuthenticationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticationInfoWithDefaults() *AuthenticationInfo {
	this := AuthenticationInfo{}
	return &this
}

// GetNextServerNonce returns the NextServerNonce field value if set, zero value otherwise.
func (o *AuthenticationInfo) GetNextServerNonce() string {
	if o == nil || IsNil(o.NextServerNonce) {
		var ret string
		return ret
	}
	return *o.NextServerNonce
}

// GetNextServerNonceOk returns a tuple with the NextServerNonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationInfo) GetNextServerNonceOk() (*string, bool) {
	if o == nil || IsNil(o.NextServerNonce) {
		return nil, false
	}
	return o.NextServerNonce, true
}

// HasNextServerNonce returns a boolean if a field has been set.
func (o *AuthenticationInfo) HasNextServerNonce() bool {
	if o != nil && !IsNil(o.NextServerNonce) {
		return true
	}

	return false
}

// SetNextServerNonce gets a reference to the given string and assigns it to the NextServerNonce field.
func (o *AuthenticationInfo) SetNextServerNonce(v string) {
	o.NextServerNonce = &v
}

// GetNonceCount returns the NonceCount field value if set, zero value otherwise.
func (o *AuthenticationInfo) GetNonceCount() int32 {
	if o == nil || IsNil(o.NonceCount) {
		var ret int32
		return ret
	}
	return *o.NonceCount
}

// GetNonceCountOk returns a tuple with the NonceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationInfo) GetNonceCountOk() (*int32, bool) {
	if o == nil || IsNil(o.NonceCount) {
		return nil, false
	}
	return o.NonceCount, true
}

// HasNonceCount returns a boolean if a field has been set.
func (o *AuthenticationInfo) HasNonceCount() bool {
	if o != nil && !IsNil(o.NonceCount) {
		return true
	}

	return false
}

// SetNonceCount gets a reference to the given int32 and assigns it to the NonceCount field.
func (o *AuthenticationInfo) SetNonceCount(v int32) {
	o.NonceCount = &v
}

// GetClientNonce returns the ClientNonce field value if set, zero value otherwise.
func (o *AuthenticationInfo) GetClientNonce() string {
	if o == nil || IsNil(o.ClientNonce) {
		var ret string
		return ret
	}
	return *o.ClientNonce
}

// GetClientNonceOk returns a tuple with the ClientNonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationInfo) GetClientNonceOk() (*string, bool) {
	if o == nil || IsNil(o.ClientNonce) {
		return nil, false
	}
	return o.ClientNonce, true
}

// HasClientNonce returns a boolean if a field has been set.
func (o *AuthenticationInfo) HasClientNonce() bool {
	if o != nil && !IsNil(o.ClientNonce) {
		return true
	}

	return false
}

// SetClientNonce gets a reference to the given string and assigns it to the ClientNonce field.
func (o *AuthenticationInfo) SetClientNonce(v string) {
	o.ClientNonce = &v
}

// GetQuality returns the Quality field value if set, zero value otherwise.
func (o *AuthenticationInfo) GetQuality() string {
	if o == nil || IsNil(o.Quality) {
		var ret string
		return ret
	}
	return *o.Quality
}

// GetQualityOk returns a tuple with the Quality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationInfo) GetQualityOk() (*string, bool) {
	if o == nil || IsNil(o.Quality) {
		return nil, false
	}
	return o.Quality, true
}

// HasQuality returns a boolean if a field has been set.
func (o *AuthenticationInfo) HasQuality() bool {
	if o != nil && !IsNil(o.Quality) {
		return true
	}

	return false
}

// SetQuality gets a reference to the given string and assigns it to the Quality field.
func (o *AuthenticationInfo) SetQuality(v string) {
	o.Quality = &v
}

// GetResponseDigest returns the ResponseDigest field value if set, zero value otherwise.
func (o *AuthenticationInfo) GetResponseDigest() string {
	if o == nil || IsNil(o.ResponseDigest) {
		var ret string
		return ret
	}
	return *o.ResponseDigest
}

// GetResponseDigestOk returns a tuple with the ResponseDigest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationInfo) GetResponseDigestOk() (*string, bool) {
	if o == nil || IsNil(o.ResponseDigest) {
		return nil, false
	}
	return o.ResponseDigest, true
}

// HasResponseDigest returns a boolean if a field has been set.
func (o *AuthenticationInfo) HasResponseDigest() bool {
	if o != nil && !IsNil(o.ResponseDigest) {
		return true
	}

	return false
}

// SetResponseDigest gets a reference to the given string and assigns it to the ResponseDigest field.
func (o *AuthenticationInfo) SetResponseDigest(v string) {
	o.ResponseDigest = &v
}

func (o AuthenticationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthenticationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NextServerNonce) {
		toSerialize["nextServerNonce"] = o.NextServerNonce
	}
	if !IsNil(o.NonceCount) {
		toSerialize["nonceCount"] = o.NonceCount
	}
	if !IsNil(o.ClientNonce) {
		toSerialize["clientNonce"] = o.ClientNonce
	}
	if !IsNil(o.Quality) {
		toSerialize["quality"] = o.Quality
	}
	if !IsNil(o.ResponseDigest) {
		toSerialize["responseDigest"] = o.ResponseDigest
	}
	return toSerialize, nil
}

type NullableAuthenticationInfo struct {
	value *AuthenticationInfo
	isSet bool
}

func (v NullableAuthenticationInfo) Get() *AuthenticationInfo {
	return v.value
}

func (v *NullableAuthenticationInfo) Set(val *AuthenticationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationInfo(val *AuthenticationInfo) *NullableAuthenticationInfo {
	return &NullableAuthenticationInfo{value: val, isSet: true}
}

func (v NullableAuthenticationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


