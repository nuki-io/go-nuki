/*
Nuki API

The Nuki Web Api

API version: 3.13.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NotificationSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationSetting{}

// NotificationSetting struct for NotificationSetting
type NotificationSetting struct {
	// The smartlock ID, if not set all Smart Locks of the account  are enabled for push notifications
	SmartlockId *int64 `json:"smartlockId,omitempty"`
	// A set on which push notifications should be triggered: lock, unlock, unlatch, lockngo, open, ring, doorsensor, warnings, smartlock
	TriggerEvents []string `json:"triggerEvents"`
	// A set of auth IDs to filter push notifications to certain  users or keypads. If no entry push notifications are triggered for all users and keypads
	AuthIds []string `json:"authIds,omitempty"`
}

type _NotificationSetting NotificationSetting

// NewNotificationSetting instantiates a new NotificationSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationSetting(triggerEvents []string) *NotificationSetting {
	this := NotificationSetting{}
	this.TriggerEvents = triggerEvents
	return &this
}

// NewNotificationSettingWithDefaults instantiates a new NotificationSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationSettingWithDefaults() *NotificationSetting {
	this := NotificationSetting{}
	return &this
}

// GetSmartlockId returns the SmartlockId field value if set, zero value otherwise.
func (o *NotificationSetting) GetSmartlockId() int64 {
	if o == nil || IsNil(o.SmartlockId) {
		var ret int64
		return ret
	}
	return *o.SmartlockId
}

// GetSmartlockIdOk returns a tuple with the SmartlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSetting) GetSmartlockIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SmartlockId) {
		return nil, false
	}
	return o.SmartlockId, true
}

// HasSmartlockId returns a boolean if a field has been set.
func (o *NotificationSetting) HasSmartlockId() bool {
	if o != nil && !IsNil(o.SmartlockId) {
		return true
	}

	return false
}

// SetSmartlockId gets a reference to the given int64 and assigns it to the SmartlockId field.
func (o *NotificationSetting) SetSmartlockId(v int64) {
	o.SmartlockId = &v
}

// GetTriggerEvents returns the TriggerEvents field value
func (o *NotificationSetting) GetTriggerEvents() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TriggerEvents
}

// GetTriggerEventsOk returns a tuple with the TriggerEvents field value
// and a boolean to check if the value has been set.
func (o *NotificationSetting) GetTriggerEventsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TriggerEvents, true
}

// SetTriggerEvents sets field value
func (o *NotificationSetting) SetTriggerEvents(v []string) {
	o.TriggerEvents = v
}

// GetAuthIds returns the AuthIds field value if set, zero value otherwise.
func (o *NotificationSetting) GetAuthIds() []string {
	if o == nil || IsNil(o.AuthIds) {
		var ret []string
		return ret
	}
	return o.AuthIds
}

// GetAuthIdsOk returns a tuple with the AuthIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSetting) GetAuthIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AuthIds) {
		return nil, false
	}
	return o.AuthIds, true
}

// HasAuthIds returns a boolean if a field has been set.
func (o *NotificationSetting) HasAuthIds() bool {
	if o != nil && !IsNil(o.AuthIds) {
		return true
	}

	return false
}

// SetAuthIds gets a reference to the given []string and assigns it to the AuthIds field.
func (o *NotificationSetting) SetAuthIds(v []string) {
	o.AuthIds = v
}

func (o NotificationSetting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SmartlockId) {
		toSerialize["smartlockId"] = o.SmartlockId
	}
	toSerialize["triggerEvents"] = o.TriggerEvents
	if !IsNil(o.AuthIds) {
		toSerialize["authIds"] = o.AuthIds
	}
	return toSerialize, nil
}

func (o *NotificationSetting) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"triggerEvents",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotificationSetting := _NotificationSetting{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNotificationSetting)

	if err != nil {
		return err
	}

	*o = NotificationSetting(varNotificationSetting)

	return err
}

type NullableNotificationSetting struct {
	value *NotificationSetting
	isSet bool
}

func (v NullableNotificationSetting) Get() *NotificationSetting {
	return v.value
}

func (v *NullableNotificationSetting) Set(val *NotificationSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationSetting(val *NotificationSetting) *NullableNotificationSetting {
	return &NullableNotificationSetting{value: val, isSet: true}
}

func (v NullableNotificationSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


