/*
Nuki API

The Nuki Web Api

API version: 0.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Subscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subscription{}

// Subscription struct for Subscription
type Subscription struct {
	// The unique subscription id
	SubscriptionId int32 `json:"subscriptionId"`
	// The title per language
	Titles map[string]string `json:"titles"`
	// The description per language
	Descriptions map[string]string `json:"descriptions"`
	// The quantity of authorizations
	Quantity int32 `json:"quantity"`
	// The length with number and unit (e.g. 30d, 2y)
	Length string `json:"length"`
	// The price
	Price float64 `json:"price"`
	// The optional gift article
	GiftArticle *string `json:"giftArticle,omitempty"`
	// True if the subscription is available for new users
	Available bool `json:"available"`
	// The update date
	UpdateDate *int64 `json:"updateDate,omitempty"`
}

type _Subscription Subscription

// NewSubscription instantiates a new Subscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscription(subscriptionId int32, titles map[string]string, descriptions map[string]string, quantity int32, length string, price float64, available bool) *Subscription {
	this := Subscription{}
	this.SubscriptionId = subscriptionId
	this.Titles = titles
	this.Descriptions = descriptions
	this.Quantity = quantity
	this.Length = length
	this.Price = price
	this.Available = available
	return &this
}

// NewSubscriptionWithDefaults instantiates a new Subscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionWithDefaults() *Subscription {
	this := Subscription{}
	return &this
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *Subscription) GetSubscriptionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetSubscriptionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *Subscription) SetSubscriptionId(v int32) {
	o.SubscriptionId = v
}

// GetTitles returns the Titles field value
func (o *Subscription) GetTitles() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Titles
}

// GetTitlesOk returns a tuple with the Titles field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetTitlesOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Titles, true
}

// SetTitles sets field value
func (o *Subscription) SetTitles(v map[string]string) {
	o.Titles = v
}

// GetDescriptions returns the Descriptions field value
func (o *Subscription) GetDescriptions() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Descriptions
}

// GetDescriptionsOk returns a tuple with the Descriptions field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetDescriptionsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Descriptions, true
}

// SetDescriptions sets field value
func (o *Subscription) SetDescriptions(v map[string]string) {
	o.Descriptions = v
}

// GetQuantity returns the Quantity field value
func (o *Subscription) GetQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *Subscription) SetQuantity(v int32) {
	o.Quantity = v
}

// GetLength returns the Length field value
func (o *Subscription) GetLength() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Length
}

// GetLengthOk returns a tuple with the Length field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetLengthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Length, true
}

// SetLength sets field value
func (o *Subscription) SetLength(v string) {
	o.Length = v
}

// GetPrice returns the Price field value
func (o *Subscription) GetPrice() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *Subscription) SetPrice(v float64) {
	o.Price = v
}

// GetGiftArticle returns the GiftArticle field value if set, zero value otherwise.
func (o *Subscription) GetGiftArticle() string {
	if o == nil || IsNil(o.GiftArticle) {
		var ret string
		return ret
	}
	return *o.GiftArticle
}

// GetGiftArticleOk returns a tuple with the GiftArticle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetGiftArticleOk() (*string, bool) {
	if o == nil || IsNil(o.GiftArticle) {
		return nil, false
	}
	return o.GiftArticle, true
}

// HasGiftArticle returns a boolean if a field has been set.
func (o *Subscription) HasGiftArticle() bool {
	if o != nil && !IsNil(o.GiftArticle) {
		return true
	}

	return false
}

// SetGiftArticle gets a reference to the given string and assigns it to the GiftArticle field.
func (o *Subscription) SetGiftArticle(v string) {
	o.GiftArticle = &v
}

// GetAvailable returns the Available field value
func (o *Subscription) GetAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Available, true
}

// SetAvailable sets field value
func (o *Subscription) SetAvailable(v bool) {
	o.Available = v
}

// GetUpdateDate returns the UpdateDate field value if set, zero value otherwise.
func (o *Subscription) GetUpdateDate() int64 {
	if o == nil || IsNil(o.UpdateDate) {
		var ret int64
		return ret
	}
	return *o.UpdateDate
}

// GetUpdateDateOk returns a tuple with the UpdateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetUpdateDateOk() (*int64, bool) {
	if o == nil || IsNil(o.UpdateDate) {
		return nil, false
	}
	return o.UpdateDate, true
}

// HasUpdateDate returns a boolean if a field has been set.
func (o *Subscription) HasUpdateDate() bool {
	if o != nil && !IsNil(o.UpdateDate) {
		return true
	}

	return false
}

// SetUpdateDate gets a reference to the given int64 and assigns it to the UpdateDate field.
func (o *Subscription) SetUpdateDate(v int64) {
	o.UpdateDate = &v
}

func (o Subscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subscriptionId"] = o.SubscriptionId
	toSerialize["titles"] = o.Titles
	toSerialize["descriptions"] = o.Descriptions
	toSerialize["quantity"] = o.Quantity
	toSerialize["length"] = o.Length
	toSerialize["price"] = o.Price
	if !IsNil(o.GiftArticle) {
		toSerialize["giftArticle"] = o.GiftArticle
	}
	toSerialize["available"] = o.Available
	if !IsNil(o.UpdateDate) {
		toSerialize["updateDate"] = o.UpdateDate
	}
	return toSerialize, nil
}

func (o *Subscription) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subscriptionId",
		"titles",
		"descriptions",
		"quantity",
		"length",
		"price",
		"available",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscription := _Subscription{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscription)

	if err != nil {
		return err
	}

	*o = Subscription(varSubscription)

	return err
}

type NullableSubscription struct {
	value *Subscription
	isSet bool
}

func (v NullableSubscription) Get() *Subscription {
	return v.value
}

func (v *NullableSubscription) Set(val *Subscription) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscription(val *Subscription) *NullableSubscription {
	return &NullableSubscription{value: val, isSet: true}
}

func (v NullableSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


