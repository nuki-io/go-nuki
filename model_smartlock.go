/*
Nuki API

The Nuki Web Api

API version: 3.9.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Smartlock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Smartlock{}

// Smartlock struct for Smartlock
type Smartlock struct {
	// The smartlock id
	SmartlockId int64 `json:"smartlockId"`
	// The account id
	AccountId int32 `json:"accountId"`
	// The type: 0 .. keyturner, 1 .. box, 2 .. opener, 3 .. smartdoor, 4 .. smartlock 3.0/4. Gen
	Type int32 `json:"type"`
	// The lock mechanism used in the smart door lock: 1 .. MyEVO, 2 .. KFV Genius (only for type = 3)
	LmType *int32 `json:"lmType,omitempty"`
	// The authorization id
	AuthId int32 `json:"authId"`
	// The name of the smartlock
	Name string `json:"name"`
	// The favorite flag
	Favorite bool `json:"favorite"`
	Config *SmartlockConfig `json:"config,omitempty"`
	AdvancedConfig *SmartlockAdvancedConfig `json:"advancedConfig,omitempty"`
	OpenerAdvancedConfig *SmartlockOpenerAdvancedConfig `json:"openerAdvancedConfig,omitempty"`
	SmartdoorAdvancedConfig *SmartlockSmartdoorAdvancedConfig `json:"smartdoorAdvancedConfig,omitempty"`
	WebConfig *SmartlockWebConfig `json:"webConfig,omitempty"`
	State *SmartlockState `json:"state,omitempty"`
	// The firmware version
	FirmwareVersion *int32 `json:"firmwareVersion,omitempty"`
	// The hardware version
	HardwareVersion *int32 `json:"hardwareVersion,omitempty"`
	// The operation id - if set it's locked for another operation
	OperationId *string `json:"operationId,omitempty"`
	// The server state: 0 .. ok, 1 .. unregistered, 2 .. auth uuid invalid, 3 .. auth invalid, 4 .. offline
	ServerState int32 `json:"serverState"`
	// The admin pin state: 0 .. ok, 1 .. missing, 2 .. invalid
	AdminPinState int32 `json:"adminPinState"`
	// The flag indicating a virtual Smart Lock
	VirtualDevice *bool `json:"virtualDevice,omitempty"`
	// The creation date
	CreationDate *time.Time `json:"creationDate,omitempty"`
	// The update date
	UpdateDate *time.Time `json:"updateDate,omitempty"`
	// In case of any error, it contains the error message
	Error *string `json:"error,omitempty"`
	// Previous Subscriptions
	PreviousSubscriptions []ShsSubscription `json:"previousSubscriptions,omitempty"`
	CurrentSubscription *ShsSubscription `json:"currentSubscription,omitempty"`
	// The region
	Region *int32 `json:"region,omitempty"`
	// The mounting variant
	MountingVariant *int32 `json:"mountingVariant,omitempty"`
	Opener *bool `json:"opener,omitempty"`
	Box *bool `json:"box,omitempty"`
	SmartDoor *bool `json:"smartDoor,omitempty"`
	Keyturner *bool `json:"keyturner,omitempty"`
}

type _Smartlock Smartlock

// NewSmartlock instantiates a new Smartlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartlock(smartlockId int64, accountId int32, type_ int32, authId int32, name string, favorite bool, serverState int32, adminPinState int32) *Smartlock {
	this := Smartlock{}
	this.SmartlockId = smartlockId
	this.AccountId = accountId
	this.Type = type_
	this.AuthId = authId
	this.Name = name
	this.Favorite = favorite
	this.ServerState = serverState
	this.AdminPinState = adminPinState
	return &this
}

// NewSmartlockWithDefaults instantiates a new Smartlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartlockWithDefaults() *Smartlock {
	this := Smartlock{}
	return &this
}

// GetSmartlockId returns the SmartlockId field value
func (o *Smartlock) GetSmartlockId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SmartlockId
}

// GetSmartlockIdOk returns a tuple with the SmartlockId field value
// and a boolean to check if the value has been set.
func (o *Smartlock) GetSmartlockIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SmartlockId, true
}

// SetSmartlockId sets field value
func (o *Smartlock) SetSmartlockId(v int64) {
	o.SmartlockId = v
}

// GetAccountId returns the AccountId field value
func (o *Smartlock) GetAccountId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *Smartlock) GetAccountIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *Smartlock) SetAccountId(v int32) {
	o.AccountId = v
}

// GetType returns the Type field value
func (o *Smartlock) GetType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Smartlock) GetTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Smartlock) SetType(v int32) {
	o.Type = v
}

// GetLmType returns the LmType field value if set, zero value otherwise.
func (o *Smartlock) GetLmType() int32 {
	if o == nil || IsNil(o.LmType) {
		var ret int32
		return ret
	}
	return *o.LmType
}

// GetLmTypeOk returns a tuple with the LmType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetLmTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.LmType) {
		return nil, false
	}
	return o.LmType, true
}

// HasLmType returns a boolean if a field has been set.
func (o *Smartlock) HasLmType() bool {
	if o != nil && !IsNil(o.LmType) {
		return true
	}

	return false
}

// SetLmType gets a reference to the given int32 and assigns it to the LmType field.
func (o *Smartlock) SetLmType(v int32) {
	o.LmType = &v
}

// GetAuthId returns the AuthId field value
func (o *Smartlock) GetAuthId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AuthId
}

// GetAuthIdOk returns a tuple with the AuthId field value
// and a boolean to check if the value has been set.
func (o *Smartlock) GetAuthIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthId, true
}

// SetAuthId sets field value
func (o *Smartlock) SetAuthId(v int32) {
	o.AuthId = v
}

// GetName returns the Name field value
func (o *Smartlock) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Smartlock) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Smartlock) SetName(v string) {
	o.Name = v
}

// GetFavorite returns the Favorite field value
func (o *Smartlock) GetFavorite() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value
// and a boolean to check if the value has been set.
func (o *Smartlock) GetFavoriteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Favorite, true
}

// SetFavorite sets field value
func (o *Smartlock) SetFavorite(v bool) {
	o.Favorite = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *Smartlock) GetConfig() SmartlockConfig {
	if o == nil || IsNil(o.Config) {
		var ret SmartlockConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetConfigOk() (*SmartlockConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *Smartlock) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given SmartlockConfig and assigns it to the Config field.
func (o *Smartlock) SetConfig(v SmartlockConfig) {
	o.Config = &v
}

// GetAdvancedConfig returns the AdvancedConfig field value if set, zero value otherwise.
func (o *Smartlock) GetAdvancedConfig() SmartlockAdvancedConfig {
	if o == nil || IsNil(o.AdvancedConfig) {
		var ret SmartlockAdvancedConfig
		return ret
	}
	return *o.AdvancedConfig
}

// GetAdvancedConfigOk returns a tuple with the AdvancedConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetAdvancedConfigOk() (*SmartlockAdvancedConfig, bool) {
	if o == nil || IsNil(o.AdvancedConfig) {
		return nil, false
	}
	return o.AdvancedConfig, true
}

// HasAdvancedConfig returns a boolean if a field has been set.
func (o *Smartlock) HasAdvancedConfig() bool {
	if o != nil && !IsNil(o.AdvancedConfig) {
		return true
	}

	return false
}

// SetAdvancedConfig gets a reference to the given SmartlockAdvancedConfig and assigns it to the AdvancedConfig field.
func (o *Smartlock) SetAdvancedConfig(v SmartlockAdvancedConfig) {
	o.AdvancedConfig = &v
}

// GetOpenerAdvancedConfig returns the OpenerAdvancedConfig field value if set, zero value otherwise.
func (o *Smartlock) GetOpenerAdvancedConfig() SmartlockOpenerAdvancedConfig {
	if o == nil || IsNil(o.OpenerAdvancedConfig) {
		var ret SmartlockOpenerAdvancedConfig
		return ret
	}
	return *o.OpenerAdvancedConfig
}

// GetOpenerAdvancedConfigOk returns a tuple with the OpenerAdvancedConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetOpenerAdvancedConfigOk() (*SmartlockOpenerAdvancedConfig, bool) {
	if o == nil || IsNil(o.OpenerAdvancedConfig) {
		return nil, false
	}
	return o.OpenerAdvancedConfig, true
}

// HasOpenerAdvancedConfig returns a boolean if a field has been set.
func (o *Smartlock) HasOpenerAdvancedConfig() bool {
	if o != nil && !IsNil(o.OpenerAdvancedConfig) {
		return true
	}

	return false
}

// SetOpenerAdvancedConfig gets a reference to the given SmartlockOpenerAdvancedConfig and assigns it to the OpenerAdvancedConfig field.
func (o *Smartlock) SetOpenerAdvancedConfig(v SmartlockOpenerAdvancedConfig) {
	o.OpenerAdvancedConfig = &v
}

// GetSmartdoorAdvancedConfig returns the SmartdoorAdvancedConfig field value if set, zero value otherwise.
func (o *Smartlock) GetSmartdoorAdvancedConfig() SmartlockSmartdoorAdvancedConfig {
	if o == nil || IsNil(o.SmartdoorAdvancedConfig) {
		var ret SmartlockSmartdoorAdvancedConfig
		return ret
	}
	return *o.SmartdoorAdvancedConfig
}

// GetSmartdoorAdvancedConfigOk returns a tuple with the SmartdoorAdvancedConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetSmartdoorAdvancedConfigOk() (*SmartlockSmartdoorAdvancedConfig, bool) {
	if o == nil || IsNil(o.SmartdoorAdvancedConfig) {
		return nil, false
	}
	return o.SmartdoorAdvancedConfig, true
}

// HasSmartdoorAdvancedConfig returns a boolean if a field has been set.
func (o *Smartlock) HasSmartdoorAdvancedConfig() bool {
	if o != nil && !IsNil(o.SmartdoorAdvancedConfig) {
		return true
	}

	return false
}

// SetSmartdoorAdvancedConfig gets a reference to the given SmartlockSmartdoorAdvancedConfig and assigns it to the SmartdoorAdvancedConfig field.
func (o *Smartlock) SetSmartdoorAdvancedConfig(v SmartlockSmartdoorAdvancedConfig) {
	o.SmartdoorAdvancedConfig = &v
}

// GetWebConfig returns the WebConfig field value if set, zero value otherwise.
func (o *Smartlock) GetWebConfig() SmartlockWebConfig {
	if o == nil || IsNil(o.WebConfig) {
		var ret SmartlockWebConfig
		return ret
	}
	return *o.WebConfig
}

// GetWebConfigOk returns a tuple with the WebConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetWebConfigOk() (*SmartlockWebConfig, bool) {
	if o == nil || IsNil(o.WebConfig) {
		return nil, false
	}
	return o.WebConfig, true
}

// HasWebConfig returns a boolean if a field has been set.
func (o *Smartlock) HasWebConfig() bool {
	if o != nil && !IsNil(o.WebConfig) {
		return true
	}

	return false
}

// SetWebConfig gets a reference to the given SmartlockWebConfig and assigns it to the WebConfig field.
func (o *Smartlock) SetWebConfig(v SmartlockWebConfig) {
	o.WebConfig = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Smartlock) GetState() SmartlockState {
	if o == nil || IsNil(o.State) {
		var ret SmartlockState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetStateOk() (*SmartlockState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Smartlock) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given SmartlockState and assigns it to the State field.
func (o *Smartlock) SetState(v SmartlockState) {
	o.State = &v
}

// GetFirmwareVersion returns the FirmwareVersion field value if set, zero value otherwise.
func (o *Smartlock) GetFirmwareVersion() int32 {
	if o == nil || IsNil(o.FirmwareVersion) {
		var ret int32
		return ret
	}
	return *o.FirmwareVersion
}

// GetFirmwareVersionOk returns a tuple with the FirmwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetFirmwareVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.FirmwareVersion) {
		return nil, false
	}
	return o.FirmwareVersion, true
}

// HasFirmwareVersion returns a boolean if a field has been set.
func (o *Smartlock) HasFirmwareVersion() bool {
	if o != nil && !IsNil(o.FirmwareVersion) {
		return true
	}

	return false
}

// SetFirmwareVersion gets a reference to the given int32 and assigns it to the FirmwareVersion field.
func (o *Smartlock) SetFirmwareVersion(v int32) {
	o.FirmwareVersion = &v
}

// GetHardwareVersion returns the HardwareVersion field value if set, zero value otherwise.
func (o *Smartlock) GetHardwareVersion() int32 {
	if o == nil || IsNil(o.HardwareVersion) {
		var ret int32
		return ret
	}
	return *o.HardwareVersion
}

// GetHardwareVersionOk returns a tuple with the HardwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetHardwareVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.HardwareVersion) {
		return nil, false
	}
	return o.HardwareVersion, true
}

// HasHardwareVersion returns a boolean if a field has been set.
func (o *Smartlock) HasHardwareVersion() bool {
	if o != nil && !IsNil(o.HardwareVersion) {
		return true
	}

	return false
}

// SetHardwareVersion gets a reference to the given int32 and assigns it to the HardwareVersion field.
func (o *Smartlock) SetHardwareVersion(v int32) {
	o.HardwareVersion = &v
}

// GetOperationId returns the OperationId field value if set, zero value otherwise.
func (o *Smartlock) GetOperationId() string {
	if o == nil || IsNil(o.OperationId) {
		var ret string
		return ret
	}
	return *o.OperationId
}

// GetOperationIdOk returns a tuple with the OperationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetOperationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OperationId) {
		return nil, false
	}
	return o.OperationId, true
}

// HasOperationId returns a boolean if a field has been set.
func (o *Smartlock) HasOperationId() bool {
	if o != nil && !IsNil(o.OperationId) {
		return true
	}

	return false
}

// SetOperationId gets a reference to the given string and assigns it to the OperationId field.
func (o *Smartlock) SetOperationId(v string) {
	o.OperationId = &v
}

// GetServerState returns the ServerState field value
func (o *Smartlock) GetServerState() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ServerState
}

// GetServerStateOk returns a tuple with the ServerState field value
// and a boolean to check if the value has been set.
func (o *Smartlock) GetServerStateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerState, true
}

// SetServerState sets field value
func (o *Smartlock) SetServerState(v int32) {
	o.ServerState = v
}

// GetAdminPinState returns the AdminPinState field value
func (o *Smartlock) GetAdminPinState() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AdminPinState
}

// GetAdminPinStateOk returns a tuple with the AdminPinState field value
// and a boolean to check if the value has been set.
func (o *Smartlock) GetAdminPinStateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdminPinState, true
}

// SetAdminPinState sets field value
func (o *Smartlock) SetAdminPinState(v int32) {
	o.AdminPinState = v
}

// GetVirtualDevice returns the VirtualDevice field value if set, zero value otherwise.
func (o *Smartlock) GetVirtualDevice() bool {
	if o == nil || IsNil(o.VirtualDevice) {
		var ret bool
		return ret
	}
	return *o.VirtualDevice
}

// GetVirtualDeviceOk returns a tuple with the VirtualDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetVirtualDeviceOk() (*bool, bool) {
	if o == nil || IsNil(o.VirtualDevice) {
		return nil, false
	}
	return o.VirtualDevice, true
}

// HasVirtualDevice returns a boolean if a field has been set.
func (o *Smartlock) HasVirtualDevice() bool {
	if o != nil && !IsNil(o.VirtualDevice) {
		return true
	}

	return false
}

// SetVirtualDevice gets a reference to the given bool and assigns it to the VirtualDevice field.
func (o *Smartlock) SetVirtualDevice(v bool) {
	o.VirtualDevice = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *Smartlock) GetCreationDate() time.Time {
	if o == nil || IsNil(o.CreationDate) {
		var ret time.Time
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetCreationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *Smartlock) HasCreationDate() bool {
	if o != nil && !IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given time.Time and assigns it to the CreationDate field.
func (o *Smartlock) SetCreationDate(v time.Time) {
	o.CreationDate = &v
}

// GetUpdateDate returns the UpdateDate field value if set, zero value otherwise.
func (o *Smartlock) GetUpdateDate() time.Time {
	if o == nil || IsNil(o.UpdateDate) {
		var ret time.Time
		return ret
	}
	return *o.UpdateDate
}

// GetUpdateDateOk returns a tuple with the UpdateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetUpdateDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdateDate) {
		return nil, false
	}
	return o.UpdateDate, true
}

// HasUpdateDate returns a boolean if a field has been set.
func (o *Smartlock) HasUpdateDate() bool {
	if o != nil && !IsNil(o.UpdateDate) {
		return true
	}

	return false
}

// SetUpdateDate gets a reference to the given time.Time and assigns it to the UpdateDate field.
func (o *Smartlock) SetUpdateDate(v time.Time) {
	o.UpdateDate = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *Smartlock) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *Smartlock) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *Smartlock) SetError(v string) {
	o.Error = &v
}

// GetPreviousSubscriptions returns the PreviousSubscriptions field value if set, zero value otherwise.
func (o *Smartlock) GetPreviousSubscriptions() []ShsSubscription {
	if o == nil || IsNil(o.PreviousSubscriptions) {
		var ret []ShsSubscription
		return ret
	}
	return o.PreviousSubscriptions
}

// GetPreviousSubscriptionsOk returns a tuple with the PreviousSubscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetPreviousSubscriptionsOk() ([]ShsSubscription, bool) {
	if o == nil || IsNil(o.PreviousSubscriptions) {
		return nil, false
	}
	return o.PreviousSubscriptions, true
}

// HasPreviousSubscriptions returns a boolean if a field has been set.
func (o *Smartlock) HasPreviousSubscriptions() bool {
	if o != nil && !IsNil(o.PreviousSubscriptions) {
		return true
	}

	return false
}

// SetPreviousSubscriptions gets a reference to the given []ShsSubscription and assigns it to the PreviousSubscriptions field.
func (o *Smartlock) SetPreviousSubscriptions(v []ShsSubscription) {
	o.PreviousSubscriptions = v
}

// GetCurrentSubscription returns the CurrentSubscription field value if set, zero value otherwise.
func (o *Smartlock) GetCurrentSubscription() ShsSubscription {
	if o == nil || IsNil(o.CurrentSubscription) {
		var ret ShsSubscription
		return ret
	}
	return *o.CurrentSubscription
}

// GetCurrentSubscriptionOk returns a tuple with the CurrentSubscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetCurrentSubscriptionOk() (*ShsSubscription, bool) {
	if o == nil || IsNil(o.CurrentSubscription) {
		return nil, false
	}
	return o.CurrentSubscription, true
}

// HasCurrentSubscription returns a boolean if a field has been set.
func (o *Smartlock) HasCurrentSubscription() bool {
	if o != nil && !IsNil(o.CurrentSubscription) {
		return true
	}

	return false
}

// SetCurrentSubscription gets a reference to the given ShsSubscription and assigns it to the CurrentSubscription field.
func (o *Smartlock) SetCurrentSubscription(v ShsSubscription) {
	o.CurrentSubscription = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *Smartlock) GetRegion() int32 {
	if o == nil || IsNil(o.Region) {
		var ret int32
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetRegionOk() (*int32, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *Smartlock) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given int32 and assigns it to the Region field.
func (o *Smartlock) SetRegion(v int32) {
	o.Region = &v
}

// GetMountingVariant returns the MountingVariant field value if set, zero value otherwise.
func (o *Smartlock) GetMountingVariant() int32 {
	if o == nil || IsNil(o.MountingVariant) {
		var ret int32
		return ret
	}
	return *o.MountingVariant
}

// GetMountingVariantOk returns a tuple with the MountingVariant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetMountingVariantOk() (*int32, bool) {
	if o == nil || IsNil(o.MountingVariant) {
		return nil, false
	}
	return o.MountingVariant, true
}

// HasMountingVariant returns a boolean if a field has been set.
func (o *Smartlock) HasMountingVariant() bool {
	if o != nil && !IsNil(o.MountingVariant) {
		return true
	}

	return false
}

// SetMountingVariant gets a reference to the given int32 and assigns it to the MountingVariant field.
func (o *Smartlock) SetMountingVariant(v int32) {
	o.MountingVariant = &v
}

// GetOpener returns the Opener field value if set, zero value otherwise.
func (o *Smartlock) GetOpener() bool {
	if o == nil || IsNil(o.Opener) {
		var ret bool
		return ret
	}
	return *o.Opener
}

// GetOpenerOk returns a tuple with the Opener field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetOpenerOk() (*bool, bool) {
	if o == nil || IsNil(o.Opener) {
		return nil, false
	}
	return o.Opener, true
}

// HasOpener returns a boolean if a field has been set.
func (o *Smartlock) HasOpener() bool {
	if o != nil && !IsNil(o.Opener) {
		return true
	}

	return false
}

// SetOpener gets a reference to the given bool and assigns it to the Opener field.
func (o *Smartlock) SetOpener(v bool) {
	o.Opener = &v
}

// GetBox returns the Box field value if set, zero value otherwise.
func (o *Smartlock) GetBox() bool {
	if o == nil || IsNil(o.Box) {
		var ret bool
		return ret
	}
	return *o.Box
}

// GetBoxOk returns a tuple with the Box field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetBoxOk() (*bool, bool) {
	if o == nil || IsNil(o.Box) {
		return nil, false
	}
	return o.Box, true
}

// HasBox returns a boolean if a field has been set.
func (o *Smartlock) HasBox() bool {
	if o != nil && !IsNil(o.Box) {
		return true
	}

	return false
}

// SetBox gets a reference to the given bool and assigns it to the Box field.
func (o *Smartlock) SetBox(v bool) {
	o.Box = &v
}

// GetSmartDoor returns the SmartDoor field value if set, zero value otherwise.
func (o *Smartlock) GetSmartDoor() bool {
	if o == nil || IsNil(o.SmartDoor) {
		var ret bool
		return ret
	}
	return *o.SmartDoor
}

// GetSmartDoorOk returns a tuple with the SmartDoor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetSmartDoorOk() (*bool, bool) {
	if o == nil || IsNil(o.SmartDoor) {
		return nil, false
	}
	return o.SmartDoor, true
}

// HasSmartDoor returns a boolean if a field has been set.
func (o *Smartlock) HasSmartDoor() bool {
	if o != nil && !IsNil(o.SmartDoor) {
		return true
	}

	return false
}

// SetSmartDoor gets a reference to the given bool and assigns it to the SmartDoor field.
func (o *Smartlock) SetSmartDoor(v bool) {
	o.SmartDoor = &v
}

// GetKeyturner returns the Keyturner field value if set, zero value otherwise.
func (o *Smartlock) GetKeyturner() bool {
	if o == nil || IsNil(o.Keyturner) {
		var ret bool
		return ret
	}
	return *o.Keyturner
}

// GetKeyturnerOk returns a tuple with the Keyturner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Smartlock) GetKeyturnerOk() (*bool, bool) {
	if o == nil || IsNil(o.Keyturner) {
		return nil, false
	}
	return o.Keyturner, true
}

// HasKeyturner returns a boolean if a field has been set.
func (o *Smartlock) HasKeyturner() bool {
	if o != nil && !IsNil(o.Keyturner) {
		return true
	}

	return false
}

// SetKeyturner gets a reference to the given bool and assigns it to the Keyturner field.
func (o *Smartlock) SetKeyturner(v bool) {
	o.Keyturner = &v
}

func (o Smartlock) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Smartlock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["smartlockId"] = o.SmartlockId
	toSerialize["accountId"] = o.AccountId
	toSerialize["type"] = o.Type
	if !IsNil(o.LmType) {
		toSerialize["lmType"] = o.LmType
	}
	toSerialize["authId"] = o.AuthId
	toSerialize["name"] = o.Name
	toSerialize["favorite"] = o.Favorite
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.AdvancedConfig) {
		toSerialize["advancedConfig"] = o.AdvancedConfig
	}
	if !IsNil(o.OpenerAdvancedConfig) {
		toSerialize["openerAdvancedConfig"] = o.OpenerAdvancedConfig
	}
	if !IsNil(o.SmartdoorAdvancedConfig) {
		toSerialize["smartdoorAdvancedConfig"] = o.SmartdoorAdvancedConfig
	}
	if !IsNil(o.WebConfig) {
		toSerialize["webConfig"] = o.WebConfig
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.FirmwareVersion) {
		toSerialize["firmwareVersion"] = o.FirmwareVersion
	}
	if !IsNil(o.HardwareVersion) {
		toSerialize["hardwareVersion"] = o.HardwareVersion
	}
	if !IsNil(o.OperationId) {
		toSerialize["operationId"] = o.OperationId
	}
	toSerialize["serverState"] = o.ServerState
	toSerialize["adminPinState"] = o.AdminPinState
	if !IsNil(o.VirtualDevice) {
		toSerialize["virtualDevice"] = o.VirtualDevice
	}
	if !IsNil(o.CreationDate) {
		toSerialize["creationDate"] = o.CreationDate
	}
	if !IsNil(o.UpdateDate) {
		toSerialize["updateDate"] = o.UpdateDate
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.PreviousSubscriptions) {
		toSerialize["previousSubscriptions"] = o.PreviousSubscriptions
	}
	if !IsNil(o.CurrentSubscription) {
		toSerialize["currentSubscription"] = o.CurrentSubscription
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.MountingVariant) {
		toSerialize["mountingVariant"] = o.MountingVariant
	}
	if !IsNil(o.Opener) {
		toSerialize["opener"] = o.Opener
	}
	if !IsNil(o.Box) {
		toSerialize["box"] = o.Box
	}
	if !IsNil(o.SmartDoor) {
		toSerialize["smartDoor"] = o.SmartDoor
	}
	if !IsNil(o.Keyturner) {
		toSerialize["keyturner"] = o.Keyturner
	}
	return toSerialize, nil
}

func (o *Smartlock) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"smartlockId",
		"accountId",
		"type",
		"authId",
		"name",
		"favorite",
		"serverState",
		"adminPinState",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmartlock := _Smartlock{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSmartlock)

	if err != nil {
		return err
	}

	*o = Smartlock(varSmartlock)

	return err
}

type NullableSmartlock struct {
	value *Smartlock
	isSet bool
}

func (v NullableSmartlock) Get() *Smartlock {
	return v.value
}

func (v *NullableSmartlock) Set(val *Smartlock) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartlock) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartlock(val *Smartlock) *NullableSmartlock {
	return &NullableSmartlock{value: val, isSet: true}
}

func (v NullableSmartlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


