/*
Nuki API

The Nuki Web Api

API version: 3.10.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the WebhookMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookMessage{}

// WebhookMessage struct for WebhookMessage
type WebhookMessage struct {
	// Http Headers as key value pairs
	Headers map[string]string `json:"headers"`
	// Http Body as Json
	Body map[string]map[string]interface{} `json:"body,omitempty"`
	// The timestamp when the message was created
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// Path of the message
	Path string `json:"path"`
}

type _WebhookMessage WebhookMessage

// NewWebhookMessage instantiates a new WebhookMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookMessage(headers map[string]string, path string) *WebhookMessage {
	this := WebhookMessage{}
	this.Headers = headers
	this.Path = path
	return &this
}

// NewWebhookMessageWithDefaults instantiates a new WebhookMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookMessageWithDefaults() *WebhookMessage {
	this := WebhookMessage{}
	return &this
}

// GetHeaders returns the Headers field value
func (o *WebhookMessage) GetHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value
// and a boolean to check if the value has been set.
func (o *WebhookMessage) GetHeadersOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Headers, true
}

// SetHeaders sets field value
func (o *WebhookMessage) SetHeaders(v map[string]string) {
	o.Headers = v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *WebhookMessage) GetBody() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Body) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookMessage) GetBodyOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Body) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *WebhookMessage) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given map[string]map[string]interface{} and assigns it to the Body field.
func (o *WebhookMessage) SetBody(v map[string]map[string]interface{}) {
	o.Body = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *WebhookMessage) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookMessage) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *WebhookMessage) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *WebhookMessage) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetPath returns the Path field value
func (o *WebhookMessage) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *WebhookMessage) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *WebhookMessage) SetPath(v string) {
	o.Path = v
}

func (o WebhookMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["headers"] = o.Headers
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

func (o *WebhookMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"headers",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebhookMessage := _WebhookMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWebhookMessage)

	if err != nil {
		return err
	}

	*o = WebhookMessage(varWebhookMessage)

	return err
}

type NullableWebhookMessage struct {
	value *WebhookMessage
	isSet bool
}

func (v NullableWebhookMessage) Get() *WebhookMessage {
	return v.value
}

func (v *NullableWebhookMessage) Set(val *WebhookMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookMessage(val *WebhookMessage) *NullableWebhookMessage {
	return &NullableWebhookMessage{value: val, isSet: true}
}

func (v NullableWebhookMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


