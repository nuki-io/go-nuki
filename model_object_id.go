/*
Nuki API

The Nuki Web Api

API version: 3.10.2
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the ObjectId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectId{}

// ObjectId struct for ObjectId
type ObjectId struct {
	Timestamp *int32 `json:"timestamp,omitempty"`
	Counter *int32 `json:"counter,omitempty"`
	Time *int64 `json:"time,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	MachineIdentifier *int32 `json:"machineIdentifier,omitempty"`
	ProcessIdentifier *int32 `json:"processIdentifier,omitempty"`
	TimeSecond *int32 `json:"timeSecond,omitempty"`
}

// NewObjectId instantiates a new ObjectId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectId() *ObjectId {
	this := ObjectId{}
	return &this
}

// NewObjectIdWithDefaults instantiates a new ObjectId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectIdWithDefaults() *ObjectId {
	this := ObjectId{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ObjectId) GetTimestamp() int32 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectId) GetTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ObjectId) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int32 and assigns it to the Timestamp field.
func (o *ObjectId) SetTimestamp(v int32) {
	o.Timestamp = &v
}

// GetCounter returns the Counter field value if set, zero value otherwise.
func (o *ObjectId) GetCounter() int32 {
	if o == nil || IsNil(o.Counter) {
		var ret int32
		return ret
	}
	return *o.Counter
}

// GetCounterOk returns a tuple with the Counter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectId) GetCounterOk() (*int32, bool) {
	if o == nil || IsNil(o.Counter) {
		return nil, false
	}
	return o.Counter, true
}

// HasCounter returns a boolean if a field has been set.
func (o *ObjectId) HasCounter() bool {
	if o != nil && !IsNil(o.Counter) {
		return true
	}

	return false
}

// SetCounter gets a reference to the given int32 and assigns it to the Counter field.
func (o *ObjectId) SetCounter(v int32) {
	o.Counter = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *ObjectId) GetTime() int64 {
	if o == nil || IsNil(o.Time) {
		var ret int64
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectId) GetTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *ObjectId) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given int64 and assigns it to the Time field.
func (o *ObjectId) SetTime(v int64) {
	o.Time = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ObjectId) GetDate() time.Time {
	if o == nil || IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectId) GetDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ObjectId) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *ObjectId) SetDate(v time.Time) {
	o.Date = &v
}

// GetMachineIdentifier returns the MachineIdentifier field value if set, zero value otherwise.
func (o *ObjectId) GetMachineIdentifier() int32 {
	if o == nil || IsNil(o.MachineIdentifier) {
		var ret int32
		return ret
	}
	return *o.MachineIdentifier
}

// GetMachineIdentifierOk returns a tuple with the MachineIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectId) GetMachineIdentifierOk() (*int32, bool) {
	if o == nil || IsNil(o.MachineIdentifier) {
		return nil, false
	}
	return o.MachineIdentifier, true
}

// HasMachineIdentifier returns a boolean if a field has been set.
func (o *ObjectId) HasMachineIdentifier() bool {
	if o != nil && !IsNil(o.MachineIdentifier) {
		return true
	}

	return false
}

// SetMachineIdentifier gets a reference to the given int32 and assigns it to the MachineIdentifier field.
func (o *ObjectId) SetMachineIdentifier(v int32) {
	o.MachineIdentifier = &v
}

// GetProcessIdentifier returns the ProcessIdentifier field value if set, zero value otherwise.
func (o *ObjectId) GetProcessIdentifier() int32 {
	if o == nil || IsNil(o.ProcessIdentifier) {
		var ret int32
		return ret
	}
	return *o.ProcessIdentifier
}

// GetProcessIdentifierOk returns a tuple with the ProcessIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectId) GetProcessIdentifierOk() (*int32, bool) {
	if o == nil || IsNil(o.ProcessIdentifier) {
		return nil, false
	}
	return o.ProcessIdentifier, true
}

// HasProcessIdentifier returns a boolean if a field has been set.
func (o *ObjectId) HasProcessIdentifier() bool {
	if o != nil && !IsNil(o.ProcessIdentifier) {
		return true
	}

	return false
}

// SetProcessIdentifier gets a reference to the given int32 and assigns it to the ProcessIdentifier field.
func (o *ObjectId) SetProcessIdentifier(v int32) {
	o.ProcessIdentifier = &v
}

// GetTimeSecond returns the TimeSecond field value if set, zero value otherwise.
func (o *ObjectId) GetTimeSecond() int32 {
	if o == nil || IsNil(o.TimeSecond) {
		var ret int32
		return ret
	}
	return *o.TimeSecond
}

// GetTimeSecondOk returns a tuple with the TimeSecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectId) GetTimeSecondOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeSecond) {
		return nil, false
	}
	return o.TimeSecond, true
}

// HasTimeSecond returns a boolean if a field has been set.
func (o *ObjectId) HasTimeSecond() bool {
	if o != nil && !IsNil(o.TimeSecond) {
		return true
	}

	return false
}

// SetTimeSecond gets a reference to the given int32 and assigns it to the TimeSecond field.
func (o *ObjectId) SetTimeSecond(v int32) {
	o.TimeSecond = &v
}

func (o ObjectId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Counter) {
		toSerialize["counter"] = o.Counter
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.MachineIdentifier) {
		toSerialize["machineIdentifier"] = o.MachineIdentifier
	}
	if !IsNil(o.ProcessIdentifier) {
		toSerialize["processIdentifier"] = o.ProcessIdentifier
	}
	if !IsNil(o.TimeSecond) {
		toSerialize["timeSecond"] = o.TimeSecond
	}
	return toSerialize, nil
}

type NullableObjectId struct {
	value *ObjectId
	isSet bool
}

func (v NullableObjectId) Get() *ObjectId {
	return v.value
}

func (v *NullableObjectId) Set(val *ObjectId) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectId) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectId(val *ObjectId) *NullableObjectId {
	return &NullableObjectId{value: val, isSet: true}
}

func (v NullableObjectId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


