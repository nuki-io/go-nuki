/*
Nuki API

The Nuki Web Api

API version: 0.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Status type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Status{}

// Status struct for Status
type Status struct {
	Code *int32 `json:"code,omitempty"`
	Description *string `json:"description,omitempty"`
	ReasonPhrase *string `json:"reasonPhrase,omitempty"`
	Throwable *Throwable `json:"throwable,omitempty"`
	Uri *string `json:"uri,omitempty"`
	Success *bool `json:"success,omitempty"`
	ServerError *bool `json:"serverError,omitempty"`
	ConnectorError *bool `json:"connectorError,omitempty"`
	ClientError *bool `json:"clientError,omitempty"`
	GlobalError *bool `json:"globalError,omitempty"`
	Informational *bool `json:"informational,omitempty"`
	Redirection *bool `json:"redirection,omitempty"`
	RecoverableError *bool `json:"recoverableError,omitempty"`
	Error *bool `json:"error,omitempty"`
}

// NewStatus instantiates a new Status object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatus() *Status {
	this := Status{}
	return &this
}

// NewStatusWithDefaults instantiates a new Status object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusWithDefaults() *Status {
	this := Status{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Status) GetCode() int32 {
	if o == nil || IsNil(o.Code) {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Status) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *Status) SetCode(v int32) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Status) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Status) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Status) SetDescription(v string) {
	o.Description = &v
}

// GetReasonPhrase returns the ReasonPhrase field value if set, zero value otherwise.
func (o *Status) GetReasonPhrase() string {
	if o == nil || IsNil(o.ReasonPhrase) {
		var ret string
		return ret
	}
	return *o.ReasonPhrase
}

// GetReasonPhraseOk returns a tuple with the ReasonPhrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetReasonPhraseOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonPhrase) {
		return nil, false
	}
	return o.ReasonPhrase, true
}

// HasReasonPhrase returns a boolean if a field has been set.
func (o *Status) HasReasonPhrase() bool {
	if o != nil && !IsNil(o.ReasonPhrase) {
		return true
	}

	return false
}

// SetReasonPhrase gets a reference to the given string and assigns it to the ReasonPhrase field.
func (o *Status) SetReasonPhrase(v string) {
	o.ReasonPhrase = &v
}

// GetThrowable returns the Throwable field value if set, zero value otherwise.
func (o *Status) GetThrowable() Throwable {
	if o == nil || IsNil(o.Throwable) {
		var ret Throwable
		return ret
	}
	return *o.Throwable
}

// GetThrowableOk returns a tuple with the Throwable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetThrowableOk() (*Throwable, bool) {
	if o == nil || IsNil(o.Throwable) {
		return nil, false
	}
	return o.Throwable, true
}

// HasThrowable returns a boolean if a field has been set.
func (o *Status) HasThrowable() bool {
	if o != nil && !IsNil(o.Throwable) {
		return true
	}

	return false
}

// SetThrowable gets a reference to the given Throwable and assigns it to the Throwable field.
func (o *Status) SetThrowable(v Throwable) {
	o.Throwable = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *Status) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *Status) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *Status) SetUri(v string) {
	o.Uri = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *Status) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *Status) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *Status) SetSuccess(v bool) {
	o.Success = &v
}

// GetServerError returns the ServerError field value if set, zero value otherwise.
func (o *Status) GetServerError() bool {
	if o == nil || IsNil(o.ServerError) {
		var ret bool
		return ret
	}
	return *o.ServerError
}

// GetServerErrorOk returns a tuple with the ServerError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetServerErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.ServerError) {
		return nil, false
	}
	return o.ServerError, true
}

// HasServerError returns a boolean if a field has been set.
func (o *Status) HasServerError() bool {
	if o != nil && !IsNil(o.ServerError) {
		return true
	}

	return false
}

// SetServerError gets a reference to the given bool and assigns it to the ServerError field.
func (o *Status) SetServerError(v bool) {
	o.ServerError = &v
}

// GetConnectorError returns the ConnectorError field value if set, zero value otherwise.
func (o *Status) GetConnectorError() bool {
	if o == nil || IsNil(o.ConnectorError) {
		var ret bool
		return ret
	}
	return *o.ConnectorError
}

// GetConnectorErrorOk returns a tuple with the ConnectorError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetConnectorErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.ConnectorError) {
		return nil, false
	}
	return o.ConnectorError, true
}

// HasConnectorError returns a boolean if a field has been set.
func (o *Status) HasConnectorError() bool {
	if o != nil && !IsNil(o.ConnectorError) {
		return true
	}

	return false
}

// SetConnectorError gets a reference to the given bool and assigns it to the ConnectorError field.
func (o *Status) SetConnectorError(v bool) {
	o.ConnectorError = &v
}

// GetClientError returns the ClientError field value if set, zero value otherwise.
func (o *Status) GetClientError() bool {
	if o == nil || IsNil(o.ClientError) {
		var ret bool
		return ret
	}
	return *o.ClientError
}

// GetClientErrorOk returns a tuple with the ClientError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetClientErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.ClientError) {
		return nil, false
	}
	return o.ClientError, true
}

// HasClientError returns a boolean if a field has been set.
func (o *Status) HasClientError() bool {
	if o != nil && !IsNil(o.ClientError) {
		return true
	}

	return false
}

// SetClientError gets a reference to the given bool and assigns it to the ClientError field.
func (o *Status) SetClientError(v bool) {
	o.ClientError = &v
}

// GetGlobalError returns the GlobalError field value if set, zero value otherwise.
func (o *Status) GetGlobalError() bool {
	if o == nil || IsNil(o.GlobalError) {
		var ret bool
		return ret
	}
	return *o.GlobalError
}

// GetGlobalErrorOk returns a tuple with the GlobalError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetGlobalErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.GlobalError) {
		return nil, false
	}
	return o.GlobalError, true
}

// HasGlobalError returns a boolean if a field has been set.
func (o *Status) HasGlobalError() bool {
	if o != nil && !IsNil(o.GlobalError) {
		return true
	}

	return false
}

// SetGlobalError gets a reference to the given bool and assigns it to the GlobalError field.
func (o *Status) SetGlobalError(v bool) {
	o.GlobalError = &v
}

// GetInformational returns the Informational field value if set, zero value otherwise.
func (o *Status) GetInformational() bool {
	if o == nil || IsNil(o.Informational) {
		var ret bool
		return ret
	}
	return *o.Informational
}

// GetInformationalOk returns a tuple with the Informational field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetInformationalOk() (*bool, bool) {
	if o == nil || IsNil(o.Informational) {
		return nil, false
	}
	return o.Informational, true
}

// HasInformational returns a boolean if a field has been set.
func (o *Status) HasInformational() bool {
	if o != nil && !IsNil(o.Informational) {
		return true
	}

	return false
}

// SetInformational gets a reference to the given bool and assigns it to the Informational field.
func (o *Status) SetInformational(v bool) {
	o.Informational = &v
}

// GetRedirection returns the Redirection field value if set, zero value otherwise.
func (o *Status) GetRedirection() bool {
	if o == nil || IsNil(o.Redirection) {
		var ret bool
		return ret
	}
	return *o.Redirection
}

// GetRedirectionOk returns a tuple with the Redirection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetRedirectionOk() (*bool, bool) {
	if o == nil || IsNil(o.Redirection) {
		return nil, false
	}
	return o.Redirection, true
}

// HasRedirection returns a boolean if a field has been set.
func (o *Status) HasRedirection() bool {
	if o != nil && !IsNil(o.Redirection) {
		return true
	}

	return false
}

// SetRedirection gets a reference to the given bool and assigns it to the Redirection field.
func (o *Status) SetRedirection(v bool) {
	o.Redirection = &v
}

// GetRecoverableError returns the RecoverableError field value if set, zero value otherwise.
func (o *Status) GetRecoverableError() bool {
	if o == nil || IsNil(o.RecoverableError) {
		var ret bool
		return ret
	}
	return *o.RecoverableError
}

// GetRecoverableErrorOk returns a tuple with the RecoverableError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetRecoverableErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.RecoverableError) {
		return nil, false
	}
	return o.RecoverableError, true
}

// HasRecoverableError returns a boolean if a field has been set.
func (o *Status) HasRecoverableError() bool {
	if o != nil && !IsNil(o.RecoverableError) {
		return true
	}

	return false
}

// SetRecoverableError gets a reference to the given bool and assigns it to the RecoverableError field.
func (o *Status) SetRecoverableError(v bool) {
	o.RecoverableError = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *Status) GetError() bool {
	if o == nil || IsNil(o.Error) {
		var ret bool
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *Status) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given bool and assigns it to the Error field.
func (o *Status) SetError(v bool) {
	o.Error = &v
}

func (o Status) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Status) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ReasonPhrase) {
		toSerialize["reasonPhrase"] = o.ReasonPhrase
	}
	if !IsNil(o.Throwable) {
		toSerialize["throwable"] = o.Throwable
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.ServerError) {
		toSerialize["serverError"] = o.ServerError
	}
	if !IsNil(o.ConnectorError) {
		toSerialize["connectorError"] = o.ConnectorError
	}
	if !IsNil(o.ClientError) {
		toSerialize["clientError"] = o.ClientError
	}
	if !IsNil(o.GlobalError) {
		toSerialize["globalError"] = o.GlobalError
	}
	if !IsNil(o.Informational) {
		toSerialize["informational"] = o.Informational
	}
	if !IsNil(o.Redirection) {
		toSerialize["redirection"] = o.Redirection
	}
	if !IsNil(o.RecoverableError) {
		toSerialize["recoverableError"] = o.RecoverableError
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableStatus struct {
	value *Status
	isSet bool
}

func (v NullableStatus) Get() *Status {
	return v.value
}

func (v *NullableStatus) Set(val *Status) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus(val *Status) *NullableStatus {
	return &NullableStatus{value: val, isSet: true}
}

func (v NullableStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


