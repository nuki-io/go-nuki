/*
Nuki API

The Nuki Web Api

API version: 3.10.2
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Handler type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Handler{}

// Handler struct for Handler
type Handler struct {
	Filter map[string]interface{} `json:"filter,omitempty"`
	Formatter map[string]interface{} `json:"formatter,omitempty"`
	ErrorManager map[string]interface{} `json:"errorManager,omitempty"`
	Encoding *string `json:"encoding,omitempty"`
	Level *Level `json:"level,omitempty"`
}

// NewHandler instantiates a new Handler object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandler() *Handler {
	this := Handler{}
	return &this
}

// NewHandlerWithDefaults instantiates a new Handler object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlerWithDefaults() *Handler {
	this := Handler{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *Handler) GetFilter() map[string]interface{} {
	if o == nil || IsNil(o.Filter) {
		var ret map[string]interface{}
		return ret
	}
	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Handler) GetFilterOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Filter) {
		return map[string]interface{}{}, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *Handler) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given map[string]interface{} and assigns it to the Filter field.
func (o *Handler) SetFilter(v map[string]interface{}) {
	o.Filter = v
}

// GetFormatter returns the Formatter field value if set, zero value otherwise.
func (o *Handler) GetFormatter() map[string]interface{} {
	if o == nil || IsNil(o.Formatter) {
		var ret map[string]interface{}
		return ret
	}
	return o.Formatter
}

// GetFormatterOk returns a tuple with the Formatter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Handler) GetFormatterOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Formatter) {
		return map[string]interface{}{}, false
	}
	return o.Formatter, true
}

// HasFormatter returns a boolean if a field has been set.
func (o *Handler) HasFormatter() bool {
	if o != nil && !IsNil(o.Formatter) {
		return true
	}

	return false
}

// SetFormatter gets a reference to the given map[string]interface{} and assigns it to the Formatter field.
func (o *Handler) SetFormatter(v map[string]interface{}) {
	o.Formatter = v
}

// GetErrorManager returns the ErrorManager field value if set, zero value otherwise.
func (o *Handler) GetErrorManager() map[string]interface{} {
	if o == nil || IsNil(o.ErrorManager) {
		var ret map[string]interface{}
		return ret
	}
	return o.ErrorManager
}

// GetErrorManagerOk returns a tuple with the ErrorManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Handler) GetErrorManagerOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ErrorManager) {
		return map[string]interface{}{}, false
	}
	return o.ErrorManager, true
}

// HasErrorManager returns a boolean if a field has been set.
func (o *Handler) HasErrorManager() bool {
	if o != nil && !IsNil(o.ErrorManager) {
		return true
	}

	return false
}

// SetErrorManager gets a reference to the given map[string]interface{} and assigns it to the ErrorManager field.
func (o *Handler) SetErrorManager(v map[string]interface{}) {
	o.ErrorManager = v
}

// GetEncoding returns the Encoding field value if set, zero value otherwise.
func (o *Handler) GetEncoding() string {
	if o == nil || IsNil(o.Encoding) {
		var ret string
		return ret
	}
	return *o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Handler) GetEncodingOk() (*string, bool) {
	if o == nil || IsNil(o.Encoding) {
		return nil, false
	}
	return o.Encoding, true
}

// HasEncoding returns a boolean if a field has been set.
func (o *Handler) HasEncoding() bool {
	if o != nil && !IsNil(o.Encoding) {
		return true
	}

	return false
}

// SetEncoding gets a reference to the given string and assigns it to the Encoding field.
func (o *Handler) SetEncoding(v string) {
	o.Encoding = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *Handler) GetLevel() Level {
	if o == nil || IsNil(o.Level) {
		var ret Level
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Handler) GetLevelOk() (*Level, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *Handler) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given Level and assigns it to the Level field.
func (o *Handler) SetLevel(v Level) {
	o.Level = &v
}

func (o Handler) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Handler) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Formatter) {
		toSerialize["formatter"] = o.Formatter
	}
	if !IsNil(o.ErrorManager) {
		toSerialize["errorManager"] = o.ErrorManager
	}
	if !IsNil(o.Encoding) {
		toSerialize["encoding"] = o.Encoding
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	return toSerialize, nil
}

type NullableHandler struct {
	value *Handler
	isSet bool
}

func (v NullableHandler) Get() *Handler {
	return v.value
}

func (v *NullableHandler) Set(val *Handler) {
	v.value = val
	v.isSet = true
}

func (v NullableHandler) IsSet() bool {
	return v.isSet
}

func (v *NullableHandler) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandler(val *Handler) *NullableHandler {
	return &NullableHandler{value: val, isSet: true}
}

func (v NullableHandler) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandler) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


