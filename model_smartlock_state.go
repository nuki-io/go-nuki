/*
Nuki API

The Nuki Web Api

API version: 0.0
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the SmartlockState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartlockState{}

// SmartlockState struct for SmartlockState
type SmartlockState struct {
	// The smartlock mode: 0 .. uninitialized, 1 .. pairing, 2 .. door (default), 3 .. continuous (type=2 only), 4 .. maintenance, 5 .. off-door charging
	Mode int32 `json:"mode"`
	// The smartlock state: type=0/3/4: 0 .. uncalibrated, 1 .. locked, 2 .. unlocking, 3 .. unlocked, 4 .. locking, 5 .. unlatched, 6 .. unlocked (lock 'n' go), 7 .. unlatching, 224 .. Error wrong entry code, 225 .. Error wrong Fingerprint, 254 .. motor blocked, 255 .. undefined; type=2: 0 .. untrained, 1 .. online, 3 .. ring to open active, 5 .. open, 7 .. opening, 253 .. boot run, 255 .. undefined
	State int32 `json:"state"`
	//  The state trigger: 0 .. system, 1 .. manual, 2 .. button, 3 .. automatic, 4 .. web (type=1 only), 5 .. app (type=1 only), 6 .. continuous mode (type=2 only), 7 .. accessory (type=3 only)
	Trigger int32 `json:"trigger"`
	// The action: type=0/3/4: 1 .. unlock, 2 .. lock, 3 .. unlatch, 4 .. lock 'n' go, 5 .. lock 'n' go with unlatch; type=1: 1 .. unlock; type=2: 1 .. activate ring to open, 2 .. deactivate ring to open, 3 .. open (electric strike actuation)
	LastAction int32 `json:"lastAction"`
	// True if the battery state of the device is critical
	BatteryCritical bool `json:"batteryCritical"`
	// True if a Nuki battery pack in a Smart Lock is currently charging
	BatteryCharging *bool `json:"batteryCharging,omitempty"`
	// Remaining capacity of a Nuki battery pack in %
	BatteryCharge *int32 `json:"batteryCharge,omitempty"`
	// True if the battery of a paired Keypad is critical (only available for supported devices)
	KeypadBatteryCritical *bool `json:"keypadBatteryCritical,omitempty"`
	// True if the battery of a paired doorsensor is critical (only available for supported devices)
	DoorsensorBatteryCritical *bool `json:"doorsensorBatteryCritical,omitempty"`
	// The door state: 0 .. unavailable/not paired, 1 .. deactivated, 2 .. door closed, 3 .. door opened, 4 .. door state unknown, 5 .. calibrating, 16 .. uncalibrated, 240 .. removed, 255 .. unknown
	DoorState int32 `json:"doorState"`
	// [deprecated] Remaining ring to open time; 0 if ring to open is not active (type=2 only)
	RingToOpenTimer int32 `json:"ringToOpenTimer"`
	// End date of ring to open timeout; null if ring to open is not active (type=2 only)
	RingToOpenEnd *time.Time `json:"ringToOpenEnd,omitempty"`
	// True if night mode currently active
	NightMode bool `json:"nightMode"`
	// The operation id - if set it's locked for another operation
	OperationId *string `json:"operationId,omitempty"`
}

type _SmartlockState SmartlockState

// NewSmartlockState instantiates a new SmartlockState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartlockState(mode int32, state int32, trigger int32, lastAction int32, batteryCritical bool, doorState int32, ringToOpenTimer int32, nightMode bool) *SmartlockState {
	this := SmartlockState{}
	this.Mode = mode
	this.State = state
	this.Trigger = trigger
	this.LastAction = lastAction
	this.BatteryCritical = batteryCritical
	this.DoorState = doorState
	this.RingToOpenTimer = ringToOpenTimer
	this.NightMode = nightMode
	return &this
}

// NewSmartlockStateWithDefaults instantiates a new SmartlockState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartlockStateWithDefaults() *SmartlockState {
	this := SmartlockState{}
	return &this
}

// GetMode returns the Mode field value
func (o *SmartlockState) GetMode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *SmartlockState) GetModeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *SmartlockState) SetMode(v int32) {
	o.Mode = v
}

// GetState returns the State field value
func (o *SmartlockState) GetState() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *SmartlockState) GetStateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *SmartlockState) SetState(v int32) {
	o.State = v
}

// GetTrigger returns the Trigger field value
func (o *SmartlockState) GetTrigger() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value
// and a boolean to check if the value has been set.
func (o *SmartlockState) GetTriggerOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Trigger, true
}

// SetTrigger sets field value
func (o *SmartlockState) SetTrigger(v int32) {
	o.Trigger = v
}

// GetLastAction returns the LastAction field value
func (o *SmartlockState) GetLastAction() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LastAction
}

// GetLastActionOk returns a tuple with the LastAction field value
// and a boolean to check if the value has been set.
func (o *SmartlockState) GetLastActionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastAction, true
}

// SetLastAction sets field value
func (o *SmartlockState) SetLastAction(v int32) {
	o.LastAction = v
}

// GetBatteryCritical returns the BatteryCritical field value
func (o *SmartlockState) GetBatteryCritical() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BatteryCritical
}

// GetBatteryCriticalOk returns a tuple with the BatteryCritical field value
// and a boolean to check if the value has been set.
func (o *SmartlockState) GetBatteryCriticalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BatteryCritical, true
}

// SetBatteryCritical sets field value
func (o *SmartlockState) SetBatteryCritical(v bool) {
	o.BatteryCritical = v
}

// GetBatteryCharging returns the BatteryCharging field value if set, zero value otherwise.
func (o *SmartlockState) GetBatteryCharging() bool {
	if o == nil || IsNil(o.BatteryCharging) {
		var ret bool
		return ret
	}
	return *o.BatteryCharging
}

// GetBatteryChargingOk returns a tuple with the BatteryCharging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockState) GetBatteryChargingOk() (*bool, bool) {
	if o == nil || IsNil(o.BatteryCharging) {
		return nil, false
	}
	return o.BatteryCharging, true
}

// HasBatteryCharging returns a boolean if a field has been set.
func (o *SmartlockState) HasBatteryCharging() bool {
	if o != nil && !IsNil(o.BatteryCharging) {
		return true
	}

	return false
}

// SetBatteryCharging gets a reference to the given bool and assigns it to the BatteryCharging field.
func (o *SmartlockState) SetBatteryCharging(v bool) {
	o.BatteryCharging = &v
}

// GetBatteryCharge returns the BatteryCharge field value if set, zero value otherwise.
func (o *SmartlockState) GetBatteryCharge() int32 {
	if o == nil || IsNil(o.BatteryCharge) {
		var ret int32
		return ret
	}
	return *o.BatteryCharge
}

// GetBatteryChargeOk returns a tuple with the BatteryCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockState) GetBatteryChargeOk() (*int32, bool) {
	if o == nil || IsNil(o.BatteryCharge) {
		return nil, false
	}
	return o.BatteryCharge, true
}

// HasBatteryCharge returns a boolean if a field has been set.
func (o *SmartlockState) HasBatteryCharge() bool {
	if o != nil && !IsNil(o.BatteryCharge) {
		return true
	}

	return false
}

// SetBatteryCharge gets a reference to the given int32 and assigns it to the BatteryCharge field.
func (o *SmartlockState) SetBatteryCharge(v int32) {
	o.BatteryCharge = &v
}

// GetKeypadBatteryCritical returns the KeypadBatteryCritical field value if set, zero value otherwise.
func (o *SmartlockState) GetKeypadBatteryCritical() bool {
	if o == nil || IsNil(o.KeypadBatteryCritical) {
		var ret bool
		return ret
	}
	return *o.KeypadBatteryCritical
}

// GetKeypadBatteryCriticalOk returns a tuple with the KeypadBatteryCritical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockState) GetKeypadBatteryCriticalOk() (*bool, bool) {
	if o == nil || IsNil(o.KeypadBatteryCritical) {
		return nil, false
	}
	return o.KeypadBatteryCritical, true
}

// HasKeypadBatteryCritical returns a boolean if a field has been set.
func (o *SmartlockState) HasKeypadBatteryCritical() bool {
	if o != nil && !IsNil(o.KeypadBatteryCritical) {
		return true
	}

	return false
}

// SetKeypadBatteryCritical gets a reference to the given bool and assigns it to the KeypadBatteryCritical field.
func (o *SmartlockState) SetKeypadBatteryCritical(v bool) {
	o.KeypadBatteryCritical = &v
}

// GetDoorsensorBatteryCritical returns the DoorsensorBatteryCritical field value if set, zero value otherwise.
func (o *SmartlockState) GetDoorsensorBatteryCritical() bool {
	if o == nil || IsNil(o.DoorsensorBatteryCritical) {
		var ret bool
		return ret
	}
	return *o.DoorsensorBatteryCritical
}

// GetDoorsensorBatteryCriticalOk returns a tuple with the DoorsensorBatteryCritical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockState) GetDoorsensorBatteryCriticalOk() (*bool, bool) {
	if o == nil || IsNil(o.DoorsensorBatteryCritical) {
		return nil, false
	}
	return o.DoorsensorBatteryCritical, true
}

// HasDoorsensorBatteryCritical returns a boolean if a field has been set.
func (o *SmartlockState) HasDoorsensorBatteryCritical() bool {
	if o != nil && !IsNil(o.DoorsensorBatteryCritical) {
		return true
	}

	return false
}

// SetDoorsensorBatteryCritical gets a reference to the given bool and assigns it to the DoorsensorBatteryCritical field.
func (o *SmartlockState) SetDoorsensorBatteryCritical(v bool) {
	o.DoorsensorBatteryCritical = &v
}

// GetDoorState returns the DoorState field value
func (o *SmartlockState) GetDoorState() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DoorState
}

// GetDoorStateOk returns a tuple with the DoorState field value
// and a boolean to check if the value has been set.
func (o *SmartlockState) GetDoorStateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DoorState, true
}

// SetDoorState sets field value
func (o *SmartlockState) SetDoorState(v int32) {
	o.DoorState = v
}

// GetRingToOpenTimer returns the RingToOpenTimer field value
func (o *SmartlockState) GetRingToOpenTimer() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RingToOpenTimer
}

// GetRingToOpenTimerOk returns a tuple with the RingToOpenTimer field value
// and a boolean to check if the value has been set.
func (o *SmartlockState) GetRingToOpenTimerOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RingToOpenTimer, true
}

// SetRingToOpenTimer sets field value
func (o *SmartlockState) SetRingToOpenTimer(v int32) {
	o.RingToOpenTimer = v
}

// GetRingToOpenEnd returns the RingToOpenEnd field value if set, zero value otherwise.
func (o *SmartlockState) GetRingToOpenEnd() time.Time {
	if o == nil || IsNil(o.RingToOpenEnd) {
		var ret time.Time
		return ret
	}
	return *o.RingToOpenEnd
}

// GetRingToOpenEndOk returns a tuple with the RingToOpenEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockState) GetRingToOpenEndOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RingToOpenEnd) {
		return nil, false
	}
	return o.RingToOpenEnd, true
}

// HasRingToOpenEnd returns a boolean if a field has been set.
func (o *SmartlockState) HasRingToOpenEnd() bool {
	if o != nil && !IsNil(o.RingToOpenEnd) {
		return true
	}

	return false
}

// SetRingToOpenEnd gets a reference to the given time.Time and assigns it to the RingToOpenEnd field.
func (o *SmartlockState) SetRingToOpenEnd(v time.Time) {
	o.RingToOpenEnd = &v
}

// GetNightMode returns the NightMode field value
func (o *SmartlockState) GetNightMode() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.NightMode
}

// GetNightModeOk returns a tuple with the NightMode field value
// and a boolean to check if the value has been set.
func (o *SmartlockState) GetNightModeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NightMode, true
}

// SetNightMode sets field value
func (o *SmartlockState) SetNightMode(v bool) {
	o.NightMode = v
}

// GetOperationId returns the OperationId field value if set, zero value otherwise.
func (o *SmartlockState) GetOperationId() string {
	if o == nil || IsNil(o.OperationId) {
		var ret string
		return ret
	}
	return *o.OperationId
}

// GetOperationIdOk returns a tuple with the OperationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartlockState) GetOperationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OperationId) {
		return nil, false
	}
	return o.OperationId, true
}

// HasOperationId returns a boolean if a field has been set.
func (o *SmartlockState) HasOperationId() bool {
	if o != nil && !IsNil(o.OperationId) {
		return true
	}

	return false
}

// SetOperationId gets a reference to the given string and assigns it to the OperationId field.
func (o *SmartlockState) SetOperationId(v string) {
	o.OperationId = &v
}

func (o SmartlockState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartlockState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mode"] = o.Mode
	toSerialize["state"] = o.State
	toSerialize["trigger"] = o.Trigger
	toSerialize["lastAction"] = o.LastAction
	toSerialize["batteryCritical"] = o.BatteryCritical
	if !IsNil(o.BatteryCharging) {
		toSerialize["batteryCharging"] = o.BatteryCharging
	}
	if !IsNil(o.BatteryCharge) {
		toSerialize["batteryCharge"] = o.BatteryCharge
	}
	if !IsNil(o.KeypadBatteryCritical) {
		toSerialize["keypadBatteryCritical"] = o.KeypadBatteryCritical
	}
	if !IsNil(o.DoorsensorBatteryCritical) {
		toSerialize["doorsensorBatteryCritical"] = o.DoorsensorBatteryCritical
	}
	toSerialize["doorState"] = o.DoorState
	toSerialize["ringToOpenTimer"] = o.RingToOpenTimer
	if !IsNil(o.RingToOpenEnd) {
		toSerialize["ringToOpenEnd"] = o.RingToOpenEnd
	}
	toSerialize["nightMode"] = o.NightMode
	if !IsNil(o.OperationId) {
		toSerialize["operationId"] = o.OperationId
	}
	return toSerialize, nil
}

func (o *SmartlockState) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mode",
		"state",
		"trigger",
		"lastAction",
		"batteryCritical",
		"doorState",
		"ringToOpenTimer",
		"nightMode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmartlockState := _SmartlockState{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSmartlockState)

	if err != nil {
		return err
	}

	*o = SmartlockState(varSmartlockState)

	return err
}

type NullableSmartlockState struct {
	value *SmartlockState
	isSet bool
}

func (v NullableSmartlockState) Get() *SmartlockState {
	return v.value
}

func (v *NullableSmartlockState) Set(val *SmartlockState) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartlockState) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartlockState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartlockState(val *SmartlockState) *NullableSmartlockState {
	return &NullableSmartlockState{value: val, isSet: true}
}

func (v NullableSmartlockState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartlockState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


