/*
Nuki API

The Nuki Web Api

API version: 4.0.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AccountSubUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountSubUpdate{}

// AccountSubUpdate struct for AccountSubUpdate
type AccountSubUpdate struct {
	// The new email address
	Email *string `json:"email,omitempty"`
	// The new password (must be at least 7 chars long)
	Password *string `json:"password,omitempty"`
	// The new name of the sub account
	Name *string `json:"name,omitempty"`
	// The new right bitmask of the sub account: 1 .. operate smartlock, 2 .. change smartlock config, 4 .. manage smartlock users, 8 .. view smartlock logs, 16 .. manage sub accounts, 32 .. manage sub accounts, 64 .. create smartlocks
	Rights *int32 `json:"rights,omitempty"`
	// The language code
	Language string `json:"language"`
	Config *AccountConfig `json:"config,omitempty"`
	Profile *AccountProfile `json:"profile,omitempty"`
}

type _AccountSubUpdate AccountSubUpdate

// NewAccountSubUpdate instantiates a new AccountSubUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountSubUpdate(language string) *AccountSubUpdate {
	this := AccountSubUpdate{}
	this.Language = language
	return &this
}

// NewAccountSubUpdateWithDefaults instantiates a new AccountSubUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountSubUpdateWithDefaults() *AccountSubUpdate {
	this := AccountSubUpdate{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *AccountSubUpdate) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSubUpdate) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *AccountSubUpdate) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *AccountSubUpdate) SetEmail(v string) {
	o.Email = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *AccountSubUpdate) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSubUpdate) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *AccountSubUpdate) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *AccountSubUpdate) SetPassword(v string) {
	o.Password = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AccountSubUpdate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSubUpdate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AccountSubUpdate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AccountSubUpdate) SetName(v string) {
	o.Name = &v
}

// GetRights returns the Rights field value if set, zero value otherwise.
func (o *AccountSubUpdate) GetRights() int32 {
	if o == nil || IsNil(o.Rights) {
		var ret int32
		return ret
	}
	return *o.Rights
}

// GetRightsOk returns a tuple with the Rights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSubUpdate) GetRightsOk() (*int32, bool) {
	if o == nil || IsNil(o.Rights) {
		return nil, false
	}
	return o.Rights, true
}

// HasRights returns a boolean if a field has been set.
func (o *AccountSubUpdate) HasRights() bool {
	if o != nil && !IsNil(o.Rights) {
		return true
	}

	return false
}

// SetRights gets a reference to the given int32 and assigns it to the Rights field.
func (o *AccountSubUpdate) SetRights(v int32) {
	o.Rights = &v
}

// GetLanguage returns the Language field value
func (o *AccountSubUpdate) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *AccountSubUpdate) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *AccountSubUpdate) SetLanguage(v string) {
	o.Language = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *AccountSubUpdate) GetConfig() AccountConfig {
	if o == nil || IsNil(o.Config) {
		var ret AccountConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSubUpdate) GetConfigOk() (*AccountConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *AccountSubUpdate) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given AccountConfig and assigns it to the Config field.
func (o *AccountSubUpdate) SetConfig(v AccountConfig) {
	o.Config = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *AccountSubUpdate) GetProfile() AccountProfile {
	if o == nil || IsNil(o.Profile) {
		var ret AccountProfile
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSubUpdate) GetProfileOk() (*AccountProfile, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *AccountSubUpdate) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given AccountProfile and assigns it to the Profile field.
func (o *AccountSubUpdate) SetProfile(v AccountProfile) {
	o.Profile = &v
}

func (o AccountSubUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountSubUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Rights) {
		toSerialize["rights"] = o.Rights
	}
	toSerialize["language"] = o.Language
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	return toSerialize, nil
}

func (o *AccountSubUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"language",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountSubUpdate := _AccountSubUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountSubUpdate)

	if err != nil {
		return err
	}

	*o = AccountSubUpdate(varAccountSubUpdate)

	return err
}

type NullableAccountSubUpdate struct {
	value *AccountSubUpdate
	isSet bool
}

func (v NullableAccountSubUpdate) Get() *AccountSubUpdate {
	return v.value
}

func (v *NullableAccountSubUpdate) Set(val *AccountSubUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountSubUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountSubUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountSubUpdate(val *AccountSubUpdate) *NullableAccountSubUpdate {
	return &NullableAccountSubUpdate{value: val, isSet: true}
}

func (v NullableAccountSubUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountSubUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


