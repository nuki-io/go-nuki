/*
Nuki API

The Nuki Web Api

API version: 4.0.1
Contact: contact@nuki.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ResourceBundle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceBundle{}

// ResourceBundle struct for ResourceBundle
type ResourceBundle struct {
	Locale *Locale `json:"locale,omitempty"`
	Keys map[string]interface{} `json:"keys,omitempty"`
	BaseBundleName *string `json:"baseBundleName,omitempty"`
}

// NewResourceBundle instantiates a new ResourceBundle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceBundle() *ResourceBundle {
	this := ResourceBundle{}
	return &this
}

// NewResourceBundleWithDefaults instantiates a new ResourceBundle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceBundleWithDefaults() *ResourceBundle {
	this := ResourceBundle{}
	return &this
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *ResourceBundle) GetLocale() Locale {
	if o == nil || IsNil(o.Locale) {
		var ret Locale
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceBundle) GetLocaleOk() (*Locale, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *ResourceBundle) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given Locale and assigns it to the Locale field.
func (o *ResourceBundle) SetLocale(v Locale) {
	o.Locale = &v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *ResourceBundle) GetKeys() map[string]interface{} {
	if o == nil || IsNil(o.Keys) {
		var ret map[string]interface{}
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceBundle) GetKeysOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Keys) {
		return map[string]interface{}{}, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *ResourceBundle) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given map[string]interface{} and assigns it to the Keys field.
func (o *ResourceBundle) SetKeys(v map[string]interface{}) {
	o.Keys = v
}

// GetBaseBundleName returns the BaseBundleName field value if set, zero value otherwise.
func (o *ResourceBundle) GetBaseBundleName() string {
	if o == nil || IsNil(o.BaseBundleName) {
		var ret string
		return ret
	}
	return *o.BaseBundleName
}

// GetBaseBundleNameOk returns a tuple with the BaseBundleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceBundle) GetBaseBundleNameOk() (*string, bool) {
	if o == nil || IsNil(o.BaseBundleName) {
		return nil, false
	}
	return o.BaseBundleName, true
}

// HasBaseBundleName returns a boolean if a field has been set.
func (o *ResourceBundle) HasBaseBundleName() bool {
	if o != nil && !IsNil(o.BaseBundleName) {
		return true
	}

	return false
}

// SetBaseBundleName gets a reference to the given string and assigns it to the BaseBundleName field.
func (o *ResourceBundle) SetBaseBundleName(v string) {
	o.BaseBundleName = &v
}

func (o ResourceBundle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceBundle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	if !IsNil(o.BaseBundleName) {
		toSerialize["baseBundleName"] = o.BaseBundleName
	}
	return toSerialize, nil
}

type NullableResourceBundle struct {
	value *ResourceBundle
	isSet bool
}

func (v NullableResourceBundle) Get() *ResourceBundle {
	return v.value
}

func (v *NullableResourceBundle) Set(val *ResourceBundle) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceBundle) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceBundle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceBundle(val *ResourceBundle) *NullableResourceBundle {
	return &NullableResourceBundle{value: val, isSet: true}
}

func (v NullableResourceBundle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceBundle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


